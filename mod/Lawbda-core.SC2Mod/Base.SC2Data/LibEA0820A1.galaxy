include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

include "LibEA0820A1_h"

//--------------------------------------------------------------------------------------------------
// Library: LawbdaSquad
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libEA0820A1_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
}

// Variable Initialization
bool libEA0820A1_InitVariables_completed = false;

void libEA0820A1_InitVariables () {
    int init_i;
    int init_j;
    int init_k;

    if (libEA0820A1_InitVariables_completed) {
        return;
    }

    libEA0820A1_InitVariables_completed = true;

    libEA0820A1_gv__TP_DropPod_Units = UnitGroupEmpty();
    libEA0820A1_gv_zS_ObjectivePanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_TextColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_BGColor[init_i] = Color(0,0,0);
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_AnimationStartOptions[init_i] = 0;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_AnimationEndOptions[init_i] = 0;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_DurationType[init_i] = c_transmissionDurationAdd;
    }
    for (init_i = 0; init_i <= 500; init_i += 1) {
        libEA0820A1_gv__CB_Line_FaceOption[init_i] = true;
    }
    libEA0820A1_gv__CB_Line_Last = -1;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libEA0820A1_gv__CB_Current_ChatBubble[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libEA0820A1_gv__CB_Current_UnitIndex[init_i] = -1;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libEA0820A1_gv__CB_Current_LineIndex[init_i] = -1;
    }
    libEA0820A1_gv__CB_TP_TEXT = StringToText("");
    libEA0820A1_gv__CB_TP_SOUNDLINK = SoundLink("EditorDefaultSound", -1);
    libEA0820A1_gv__CB_TP_DURATIONTYPE = c_transmissionDurationAdd;
    libEA0820A1_gv__CB_TP_TEXTTAG = c_textTagNone;
    libEA0820A1_gv__CB_TP_WAITSOUND_DURATIONTYPE = c_transmissionDurationAdd;
    libEA0820A1_gv__MsgDlg = c_invalidDialogId;
    libEA0820A1_gv__MsgDlgButton = c_invalidDialogControlId;
    libEA0820A1_gv_zS_CampaignTrialEndDialog = c_invalidDialogId;
    libEA0820A1_gv_zS_CampaignTrialEndPanel = c_invalidDialogControlId;
    libEA0820A1_gv_zS_CampaignTrialEndUpgradeButton = c_invalidDialogControlId;
    libEA0820A1_gv_zS_CampaignTrialEndQuitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tSX_RecentTech[init_i] = libEA0820A1_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libEA0820A1_gv_tSX_RecentMerc[init_i] = libEA0820A1_ge_StoryMercID_MercNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libEA0820A1_gv_tSX_RecentResearch[init_i] = libEA0820A1_ge_StoryResearchID_ResearchNone;
    }
    libEA0820A1_gv_TSC_MAP_LAST = ((libEA0820A1_ge_MapID_MapLast) - 1);
    libEA0820A1_gv_TSC_MISSION_FIRST = (libEA0820A1_ge_MapID_MapTRaynor01);
    libEA0820A1_gv_TSC_MISSION_LAST = (libEA0820A1_ge_MapID_MapTSecret01);
    libEA0820A1_gv_tS_CurrentMap = libEA0820A1_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MapID[init_i] = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MapType[init_i] = libEA0820A1_ge_MapType_None;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MapSubtitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MapFile[init_i] = "";
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MissionSummary[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MissionLocation[init_i] = libEA0820A1_ge_PlanetID_PlanetNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MissionContact[init_i] = libEA0820A1_ge_ContactID_ContactNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        libEA0820A1_gv_tS_MissionEnemyForces[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            libEA0820A1_gv_tS_MissionObjectives[init_i][init_j] = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
        }
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libEA0820A1_gv_tS_MissionTechUnitsEnabled[init_i][init_j] = libCamp_ge_StoryTechGroup_StoryTechGroupNone;
        }
    }
    for (init_i = 0; init_i <= 150; init_i += 1) {
        libEA0820A1_gv_tS_ContactName[init_i] = StringToText("");
    }
    libEA0820A1_gv_tS_MissionABChoiceResult = libEA0820A1_ge_MapID_MapNone;
    libEA0820A1_gv_TSC_MERC_LAST = ((libEA0820A1_ge_StoryMercID_MercLast) - 1);
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercID[init_i] = libEA0820A1_ge_StoryMercID_MercNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercNames[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercDescriptions[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libEA0820A1_gv_tS_MercTechSubGroup[init_i][init_j] = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercUnitText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercAvailabilityText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libEA0820A1_gv_tS_MercSpecialText[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_MercUIMercenaries[init_i] = c_invalidMercenaryId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_BattleReportMissions[init_i] = c_invalidBattleReportId;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_BattleReportScenes[init_i] = c_invalidBattleReportId;
    }
    libEA0820A1_gv_TSC_OBJECTIVE_LAST = ((libEA0820A1_ge_MissionObjective_MissionObjectiveLast) - 1);
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_MissionObjObjective[init_i] = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_MissionObjMap[init_i] = libEA0820A1_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_MissionObjIDs[init_i] = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    }
    libEA0820A1_gv_TSC_RESEARCH_LAST = ((libEA0820A1_ge_StoryResearchID_ResearchLast) - 1);
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_ResearchID[init_i] = libEA0820A1_ge_StoryResearchID_ResearchNone;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            for (init_k = 0; init_k <= 3; init_k += 1) {
                libEA0820A1_gv_tS_ResearchIDInUIStructure[init_i][init_j][init_k] = libEA0820A1_ge_StoryResearchID_ResearchNone;
            }
        }
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_ResearchCategory[init_i] = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryNone;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_ResearchUIItem[init_i] = c_invalidResearchItemId;
    }
    for (init_i = 0; init_i <= 25; init_i += 1) {
        libEA0820A1_gv_tS_ResearchObjID[init_i] = libEA0820A1_ge_StoryResearchObject_ResearchObjectNone;
    }
    for (init_i = 0; init_i <= 35; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libEA0820A1_gv_tS_ResearchMissionObjects[init_i][init_j] = libEA0820A1_ge_StoryResearchObject_ResearchObjectNone;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libEA0820A1_gv_tS_ResearchUICategories[init_i] = c_invalidResearchCategoryId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            libEA0820A1_gv_tS_ResearchUITiers[init_i][init_j] = c_invalidResearchTierId;
        }
    }
    libEA0820A1_gv_tS_RoomChangeDialog = c_invalidDialogId;
    libEA0820A1_gv_tS_RoomChangeDialogBorder = c_invalidDialogControlId;
    libEA0820A1_gv_tS_RoomChangeDialogSubtitle = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_RoomChangeButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_RoomChangeButtonText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_RoomChangeButtonBG[init_i] = c_invalidDialogControlId;
    }
    libEA0820A1_gv_TSC_SCENE_LAST = ((libEA0820A1_ge_SceneID_SceneLast) - 1);
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_SceneIDs[init_i] = libEA0820A1_ge_SceneID_SceneNone;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libEA0820A1_gv_tS_SceneNames[init_i] = StringToText("");
    }
    libEA0820A1_gv_TSC_STORYSTATE_LAST = ((libEA0820A1_ge_StoryStateID_StoryStateLast) - 1);
    libEA0820A1_gv_tSC_PLANET_LAST = ((libEA0820A1_ge_PlanetID_PlanetLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_PlanetID[init_i] = libEA0820A1_ge_PlanetID_PlanetNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_PlanetMission[init_i] = libEA0820A1_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_PlanetSubtitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_PlanetName[init_i] = StringToText("");
    }
    libEA0820A1_gv_TSC_TECHCATEGORY_LAST = ((libEA0820A1_ge_StoryTechCategory_StoryTechCategoryLast) - 1);
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_TechCategoryID[init_i] = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_TechCategoryName[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libEA0820A1_gv_tS_TechCategory_UI[init_i] = c_invalidPurchaseCategoryId;
    }
    libEA0820A1_gv_TSC_TECHGROUP_LAST = ((libEA0820A1_ge_StoryTechGroup_StoryTechGroupLast) - 1);
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_TechGroupID[init_i] = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_TechGroupCategoryID[init_i] = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_TechGroupName[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_TechGroupState[init_i] = c_purchaseCategoryStateEnabled;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        libEA0820A1_gv_tS_TechGroup_UI[init_i] = c_invalidPurchaseGroupId;
    }
    libEA0820A1_gv_TSC_TECH_LAST = ((libEA0820A1_ge_StoryTech_StoryTechLast) - 1);
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_TechID[init_i] = libEA0820A1_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_Tech_GroupID[init_i] = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_Tech_ConvoID[init_i] = "Tech|Tech_SCV_1";
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_Tech_Requires[init_i] = libEA0820A1_ge_StoryTech_StoryTechNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_Tech_UI[init_i] = c_invalidPurchaseItemId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tSX_Tech_Status[init_i] = libEA0820A1_ge_StoryTechStates_TechUnavailable;
    }
    libEA0820A1_gv_tSX_RoomStates = "";
    libEA0820A1_gv_debug_MapIDForPerfTest = libEA0820A1_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tS_NonSnapShotObjectiveStates[init_i] = libEA0820A1_ge_MissionObjectiveState_ObjectiveUndiscovered;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tSX_Tutorial_HistoryTitle[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libEA0820A1_gv_tSX_Tutorial_HistoryDescription[init_i] = StringToText("");
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libEA0820A1_gv_tS_StoryUIVisibility_Menu[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libEA0820A1_gv_tS_StoryUIVisibility_Cash[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libEA0820A1_gv_tS_StoryUIVisibility_RoomChange[init_i] = true;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libEA0820A1_gv_tS_StoryUIVisibility_Tip[init_i] = true;
    }
    libEA0820A1_gv_unitGroupForReplaced = UnitGroupEmpty();
}

// Presets
// Functions
void libEA0820A1_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto7B700587_val;

    // Implementation
    if ((lp_formatOrNot == libEA0820A1_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto7B700587_val = lp_messageType;
        if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_Hint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_D661B413") + lp_message));
            SoundPlay(SoundLink("TUIHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringToText("") + lp_message));
            SoundPlay(SoundLink("TUIHint", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_Secret) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_EF979CC9") + lp_message));
            SoundPlay(SoundLink("TUISecret", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_NewUnitAcquired) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_8D7CFED7") + lp_message));
            SoundPlay(SoundLink("TUINewUnitAcquired", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_NewUnitAvailable) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_5B1397A1") + lp_message));
            SoundPlay(SoundLink("TUINewUnitAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_NewTechAvailable) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_D946E920") + lp_message));
            SoundPlay(SoundLink("TUINewTechAvailable", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_Warning) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_C0C82751") + lp_message));
            SoundPlay(SoundLink("TUIWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto7B700587_val == libEA0820A1_ge_CampaignMessageType_MissionFailed) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_EA0820A1_773F0642") + lp_message));
            SoundPlay(SoundLink("TUIWarning", 0), lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

void libEA0820A1_gf__ZergDropPod (point lp_location, unitgroup lp_units) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup autoFAAE9604_g;
    int autoFAAE9604_u;
    unitgroup auto2E74C3FC_g;
    int auto2E74C3FC_u;

    // Variable Initialization

    // Implementation
    autoFAAE9604_g = lp_units;
    autoFAAE9604_u = UnitGroupCount(autoFAAE9604_g, c_unitCountAll);
    for (;; autoFAAE9604_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoFAAE9604_g, autoFAAE9604_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    UnitSetTeamColorIndex(UnitLastCreated(), 4);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto2E74C3FC_g = lp_units;
    auto2E74C3FC_u = UnitGroupCount(auto2E74C3FC_g, c_unitCountAll);
    for (;; auto2E74C3FC_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto2E74C3FC_g, auto2E74C3FC_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
        lv_angle = (lv_angle + 77.0);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libEA0820A1_gf__TerranDropPod (point lp_location, unitgroup lp_units) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;

    // Automatic Variable Declarations
    unitgroup autoF3099D86_g;
    int autoF3099D86_u;
    unitgroup autoF5E8C8AE_g;
    int autoF5E8C8AE_u;

    // Variable Initialization

    // Implementation
    autoF3099D86_g = lp_units;
    autoF3099D86_u = UnitGroupCount(autoF3099D86_g, c_unitCountAll);
    for (;; autoF3099D86_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoF3099D86_g, autoF3099D86_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    autoF5E8C8AE_g = lp_units;
    autoF5E8C8AE_u = UnitGroupCount(autoF5E8C8AE_g, c_unitCountAll);
    for (;; autoF5E8C8AE_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(autoF5E8C8AE_g, autoF5E8C8AE_u);
        if (lv_chosenUnit == null) { break; }
        lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_chosenUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libEA0820A1_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto5D4D635E_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    auto5D4D635E_val = lp_race;
    if (auto5D4D635E_val == libEA0820A1_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libEA0820A1_gf__TerranDropPod(lv_dropLocation, lv_dropUnits);
        }
        else {
            libEA0820A1_gv__TP_DropPod_Location = lv_dropLocation;
            libEA0820A1_gv__TP_DropPod_Units = lv_dropUnits;
            TriggerExecute(libEA0820A1_gt__TerranDropPod, true, false);
        }
    }
    else if (auto5D4D635E_val == libEA0820A1_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libEA0820A1_gf__ZergDropPod(lv_dropLocation, lv_dropUnits);
        }
        else {
            libEA0820A1_gv__TP_DropPod_Location = lv_dropLocation;
            libEA0820A1_gv__TP_DropPod_Units = lv_dropUnits;
            TriggerExecute(libEA0820A1_gt__ZergDropPod, true, false);
        }
    }
    else {
    }
}

void libEA0820A1_gf_TS_SaveMissionCompletion () {
    // Variable Declarations
    int lv_difficulty;
    int lv_bestTime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 1;

    // Implementation
    if (true) {
        return ;
    }

    lv_difficulty = PlayerDifficulty(1);
    libEA0820A1_gv_tS_MissionCompleteTime = FixedToInt(libNtve_gf_GamePlayTime(1));
    if (((lv_bestTime <= 0) || (libEA0820A1_gv_tS_MissionCompleteTime < lv_bestTime))) {
    }

}

void libEA0820A1_gf_TS_GameOver () {
    // Automatic Variable Declarations
}

void libEA0820A1_gf_EndCampaignMission (int lp_player, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    PerfTestStop();
    TriggerStop(libCamp_gt_DebugPerfTestGetFps);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    if ((lp_type == c_gameOverVictory)) {
    }
    else {
        GameOver(lp_player, lp_type, true, false);
    }
}

void libEA0820A1_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCamp_gv_tS_DebugProgressLaunchingMission == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        return ;
    }

    libEA0820A1_gf_TS_GameOver();
    libEA0820A1_gf_TS_SaveMissionCompletion();
    libEA0820A1_gf_TS_UpdateMissionObjectives();
    AITimePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    libEA0820A1_gv_tS_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libEA0820A1_gv_tS_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libEA0820A1_gf_CreateStorymodeTips () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_indexResearch;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    if ((ConversationDataStateGetValue("StoryTips|KeyboardShortcuts") == 0)) {
        ConversationDataStateSetValue("StoryTips|KeyboardShortcuts", 1);
        libEA0820A1_gf_CreateTipFromConversationState("StoryTips|KeyboardShortcuts", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
    }

    if ((libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTHorner05S) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTTosh03A) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTTosh03B) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTValerian02A) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTZeratul01) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTZeratul02) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTZeratul03) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTZeratul04)) {
    }

    if (true) {
    }

    libEA0820A1_gf_CreateNewStructureTips();
    libEA0820A1_gf_TS_CreateNewUpgradeTips();
}

void libEA0820A1_gf_CreateNewStructureTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03A) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03B) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTHorner05S) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian02A))) {
        return ;
    }

    if (true) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 10)) == true)) {
            libEA0820A1_gf_CreateTipFromConversationState("StoryTips|MissionNewStructureFactory", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
            Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
        }

    }

    if (true) {
        if ((TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 11)) == true)) {
            libEA0820A1_gf_CreateTipFromConversationState("StoryTips|MissionNewStructureStarport", libNtve_ge_TipType_NewStructure, PlayerGroupAll());
            Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
        }

    }

}

void libEA0820A1_gf_TS_CreateNewUpgradeTips () {
    // Automatic Variable Declarations
    // Implementation
    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03A) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03B) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTHorner05S) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian02A))) {
        return ;
    }

    if ((libEA0820A1_gv_tS_UpgradeInfantry2 == true) && (ConversationDataStateGetValue("StoryTips|EngineeringBay2") == 0)) {
        libEA0820A1_gf_CreateTipFromConversationState("StoryTips|EngineeringBay2", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|EngineeringBay2", 1);
        Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
    }

    if ((libEA0820A1_gv_tS_UpgradeInfantry3 == true) && (ConversationDataStateGetValue("StoryTips|EngineeringBay3") == 0)) {
        libEA0820A1_gf_CreateTipFromConversationState("StoryTips|EngineeringBay3", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|EngineeringBay3", 1);
        Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
    }

    if (((libEA0820A1_gv_tS_UpgradeVehicle2 == true) || (libEA0820A1_gv_tS_UpgradeShip2 == true)) && (ConversationDataStateGetValue("StoryTips|ArmoryLevel2") == 0)) {
        libEA0820A1_gf_CreateTipFromConversationState("StoryTips|ArmoryLevel2", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|ArmoryLevel2", 1);
        Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
    }

    if (((libEA0820A1_gv_tS_UpgradeVehicle3 == true) || (libEA0820A1_gv_tS_UpgradeShip3 == true)) && (ConversationDataStateGetValue("StoryTips|ArmoryLevel3") == 0)) {
        libEA0820A1_gf_CreateTipFromConversationState("StoryTips|ArmoryLevel3", libNtve_ge_TipType_NormalTip, PlayerGroupAll());
        ConversationDataStateSetValue("StoryTips|ArmoryLevel3", 1);
        Wait(libEA0820A1_gv_campaignHintDelay, c_timeReal);
    }

}

void libEA0820A1_gf_CreateTipFromConversationState (string lp_convoState, int lp_tipType, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(ConversationDataStateName(lp_convoState), lp_tipType), ConversationDataStateText(lp_convoState, "Description"), ConversationDataStateName(lp_convoState), ConversationDataStateImagePath(lp_convoState));
    ConversationDataStateSetValue(lp_convoState, 1);
}

void libEA0820A1_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapNone)) {
        return ;
    }

    libEA0820A1_gv_tS_MissionAutoSaveIndex += 1;
    GameSaveCreate(lv_name, lp_description, "", true);
}

void libEA0820A1_gf_SendTransmissionCampaign (unit lp_unit, soundlink lp_sound, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone) {
    // Variable Declarations
    bool lv_flashOption;
    int lv_portrait;
    transmissionsource lv_source;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
        lv_flashOption = true;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
    }
    else {
        lv_flashOption = false;
        lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
    }
    if ((lp_unit == null)) {
        lv_source = TransmissionSourceFromModel(null);
    }
    else {
        lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
    }
    TransmissionSend(PlayerGroupAll(), lv_source, lv_portrait, "Talk", lp_sound, null, null, lp_duration, lp_durationType, lp_waitUntilDone);
}

void libEA0820A1_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.25);
    }
}

void libEA0820A1_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    int autoB5AAAE9B_n;
    int autoB5AAAE9B_i;

    // Implementation
    autoB5AAAE9B_n = lp_count;
    for (autoB5AAAE9B_i = 1; autoB5AAAE9B_i <= autoB5AAAE9B_n; autoB5AAAE9B_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libEA0820A1_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, int lp_player) {
    // Variable Declarations
    int lv_textTag;

    // Automatic Variable Declarations
    int autoF9642C5E_val;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Implementation
    autoF9642C5E_val = lp_resourceType;
    if (autoF9642C5E_val == c_playerPropMinerals) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_EA0820A1_ED84598E") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_EA0820A1_584A0622")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
    }
    else if (autoF9642C5E_val == c_playerPropVespene) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupAll(), 100.0, 0.0);
        TextTagCreate((StringExternal("Param/Value/lib_EA0820A1_FAD5991B") + IntToText(lp_resourceAmount) + StringExternal("Param/Value/lib_EA0820A1_B28D69B1")), 24, UnitGetPosition(lp_cacheUnit), 1.0, true, false, PlayerGroupAll());
        lv_textTag = TextTagLastCreated();
        TextTagSetVelocity(lv_textTag, 0.5, 90.0);
        TextTagSetTime(lv_textTag, c_textTagTimeDuration, 2.0);
        UnitKill(lp_cacheUnit);
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
}

void libEA0820A1_gf_DisplayResearchPointsGiventoPlayer (int lp_researchObject, unit lp_researchUnit, int lp_player) {
    // Variable Declarations
    int lv_category;
    int lv_rewardProtoss;
    int lv_rewardZerg;
    text lv_text;

    // Automatic Variable Declarations
    int autoA263EE9F_val;

    // Variable Initialization
    lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;

    // Implementation
    if ((lv_rewardProtoss > 0)) {
        lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;
        lv_text = TextReplaceWord(StringExternal("Param/Value/lib_EA0820A1_347D2842"), StringExternal("Param/Value/lib_EA0820A1_231D6402"), IntToText(lv_rewardProtoss), c_stringReplaceAll, c_stringCase);
    }
    else {
        lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg;
        lv_text = TextReplaceWord(StringExternal("Param/Value/lib_EA0820A1_7F102921"), StringExternal("Param/Value/lib_EA0820A1_CB9D65CC"), IntToText(lv_rewardZerg), c_stringReplaceAll, c_stringCase);
    }
    TextTagCreate(lv_text, 24, UnitGetPosition(lp_researchUnit), 1.0, true, false, PlayerGroupSingle(lp_player));
    autoA263EE9F_val = lv_category;
    if (autoA263EE9F_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoA263EE9F_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
        SoundPlay(SoundLink("UI_ResourcePickup", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

int libEA0820A1_gf_LastAddedChatBubble () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv__CB_Line_Last;
}

void libEA0820A1_gf_ShowChatBubble (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv__CB_TP_UNIT = lp_unit;
    libEA0820A1_gv__CB_TP_PLAYER = lp_player;
    libEA0820A1_gv__CB_TP_FORCED = true;
    TriggerExecute(libEA0820A1_gt__CB_ActivateChatBubble, true, false);
}

void libEA0820A1_gf_AddChatBubbleLine2 (int lp_player, unit lp_unit, soundlink lp_sound, text lp_text, fixed lp_duration, int lp_durationType, bool lp_faceOption) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libEA0820A1_gv__CB_UnitLine_Count > libEA0820A1_gv__CBC_LINEMAX)) {
        return ;
    }

    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        if ((libEA0820A1_gv__CB_Unit_Count > libEA0820A1_gv__CBC_UNITMAX)) {
            return ;
        }

        lv_unitIndex = libEA0820A1_gf__CB_Unit_Add(lp_unit);
    }

    if ((lv_unitIndex <= 0)) {
        return ;
    }

    libEA0820A1_gf__CB_UnitLine_Add(lv_unitIndex, lp_player, lv_lineIndex);
}

void libEA0820A1_gf_ClearChatBubble (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf__CB_Current_Remove(lp_player);
}

void libEA0820A1_gf_RandomlyShuffleChatBubbleLines (unit lp_unit, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_unitLineIndex;
    int lv_unitLineIndexEnd;
    int lv_unitLineTemp;
    int lv_unitLineIndexRandom;

    // Automatic Variable Declarations
    int auto87416022_ae;
    const int auto87416022_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][lp_player] <= 0))) {
        return ;
    }

    lv_unitLineIndexEnd = libEA0820A1_gf__CB_Unit_GetLineEndIndex(lv_unitIndex, lp_player);
    auto87416022_ae = (lv_unitLineIndexEnd + 1);
    lv_unitLineIndex = libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player];
    for ( ; ( (auto87416022_ai >= 0 && lv_unitLineIndex <= auto87416022_ae) || (auto87416022_ai < 0 && lv_unitLineIndex >= auto87416022_ae) ) ; lv_unitLineIndex += auto87416022_ai ) {
        lv_unitLineIndexRandom = RandomInt(lv_unitLineIndex, lv_unitLineIndexEnd);
        lv_unitLineTemp = libEA0820A1_gv__CB_UnitLine[lv_unitLineIndex];
        libEA0820A1_gv__CB_UnitLine[lv_unitLineIndex] = libEA0820A1_gv__CB_UnitLine[lv_unitLineIndexRandom];
        libEA0820A1_gv__CB_UnitLine[lv_unitLineIndexRandom] = lv_unitLineTemp;
    }
}

void libEA0820A1_gf_ClearAllChatBubbleLinesFromUnit (unit lp_unit, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_unitLineIndex;

    // Automatic Variable Declarations
    int autoA38CA9B8_ae;
    const int autoA38CA9B8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex < 0)) {
        return ;
    }

    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][lp_player] <= 0))) {
        return ;
    }

    autoA38CA9B8_ae = libEA0820A1_gf__CB_Unit_GetLineEndIndex(lv_unitIndex, lp_player);
    lv_unitLineIndex = libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lp_player];
    for ( ; ( (autoA38CA9B8_ai >= 0 && lv_unitLineIndex <= autoA38CA9B8_ae) || (autoA38CA9B8_ai < 0 && lv_unitLineIndex >= autoA38CA9B8_ae) ) ; lv_unitLineIndex += autoA38CA9B8_ai ) {
        libEA0820A1_gf__CB_Line_Remove(libEA0820A1_gv__CB_UnitLine[lv_unitLineIndex]);
    }
    libEA0820A1_gf__CB_UnitLine_RemoveUnit(lv_unitIndex, lp_player);
}

void libEA0820A1_gf_SetChatBubbleActivationDistance (unit lp_unit, int lp_player, fixed lp_distance) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    libEA0820A1_gv__CB_Unit_ActivationDistance[lv_unitIndex][lp_player] = lp_distance;
}

void libEA0820A1_gf_SetChatBubbleColor (int lp_chatBubble, color lp_color, color lp_backgroundColor) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libEA0820A1_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libEA0820A1_gv__CB_Line_TextColor[lv_lineIndex] = lp_color;
    libEA0820A1_gv__CB_Line_BGColor[lv_lineIndex] = lp_backgroundColor;
}

void libEA0820A1_gf_SetChatBubbleAnimation2 (int lp_chatBubble, string lp_animation1, int lp_animation1Option, string lp_animation2, int lp_animation2Option) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libEA0820A1_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libEA0820A1_gv__CB_Line_AnimationStart[lv_lineIndex] = lp_animation1;
    libEA0820A1_gv__CB_Line_AnimationStartOptions[lv_lineIndex] = lp_animation1Option;
    libEA0820A1_gv__CB_Line_AnimationEnd[lv_lineIndex] = lp_animation2;
    libEA0820A1_gv__CB_Line_AnimationEndOptions[lv_lineIndex] = lp_animation2Option;
}

void libEA0820A1_gf_SetChatBubbleTrigger (int lp_chatBubble, trigger lp_triggerStart, trigger lp_triggerEnd) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libEA0820A1_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libEA0820A1_gv__CB_Line_TriggerStart[lv_lineIndex] = lp_triggerStart;
    libEA0820A1_gv__CB_Line_TriggerEnd[lv_lineIndex] = lp_triggerEnd;
}

void libEA0820A1_gf_SetChatBubbleFacingPoint (int lp_chatBubble, point lp_point) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_lineIndex = (lp_chatBubble);
    if ((libEA0820A1_gf__CB_Line_IsValid(lv_lineIndex) == false)) {
        return ;
    }

    libEA0820A1_gv__CB_Line_FaceLocation[lv_lineIndex] = lp_point;
}

void libEA0820A1_gf_ShowChatBubbleOnUnit (int lp_player, unit lp_unit, soundlink lp_sound, text lp_message, fixed lp_duration, int lp_durationType, bool lp_WaitUntilDone) {
    // Variable Declarations
    text lv_msg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_msg = StringToText("");

    // Implementation
    if ((lp_message == null)) {
        lv_msg = libEA0820A1_gf_TextOfSound(lp_sound);
    }
    else {
        lv_msg = lp_message;
    }
    TextTagCreate(lv_msg, 24, UnitGetPosition(lp_unit), 0.5, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libEA0820A1_gv__CB_TP_PLAYER = lp_player;
    libEA0820A1_gv__CB_TP_UNIT = lp_unit;
    libEA0820A1_gv__CB_TP_SOUNDLINK = lp_sound;
    libEA0820A1_gv__CB_TP_TEXT = lv_msg;
    libEA0820A1_gv__CB_TP_DURATION = lp_duration;
    libEA0820A1_gv__CB_TP_DURATIONTYPE = lp_durationType;
    libEA0820A1_gv__CB_TP_TEXTTAG = TextTagLastCreated();
    TriggerExecute(libEA0820A1_gt__CB_ShowChatBubbleOnUnit, true, lp_WaitUntilDone);
}

void libEA0820A1_gf_TurnChatBubbleOnOff (unit lp_unit, bool lp_onOff, int lp_player) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex <= 0)) {
        return ;
    }

    if ((lp_onOff == true)) {
        PlayerGroupAdd(libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lp_player);
    }
    else {
        PlayerGroupRemove(libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lp_player);
    }
}

text libEA0820A1_gf_TextOfSound (soundlink lp_soundLink) {
    // Variable Declarations
    string lv_sndGameLink;
    int lv_sndAssetID;
    string lv_strMsg;
    text lv_msg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strMsg = "";
    lv_msg = StringToText("");

    // Implementation
    lv_sndGameLink = SoundLinkId(lp_soundLink);
    lv_sndAssetID = SoundLinkAsset(lp_soundLink);
    if ((lv_sndAssetID < 0)) {
        lv_sndAssetID = 0;
    }

    lv_strMsg = CatalogFieldValueGet(c_gameCatalogSound, lv_sndGameLink, ("AssetArray[" + IntToString(lv_sndAssetID) + "].Subtitle"), 1);
    lv_msg = StringExternal(lv_strMsg);
    return lv_msg;
}

bool libEA0820A1_gf__CB_Line_IsValid (int lp_lineIndex) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_lineIndex <= 0) || (lp_lineIndex > libEA0820A1_gv__CBC_LINEMAX))) {
        return false;
    }

    if ((libEA0820A1_gv__CB_Line[lp_lineIndex] == null)) {
        return false;
    }

    return true;
}

int libEA0820A1_gf__CB_Line_Add (text lp_line, color lp_textColor, color lp_bGColor, string lp_animationStart, int lp_animationStartOption, string lp_animationEnd, int lp_animationEndOption, soundlink lp_sound, fixed lp_duration, int lp_durationType, bool lp_faceOption, trigger lp_triggerStart, trigger lp_triggerEnd) {
    // Variable Declarations
    int lv_lineIndex;
    int lv_lineIndexEnd;
    int lv_playerIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (true) {
        lv_lineIndex = 1;
    }
    else {
        lv_lineIndex = libEA0820A1_gv__CB_Line_Last;
        lv_lineIndexEnd = (libEA0820A1_gv__CB_Line_Last - 1);
        if ((lv_lineIndexEnd == 0)) {
            lv_lineIndexEnd = libEA0820A1_gv__CBC_LINEMAX;
        }

        while (true) {
            if ((libEA0820A1_gv__CB_Line[lv_lineIndex] == null)) {
                break;
            }

            if ((lv_lineIndex == lv_lineIndexEnd)) {
                return -1;
            }

            lv_lineIndex = (lv_lineIndex + 1);
            if ((lv_lineIndex > libEA0820A1_gv__CBC_LINEMAX)) {
                lv_lineIndex = 1;
            }

        }
    }
    if ((lp_line == null)) {
        libEA0820A1_gv__CB_Line[lv_lineIndex] = libEA0820A1_gf_TextOfSound(lp_sound);
    }
    else {
        libEA0820A1_gv__CB_Line[lv_lineIndex] = lp_line;
    }
    if ((libEA0820A1_gv__CB_Line[lv_lineIndex] == null)) {
        libEA0820A1_gv__CB_Line[lv_lineIndex] = StringToText("");
    }

    libEA0820A1_gv__CB_Line_TextColor[lv_lineIndex] = lp_textColor;
    libEA0820A1_gv__CB_Line_BGColor[lv_lineIndex] = lp_bGColor;
    libEA0820A1_gv__CB_Line_AnimationStart[lv_lineIndex] = lp_animationStart;
    libEA0820A1_gv__CB_Line_AnimationStartOptions[lv_lineIndex] = lp_animationStartOption;
    libEA0820A1_gv__CB_Line_AnimationEnd[lv_lineIndex] = lp_animationEnd;
    libEA0820A1_gv__CB_Line_AnimationEndOptions[lv_lineIndex] = lp_animationEndOption;
    libEA0820A1_gv__CB_Line_Sound[lv_lineIndex] = lp_sound;
    libEA0820A1_gv__CB_Line_Duration[lv_lineIndex] = lp_duration;
    libEA0820A1_gv__CB_Line_DurationType[lv_lineIndex] = lp_durationType;
    libEA0820A1_gv__CB_Line_FaceOption[lv_lineIndex] = lp_faceOption;
    libEA0820A1_gv__CB_Line_TriggerStart[lv_lineIndex] = lp_triggerStart;
    libEA0820A1_gv__CB_Line_TriggerEnd[lv_lineIndex] = lp_triggerEnd;
    return lv_lineIndex;
}

void libEA0820A1_gf__CB_Line_Remove (int lp_lineIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lineIndex <= 0)) {
        return ;
    }

    libEA0820A1_gv__CB_Line[lp_lineIndex] = null;
    libEA0820A1_gv__CB_Line_TriggerStart[lp_lineIndex] = null;
    libEA0820A1_gv__CB_Line_TriggerEnd[lp_lineIndex] = null;
}

int libEA0820A1_gf__CB_Unit_GetIndex (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoC038C7F7_ae = libEA0820A1_gv__CBC_UNITMAX;
    const int autoC038C7F7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoC038C7F7_ai >= 0 && lv_index <= autoC038C7F7_ae) || (autoC038C7F7_ai < 0 && lv_index >= autoC038C7F7_ae) ) ; lv_index += autoC038C7F7_ai ) {
        if ((libEA0820A1_gv__CB_Unit[lv_index] == lp_unit)) {
            return lv_index;
        }

    }
    return -1;
}

int libEA0820A1_gf__CB_Unit_GetLineEndIndex (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0))) {
        return -1;
    }

    return ((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex]) - 1);
}

int libEA0820A1_gf__CB_Unit_GetLineCurrentIndex (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0) || (libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] <= 0))) {
        return -1;
    }

    return ((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex]) - 1);
}

int libEA0820A1_gf__CB_Unit_Add (unit lp_unit) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int auto549B0885_ae = libEA0820A1_gv__CBC_UNITMAX;
    const int auto549B0885_ai = 1;
    const int auto40F4FA39_ae = libEA0820A1_gv__CBC_PLAYERMAX;
    const int auto40F4FA39_ai = 1;

    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    if ((lv_unitIndex > 0)) {
        return lv_unitIndex;
    }

    lv_unitIndex = 1;
    for ( ; ( (auto549B0885_ai >= 0 && lv_unitIndex <= auto549B0885_ae) || (auto549B0885_ai < 0 && lv_unitIndex >= auto549B0885_ae) ) ; lv_unitIndex += auto549B0885_ai ) {
        if ((libEA0820A1_gv__CB_Unit[lv_unitIndex] == null)) {
            libEA0820A1_gv__CB_Unit[lv_unitIndex] = lp_unit;
            libEA0820A1_gv__CB_Unit_OriginalFacing[lv_unitIndex] = UnitGetFacing(lp_unit);
            libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex] = PlayerGroupSingle(1);
            lv_playerIndex = 1;
            for ( ; ( (auto40F4FA39_ai >= 0 && lv_playerIndex <= auto40F4FA39_ae) || (auto40F4FA39_ai < 0 && lv_playerIndex >= auto40F4FA39_ae) ) ; lv_playerIndex += auto40F4FA39_ai ) {
                libEA0820A1_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex] = 12.0;
                libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lv_playerIndex] = -1;
                libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][lv_playerIndex] = 0;
                libEA0820A1_gv__CB_Unit_LineCurrent[lv_unitIndex][lv_playerIndex] = -1;
            }
            libEA0820A1_gv__CB_Unit_Count = (libEA0820A1_gv__CB_Unit_Count + 1);
            if ((libEA0820A1_gv__CB_Unit_Count > 0)) {
                TriggerEnable(libEA0820A1_gt__CB_ChatBubbleUnitDied, true);
            }

            return lv_unitIndex;
        }

    }
    return -1;
}

void libEA0820A1_gf__CB_Unit_Remove (unit lp_unit) {
    // Variable Declarations
    int lv_unitIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lp_unit);
    libEA0820A1_gf__CB_Unit_RemoveByIndex(lv_unitIndex);
}

void libEA0820A1_gf__CB_Unit_RemoveByIndex (int lp_unitIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unitIndex < 0)) {
        return ;
    }

    libEA0820A1_gv__CB_Unit[lp_unitIndex] = null;
    libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lp_unitIndex] = null;
    libEA0820A1_gv__CB_Unit_Count = (libEA0820A1_gv__CB_Unit_Count - 1);
    if ((libEA0820A1_gv__CB_Unit_Count <= 0)) {
        TriggerEnable(libEA0820A1_gt__CB_ChatBubbleUnitDied, false);
    }

}

void libEA0820A1_gf__CB_UnitLine_Add (int lp_unitIndex, int lp_playerIndex, int lp_lineIndex) {
    // Variable Declarations
    int lv_unitLineIndex;
    int lv_index_UnitLine;
    int lv_index_Player;
    int lv_index_Unit;

    // Automatic Variable Declarations
    int auto20BCED03_ae;
    const int auto20BCED03_ai = -1;
    const int auto3016FF75_ae = libEA0820A1_gv__CBC_UNITMAX;
    const int auto3016FF75_ai = 1;
    const int auto51155227_ae = libEA0820A1_gv__CBC_PLAYERMAX;
    const int auto51155227_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_unitIndex <= 0) || (lp_lineIndex <= 0) || (lp_playerIndex <= 0))) {
        return ;
    }

    if ((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0)) {
        libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] = (libEA0820A1_gv__CB_UnitLine_Count + 1);
        libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = 0;
        libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = -1;
        lv_unitLineIndex = libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex];
    }
    else {
        lv_unitLineIndex = (libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] + libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex]);
        auto20BCED03_ae = lv_unitLineIndex;
        lv_index_UnitLine = libEA0820A1_gv__CB_UnitLine_Count;
        for ( ; ( (auto20BCED03_ai >= 0 && lv_index_UnitLine <= auto20BCED03_ae) || (auto20BCED03_ai < 0 && lv_index_UnitLine >= auto20BCED03_ae) ) ; lv_index_UnitLine += auto20BCED03_ai ) {
            libEA0820A1_gv__CB_UnitLine[(lv_index_UnitLine + 1)] = libEA0820A1_gv__CB_UnitLine[lv_index_UnitLine];
        }
        lv_index_Unit = 1;
        for ( ; ( (auto3016FF75_ai >= 0 && lv_index_Unit <= auto3016FF75_ae) || (auto3016FF75_ai < 0 && lv_index_Unit >= auto3016FF75_ae) ) ; lv_index_Unit += auto3016FF75_ai ) {
            if ((libEA0820A1_gv__CB_Unit[lv_index_Unit] != null)) {
                lv_index_Player = 1;
                for ( ; ( (auto51155227_ai >= 0 && lv_index_Player <= auto51155227_ae) || (auto51155227_ai < 0 && lv_index_Player >= auto51155227_ae) ) ; lv_index_Player += auto51155227_ai ) {
                    if ((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] >= lv_unitLineIndex)) {
                        libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] = (libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] + 1);
                    }

                }
            }

        }
    }
    libEA0820A1_gv__CB_UnitLine[lv_unitLineIndex] = lp_lineIndex;
    libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = (libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] + 1);
    libEA0820A1_gv__CB_UnitLine_Count = (libEA0820A1_gv__CB_UnitLine_Count + 1);
    if ((libEA0820A1_gv__CB_UnitLine_Count > 0)) {
        TriggerEnable(libEA0820A1_gt__CB_ChatBubbleActivated, true);
    }

}

void libEA0820A1_gf__CB_UnitLine_RemoveUnit (int lp_unitIndex, int lp_playerIndex) {
    // Variable Declarations
    int lv_unitLineIndexAfter;
    int lv_lineCount;
    int lv_index_UnitLine;
    int lv_index_Player;
    int lv_index_Unit;

    // Automatic Variable Declarations
    int auto9ABFA683_ae;
    const int auto9ABFA683_ai = 1;
    const int auto0B986328_ae = libEA0820A1_gv__CBC_UNITMAX;
    const int auto0B986328_ai = 1;
    const int auto15AB04FE_ae = libEA0820A1_gv__CBC_PLAYERMAX;
    const int auto15AB04FE_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_unitIndex <= 0) || (lp_playerIndex <= 0))) {
        return ;
    }

    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] <= 0))) {
        return ;
    }

    lv_unitLineIndexAfter = (libEA0820A1_gf__CB_Unit_GetLineEndIndex(lp_unitIndex, lp_playerIndex) + 1);
    lv_lineCount = libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex];
    auto9ABFA683_ae = libEA0820A1_gv__CB_UnitLine_Count;
    lv_index_UnitLine = lv_unitLineIndexAfter;
    for ( ; ( (auto9ABFA683_ai >= 0 && lv_index_UnitLine <= auto9ABFA683_ae) || (auto9ABFA683_ai < 0 && lv_index_UnitLine >= auto9ABFA683_ae) ) ; lv_index_UnitLine += auto9ABFA683_ai ) {
        libEA0820A1_gv__CB_UnitLine[(lv_index_UnitLine - lv_lineCount)] = libEA0820A1_gv__CB_UnitLine[lv_index_UnitLine];
    }
    libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex] = 0;
    libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lp_unitIndex][lp_playerIndex] = -1;
    libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = -1;
    libEA0820A1_gv__CB_UnitLine_Count = (libEA0820A1_gv__CB_UnitLine_Count - lv_lineCount);
    lv_index_Unit = 1;
    for ( ; ( (auto0B986328_ai >= 0 && lv_index_Unit <= auto0B986328_ae) || (auto0B986328_ai < 0 && lv_index_Unit >= auto0B986328_ae) ) ; lv_index_Unit += auto0B986328_ai ) {
        if ((libEA0820A1_gv__CB_Unit[lv_index_Unit] != null)) {
            lv_index_Player = 1;
            for ( ; ( (auto15AB04FE_ai >= 0 && lv_index_Player <= auto15AB04FE_ae) || (auto15AB04FE_ai < 0 && lv_index_Player >= auto15AB04FE_ae) ) ; lv_index_Player += auto15AB04FE_ai ) {
                if ((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] >= lv_unitLineIndexAfter)) {
                    libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] = (libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_index_Unit][lv_index_Player] - lv_lineCount);
                }

            }
        }

    }
    if ((libEA0820A1_gv__CB_UnitLine_Count <= 0)) {
        TriggerEnable(libEA0820A1_gt__CB_ChatBubbleActivated, false);
    }

}

void libEA0820A1_gf__CB_Current_Create (int lp_unitIndex, int lp_playerIndex, unit lp_target) {
    // Variable Declarations
    int lv_lineIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] <= 0)) {
        libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = 1;
    }
    else {
        libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = (libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] + 1);
    }
    if ((libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] > libEA0820A1_gv__CB_Unit_LineCount[lp_unitIndex][lp_playerIndex])) {
        libEA0820A1_gv__CB_Unit_LineCurrent[lp_unitIndex][lp_playerIndex] = 1;
    }

    lv_lineIndex = libEA0820A1_gv__CB_UnitLine[libEA0820A1_gf__CB_Unit_GetLineCurrentIndex(lp_unitIndex, lp_playerIndex)];
    libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex] = lp_unitIndex;
    libEA0820A1_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] = lp_target;
    libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex] = lv_lineIndex;
    TextTagCreate(libEA0820A1_gv__CB_Line[lv_lineIndex], 24, UnitGetPosition(libEA0820A1_gv__CB_Unit[lp_unitIndex]), 0.5, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex] = TextTagLastCreated();
    TextTagAttachToUnit(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], libEA0820A1_gv__CB_Unit[lp_unitIndex], 2.5);
    TextTagSetAlignment(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], c_alignCenter, c_alignBottom);
    TextTagSetMaxSize(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], 25.0, 40.0);
    TextTagSetColor(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagColorText, libEA0820A1_gv__CB_Line_TextColor[lv_lineIndex]);
    TextTagSetTextShadow(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], false);
    TextTagSetTime(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagTimeDuration, 360000.0);
    TextTagShowBackground(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], true);
    TextTagSetBackgroundBorderSize(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], 1.0, 1.0);
    TextTagSetColor(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], c_textTagColorBackground, libEA0820A1_gv__CB_Line_BGColor[lv_lineIndex]);
    if ((libEA0820A1_gv__CB_Line_FaceLocation[lv_lineIndex] == null)) {
        if (((libEA0820A1_gv__CB_Line_FaceOption[lv_lineIndex] == true) && (libEA0820A1_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] != null))) {
            libNtve_gf_MakeUnitFacePoint(libEA0820A1_gv__CB_Unit[lp_unitIndex], UnitGetPosition(libEA0820A1_gv__CB_Current_ChatBubbleTarget[lp_playerIndex]), 0.5);
        }

    }
    else {
        libNtve_gf_MakeUnitFacePoint(libEA0820A1_gv__CB_Unit[lp_unitIndex], libEA0820A1_gv__CB_Line_FaceLocation[lv_lineIndex], 0.5);
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libEA0820A1_gv__CB_Unit[lp_unitIndex]), c_animNameDefault, libEA0820A1_gv__CB_Line_AnimationStart[lv_lineIndex], libEA0820A1_gv__CB_Line_AnimationStartOptions[lv_lineIndex], c_animTimeDefault);
    if ((libEA0820A1_gv__CB_Line_TriggerStart[lv_lineIndex] != null)) {
        TriggerExecute(libEA0820A1_gv__CB_Line_TriggerStart[lv_lineIndex], true, false);
    }

    TextTagShow(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex], PlayerGroupSingle(lp_playerIndex), true);
    if ((libEA0820A1_gv__CB_Line_Sound[lv_lineIndex] != null)) {
        SoundPlayOnUnit(libEA0820A1_gv__CB_Line_Sound[lv_lineIndex], PlayerGroupSingle(lp_playerIndex), libEA0820A1_gv__CB_Unit[lp_unitIndex], 0.0, 100.0, 0.0);
        libEA0820A1_gv__CB_Current_Sound[lp_playerIndex] = SoundLastPlayed();
    }

}

void libEA0820A1_gf__CB_Current_Remove (int lp_playerIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex] > 0)) {
        if ((libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex] > 0)) {
            if (((libEA0820A1_gv__CB_Line_FaceLocation[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]] != null) || (libEA0820A1_gv__CB_Line_FaceOption[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]] == true))) {
                UnitSetFacing(libEA0820A1_gv__CB_Unit[libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex]], libEA0820A1_gv__CB_Unit_OriginalFacing[libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex]], 0.5);
            }

            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libEA0820A1_gv__CB_Unit[libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex]]), c_animNameDefault, libEA0820A1_gv__CB_Line_AnimationEnd[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]], libEA0820A1_gv__CB_Line_AnimationEndOptions[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]], c_animTimeDefault);
        }

    }

    if ((libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex] > 0)) {
        if ((libEA0820A1_gv__CB_Line_TriggerEnd[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]] != null)) {
            TriggerExecute(libEA0820A1_gv__CB_Line_TriggerEnd[libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex]], true, false);
        }

    }

    if ((libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex] != c_textTagNone)) {
        TextTagDestroy(libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex]);
        libEA0820A1_gv__CB_Current_ChatBubble[lp_playerIndex] = c_textTagNone;
    }

    if ((libEA0820A1_gv__CB_Current_Sound[lp_playerIndex] != null)) {
        SoundStop(libEA0820A1_gv__CB_Current_Sound[lp_playerIndex], true);
        libEA0820A1_gv__CB_Current_Sound[lp_playerIndex] = null;
    }

    libEA0820A1_gv__CB_Current_UnitIndex[lp_playerIndex] = -1;
    libEA0820A1_gv__CB_Current_ChatBubbleTarget[lp_playerIndex] = null;
    libEA0820A1_gv__CB_Current_LineIndex[lp_playerIndex] = -1;
}

int libEA0820A1_gf__CB_LastWaitSound () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv__CB_WaitSoundID;
}

void libEA0820A1_gf__CB_StarWaitingSound (sound lp_sound, fixed lp_duration, int lp_durationType) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv__CB_WaitSoundID += 1;
    if ((libEA0820A1_gv__CB_WaitSoundID > libEA0820A1_gv__CBC_WAITSOUNDCOUNTMAX)) {
        libEA0820A1_gv__CB_WaitSoundID = 1;
    }

    libEA0820A1_gv__CB_WaitSoundDone[libEA0820A1_gv__CB_WaitSoundID] = false;
    libEA0820A1_gv__CB_TP_WAITSOUND = lp_sound;
    libEA0820A1_gv__CB_TP_WAITSOUND_DURATION = lp_duration;
    libEA0820A1_gv__CB_TP_WAITSOUND_DURATIONTYPE = lp_durationType;
    libEA0820A1_gv__CB_TP_WAITSOUND_ID = libEA0820A1_gv__CB_WaitSoundID;
    TriggerExecute(libEA0820A1_gt__CB_WaitForSound, true, false);
}

fixed libEA0820A1_gf_GD_Gap (int lp_hV) {
    // Automatic Variable Declarations
    int auto3FA83C2E_val;

    // Implementation
    auto3FA83C2E_val = lp_hV;
    if (auto3FA83C2E_val == libEA0820A1_ge_GRIDDLG_HV_Horizontal) {
        return libEA0820A1_gv_gRIDDLG_GRIDGAP_X;
    }
    else if (auto3FA83C2E_val == libEA0820A1_ge_GRIDDLG_HV_Vertical) {
        return libEA0820A1_gv_gRIDDLG_GRIDGAP_Y;
    }
    else {
    }
    return 0.0;
}

fixed libEA0820A1_gf_GD_GridToReal (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_ret;
    fixed lv_gap;
    fixed lv_sign;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libEA0820A1_gf_GD_Gap(lp_hV);
    if ((lp_grid >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = (AbsF(lp_grid) * libEA0820A1_gv_gRIDDLG_GRID);
    if ((lp_sizeOrPos == libEA0820A1_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret = MaxF((lv_ret - lv_gap), 0.0);
    }

    return (lv_ret * lv_sign);
}

int libEA0820A1_gf_GD_GridToInteger (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(libEA0820A1_gf_GD_GridToReal(lp_grid, lp_hV, lp_sizeOrPos));
}

fixed libEA0820A1_gf_GD_RealToGrid (fixed lp_value, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_sign;
    fixed lv_grid;
    fixed lv_gap;
    fixed lv_ret;
    int lv_gapCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gap = libEA0820A1_gf_GD_Gap(lp_hV);
    if ((lp_value >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = AbsF(lp_value);
    if ((lp_sizeOrPos == libEA0820A1_ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret += lv_gap;
    }

    lv_ret /= libEA0820A1_gv_gRIDDLG_GRID;
    return (lv_sign * lv_ret);
}

fixed libEA0820A1_gf_GD_IntegerToGrid (int lp_value, int lp_hV, int lp_sizeOrPos) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_RealToGrid(IntToFixed(lp_value), lp_hV, lp_sizeOrPos);
}

fixed libEA0820A1_gf_DialogWidthInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogGetWidth(lp_dialog), libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
}

fixed libEA0820A1_gf_DialogHeightInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogGetHeight(lp_dialog), libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
}

fixed libEA0820A1_gf_DialogOffsetXInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogGetOffsetX(lp_dialog), libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
}

fixed libEA0820A1_gf_DialogOffsetYInGrid (int lp_dialog) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogGetOffsetY(lp_dialog), libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
}

fixed libEA0820A1_gf_DialogItemWidthInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogControlGetWidth(lp_dialogItem, lp_player), libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
}

fixed libEA0820A1_gf_DialogItemHeightInGrid (int lp_dialogItem, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_GD_IntegerToGrid(DialogControlGetHeight(lp_dialogItem, lp_player), libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
}

fixed libEA0820A1_gf_DialogItemOffsetXInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_x;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_x = IntToFixed(DialogControlGetOffsetX(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorLeft) || (lv_anchor == c_anchorRight))) {
            lv_x -= libEA0820A1_gv_gRIDDLG_MARGINE_X;
        }
    }

    return libEA0820A1_gf_GD_RealToGrid(lv_x, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
}

fixed libEA0820A1_gf_DialogItemOffsetYInGrid (int lp_dialogItem, int lp_player) {
    // Variable Declarations
    fixed lv_y;
    int lv_anchor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_anchor = c_anchorBottomLeft;

    // Implementation
    lv_y = IntToFixed(DialogControlGetOffsetY(lp_dialogItem, lp_player));
    if ((DialogControlGetRelativeControl(lp_dialogItem, lp_player) == c_invalidDialogControlId)) {
        lv_anchor = DialogControlGetAnchor(lp_dialogItem, lp_player);
        if (((lv_anchor == c_anchorTopLeft) || (lv_anchor == c_anchorTopRight) || (lv_anchor == c_anchorBottomLeft) || (lv_anchor == c_anchorBottomRight) || (lv_anchor == c_anchorTop) || (lv_anchor == c_anchorBottom))) {
            lv_y -= libEA0820A1_gv_gRIDDLG_MARGINE_Y;
        }
    }

    return libEA0820A1_gf_GD_RealToGrid(lv_y, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
}

void libEA0820A1_gf_CreateDialogInGrid (fixed lp_width, fixed lp_height, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, bool lp_modal) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libEA0820A1_gf_GD_GridToReal(lp_width, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libEA0820A1_gv_gRIDDLG_MARGINE_X);
    lv_h = libEA0820A1_gf_GD_GridToReal(lp_height, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libEA0820A1_gv_gRIDDLG_MARGINE_Y);
    lv_x = libEA0820A1_gf_GD_GridToInteger(lp_offsetX, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libEA0820A1_gf_GD_GridToInteger(lp_offsetY, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    DialogCreate(FixedToInt(lv_w), FixedToInt(lv_h), lp_anchor, lv_x, lv_y, lp_modal);
}

void libEA0820A1_gf_MoveDialogInGrid (int lp_dialog, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libEA0820A1_gf_GD_GridToInteger(lp_offsetX, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libEA0820A1_gf_GD_GridToInteger(lp_offsetY, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPosition(lp_dialog, lp_anchor, lv_x, lv_y);
}

void libEA0820A1_gf_MoveDialogInGridRelative (int lp_dialog, int lp_anchor, int lp_relativeDialog, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libEA0820A1_gf_GD_GridToInteger(lp_offsetX, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    lv_y = libEA0820A1_gf_GD_GridToInteger(lp_offsetY, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_NoneClient);
    DialogSetPositionRelative(lp_dialog, lp_anchor, lp_relativeDialog, lp_relativeAnchor, lv_x, lv_y);
}

void libEA0820A1_gf_SetDialogSizeInGrid (int lp_dialog, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    fixed lv_w;
    fixed lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libEA0820A1_gf_GD_GridToReal(lp_width, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    lv_w += (2.0 * libEA0820A1_gv_gRIDDLG_MARGINE_X);
    lv_h = libEA0820A1_gf_GD_GridToReal(lp_height, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    lv_h += (2.0 * libEA0820A1_gv_gRIDDLG_MARGINE_Y);
    DialogSetSize(lp_dialog, FixedToInt(lv_w), FixedToInt(lv_h));
}

void libEA0820A1_gf_CreateDialogItemInGrid (int lp_dialog, int lp_type, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY, fixed lp_width, fixed lp_height, text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(lp_dialog, lp_type);
    libEA0820A1_gf_SetDialogItemSizeInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_width, lp_height);
    libEA0820A1_gf_MoveDialogItemInGrid(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_label, PlayerGroupAll());
}

void libEA0820A1_gf_MoveDialogItemInGrid (int lp_dialogItem, playergroup lp_players, int lp_anchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libEA0820A1_gf_GD_GridToReal(lp_offsetX, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libEA0820A1_gf_GD_GridToReal(lp_offsetY, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
    if (((lp_anchor == c_anchorTopLeft) || (lp_anchor == c_anchorTopRight) || (lp_anchor == c_anchorBottomLeft) || (lp_anchor == c_anchorBottomRight))) {
        lv_x += libEA0820A1_gv_gRIDDLG_MARGINE_X;
        lv_y += libEA0820A1_gv_gRIDDLG_MARGINE_Y;
    }
    else if (((lp_anchor == c_anchorLeft) || (lp_anchor == c_anchorRight))) {
        lv_x += libEA0820A1_gv_gRIDDLG_MARGINE_X;
    }
    else if (((lp_anchor == c_anchorTop) || (lp_anchor == c_anchorBottom))) {
        lv_y += libEA0820A1_gv_gRIDDLG_MARGINE_Y;
    }
    DialogControlSetPosition(lp_dialogItem, PlayerGroupAll(), lp_anchor, FixedToInt(lv_x), FixedToInt(lv_y));
}

void libEA0820A1_gf_MoveDialogItemInGridRelative (int lp_item, playergroup lp_players, int lp_anchor, int lp_relativeItem, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = libEA0820A1_gf_GD_GridToReal(lp_offsetX, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
    lv_y = libEA0820A1_gf_GD_GridToReal(lp_offsetY, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientPosition);
    DialogControlSetPositionRelative(lp_item, PlayerGroupAll(), lp_anchor, lp_relativeItem, lp_relativeAnchor, FixedToInt(lp_offsetX), FixedToInt(lp_offsetY));
}

void libEA0820A1_gf_SetDialogItemSizeInGrid (int lp_dialogItem, playergroup lp_players, fixed lp_width, fixed lp_height) {
    // Variable Declarations
    int lv_w;
    int lv_h;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_w = libEA0820A1_gf_GD_GridToInteger(lp_width, libEA0820A1_ge_GRIDDLG_HV_Horizontal, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    lv_h = libEA0820A1_gf_GD_GridToInteger(lp_height, libEA0820A1_ge_GRIDDLG_HV_Vertical, libEA0820A1_ge_GRIDDLG_HV2_ClientSize);
    DialogControlSetSize(lp_dialogItem, PlayerGroupAll(), lv_w, lv_h);
}

void libEA0820A1_gf_DisplayMessageDialog (text lp_title, string lp_titleStyle, text lp_body1, string lp_bodyStyle1, text lp_body2, string lp_bodyStyle2, int lp_width, int lp_height, text lp_buttonText) {
    // Variable Declarations
    int lv_titleItem;
    int lv_textWidth;
    int lv_bodyItem1;
    int lv_bodyItem2;
    const int lv_buttonHeight = 55;
    const int lv_titleHeight = 60;
    int lv_bodyHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_titleItem = c_invalidDialogControlId;
    lv_textWidth = (lp_width - 80);
    lv_bodyItem1 = c_invalidDialogControlId;
    lv_bodyItem2 = c_invalidDialogControlId;
    lv_bodyHeight = lp_height;

    // Implementation
    DialogCreate(lp_width, lp_height, c_anchorCenter, 0, 0, true);
    libEA0820A1_gv__MsgDlg = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(6.27, 14.51, 24.71), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_width - 10), (lp_height - 10));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libEA0820A1_gv__MsgDlgButton = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 180, lv_buttonHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_buttonText, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_titleItem = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_titleHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_title, PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem1 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body1, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_titleItem, c_anchorBottom, 0, 5);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lv_bodyItem2 = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_textWidth, lv_bodyHeight);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_body2, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, libEA0820A1_gv__MsgDlgButton, c_anchorTop, 0, -15);
    libEA0820A1_gv__MsgDlgOpened = true;
    TriggerEnable(libEA0820A1_gt__MsgDlgButtonClicked, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    while (!((libEA0820A1_gv__MsgDlgOpened == false))) {
        Wait(0.3, c_timeReal);
    }
}

text libEA0820A1_gf_FormatTimeCampaign (int lp_second) {
    // Variable Declarations
    int lv_h;
    int lv_m;
    int lv_s;
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = StringToText("");

    // Implementation
    lv_h = (lp_second / 3600);
    lv_m = ModI((lp_second / 60), 60);
    lv_s = ModI(lp_second, 60);
    lv_result = IntToText(lv_s);
    if ((lv_s < 10)) {
        lv_result = (StringExternal("Param/Value/lib_EA0820A1_CA8FA0C6") + lv_result);
    }

    lv_result = (IntToText(lv_m) + StringExternal("Param/Value/lib_EA0820A1_A93D02C0") + lv_result);
    if ((lv_m < 10) && (lv_h > 0)) {
        lv_result = (StringExternal("Param/Value/lib_EA0820A1_6A628A86") + lv_result);
    }

    if ((lv_h > 0)) {
        lv_result = (IntToText(lv_h) + StringExternal("Param/Value/lib_EA0820A1_88828615") + lv_result);
        if ((lv_h < 10)) {
            lv_result = (StringExternal("Param/Value/lib_EA0820A1_3709CAC6") + lv_result);
        }

    }

    return lv_result;
}

void libEA0820A1_gf_ZS_DisplayCampaignTrialDialog (bool lp_showBackground) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    if ((libEA0820A1_gv_zS_CampaignTrialEndDialog == c_invalidDialogId)) {
        DialogCreate(1000, 600, c_anchorCenter, 0, 0, true);
        libEA0820A1_gv_zS_CampaignTrialEndDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetFullscreen(DialogLastCreated(), true);
        libEA0820A1_gv_zS_CampaignTrialEndPanel = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libEA0820A1_gv_zS_CampaignTrialEndUpgradeButton = DialogControlLastCreated();
        libEA0820A1_gv_zS_CampaignTrialEndQuitButton = DialogControlLastCreated();
    }

    DialogSetVisible(libEA0820A1_gv_zS_CampaignTrialEndDialog, PlayerGroupAll(), true);
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked, true);
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked, true);
}

void libEA0820A1_gf_ZS_CloseCampaignTrialDialog () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked, false);
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked, false);
    if ((libEA0820A1_gv_zS_CampaignTrialEndDialog != c_invalidDialogId)) {
        DialogSetVisible(libEA0820A1_gv_zS_CampaignTrialEndDialog, PlayerGroupAll(), false);
    }

}

bool libEA0820A1_gf_ZS_TrialEnd () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerHasLicense(1, c_playerLicenseLibertyFull) == false)) {
        return true;
    }

    return false;
}

void libEA0820A1_gf_TS_InitializeMapAchievementDataSingle (int lp_map, string lp_achievement1, string lp_achievement2, string lp_achievement3, string lp_achievement4) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_MapAchievements[(lp_map)][1] = lp_achievement1;
    libEA0820A1_gv_tS_MapAchievements[(lp_map)][2] = lp_achievement2;
    libEA0820A1_gv_tS_MapAchievements[(lp_map)][3] = lp_achievement3;
    libEA0820A1_gv_tS_MapAchievements[(lp_map)][4] = lp_achievement4;
}

void libEA0820A1_gf_TS_InitializeMapAchievementData () {
    // Variable Declarations
    string lv_defaultAchievement;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTStory01, "TStory01_9", "TStory01_10", "TStory01_10", "TStory01_11");
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTArcade, "TStory01_13", "LostVikingBronze", "LostVikingGold", "LostVikingSilver");
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTRaynor01, "TRaynor01_1", "TRaynor01_2", "TRaynor01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTRaynor02, "TRaynor02_1", "TRaynor02_2", "TRaynor02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTRaynor03, "TRaynor03_1", "TRaynor03_2", "TRaynor03_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHanson01, "THanson01_1", "THanson01_2", "THanson01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHanson02, "THanson02_1", "THanson02_2", "THanson02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHanson03A, "THanson03A_1", "THanson03A_2", "THanson03A_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHanson03B, "THanson03B_1", "THanson03B_2", "THanson03B_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHorner01, "THorner01_1", "THorner01_2", "THorner01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHorner02, "THorner02_1", "THorner02_2", "THorner02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHorner03, "THorner03_1", "THorner03_2", "THorner03_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHorner04, "THorner04_1", "THorner04_2", "THorner04_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTHorner05S, "THorner05_1", "THorner05_3", "THorner05_2", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTosh01, "TTosh01_1", "TTosh01_2", "TTosh01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTosh02, "TTosh02_1", "TTosh02_2", "TTosh02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTosh03A, "TTosh03A_1", "TTosh03A_2", "TTosh03A_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTosh03B, "TTosh03B_1", "TTosh03B_2", "TTosh03B_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTychus01, "TTychus01_1", "TTychus01_2", "TTychus01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTychus02, "TTychus02_1", "TTychus02_2", "TTychus02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTychus03, "TTychus03_1", "TTychus03_2", "TTychus03_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTychus04, "TTychus04_1", "TTychus04_2", "TTychus04_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTTychus05, "TTychus05_1", "TTychus05_2", "TTychus05_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTValerian01, "TValerian01_1", "TValerian01_2", "TValerian01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTValerian02A, "TValerian02A_1", "TValerian02A_2", "TValerian02A_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTValerian02B, "TValerian02B_1", "TValerian02B_2", "TValerian02B_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTValerian03, "TValerian03_1", "TValerian03_2", "TValerian03_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTZeratul01, "TZeratul01_1", "TZeratul01_2", "TZeratul01_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTZeratul02, "TZeratul02_1", "TZeratul02_2", "TZeratul02_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTZeratul03, "TZeratul03_1", "TZeratul03_2", "TZeratul03_3", null);
    libEA0820A1_gf_TS_InitializeMapAchievementDataSingle(libEA0820A1_ge_MapID_MapTZeratul04, "TZeratul04_1", "TZeratul04_2", "TZeratul04_3", null);
    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapNone)) {
        return ;
    }

    lv_defaultAchievement = libEA0820A1_gv_tS_MapAchievements[(libEA0820A1_gv_tS_CurrentMap)][1];
    if ((lv_defaultAchievement != null)) {
        AchievementPanelSetCategory(PlayerGroupAll(), lv_defaultAchievement);
    }

}

int libEA0820A1_gf_TS_CampaignMissionShortestTime () {
    // Variable Declarations
    int lv_indexMission;
    int lv_time;
    int lv_timeSingle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    if (true) {
        return 0;
    }

    return lv_time;
}

int libEA0820A1_gf_TS_MissionCompletionCountOnDifficulty (int lp_difficulty) {
    // Variable Declarations
    int lv_indexMission;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    return lv_count;
}

int libEA0820A1_gf_TS_MissionDifficultyComparison (int lp_difficulty1, int lp_difficulty2) {
    // Variable Declarations
    int lv_value1;
    int lv_value2;

    // Automatic Variable Declarations
    int auto7B41D235_val;
    int autoECC41D1C_val;

    // Variable Initialization

    // Implementation
    auto7B41D235_val = lp_difficulty1;
    if (auto7B41D235_val == 1) {
        lv_value1 = 1;
    }
    else if (auto7B41D235_val == 2) {
        lv_value1 = 2;
    }
    else if (auto7B41D235_val == 3) {
        lv_value1 = 3;
    }
    else if (auto7B41D235_val == 4) {
        lv_value1 = 4;
    }
    else {
        lv_value1 = 0;
    }
    autoECC41D1C_val = lp_difficulty2;
    if (autoECC41D1C_val == 1) {
        lv_value2 = 1;
    }
    else if (autoECC41D1C_val == 2) {
        lv_value2 = 2;
    }
    else if (autoECC41D1C_val == 3) {
        lv_value2 = 3;
    }
    else if (autoECC41D1C_val == 4) {
        lv_value2 = 4;
    }
    else {
        lv_value2 = 0;
    }
    if ((lv_value1 > lv_value2)) {
        return 1;
    }

    if ((lv_value1 < lv_value2)) {
        return -1;
    }

    return 0;
}

void libEA0820A1_gf_TS_CheckAchievementUnlocking () {
    // Variable Declarations
    int lv_indexMission;
    bool lv_unlock;
    int lv_count;
    int lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    if (true) {
        AchievementAward(1, "WingsofLiberty");
    }

    lv_count = libEA0820A1_gf_TS_MissionCompletionCountOnDifficulty(2);
    lv_count = libEA0820A1_gf_TS_MissionCompletionCountOnDifficulty(3);
    AchievementTermQuantitySet(1, "WingsofLibertyHard5", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard10", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard15", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard20", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyHard25", lv_count);
    lv_count = libEA0820A1_gf_TS_MissionCompletionCountOnDifficulty(4);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal5", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal10", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal15", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal20", lv_count);
    AchievementTermQuantitySet(1, "WingsofLibertyBrutal25", lv_count);
    if (true) {
        AchievementAward(1, "MarSaraMissions");
    }

    if ((true)) {
        AchievementAward(1, "DrArielHansonMissions");
    }

    if ((true)) {
        AchievementAward(1, "GabrielToshMissions");
    }

    if (true) {
        AchievementAward(1, "MattHornerMissions");
    }

    if (true) {
        AchievementAward(1, "ZeratulMissions");
    }

    lv_time = libEA0820A1_gf_TS_CampaignMissionShortestTime();
    if ((lv_time > 0) && (lv_time <= (8 * 3600))) {
        AchievementAward(1, "HurryUpItsRaidNight");
    }

    if (true) {
        AchievementTermQuantitySet(1, "TheArtifact", 1);
    }

    if (true) {
        AchievementTermQuantitySet(1, "TheArtifact", 2);
    }

    if (true) {
        AchievementTermQuantitySet(1, "TheArtifact", 3);
    }

    if (true) {
        AchievementTermQuantitySet(1, "TheArtifact", 4);
    }

    if (true) {
        AchievementTermQuantitySet(1, "TheArtifact", 5);
    }

    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTRaynor01, "LibertyCompletionistNormal_01", "LibertyCompletionistHard_01", "LibertyCompletionistBrutal_01");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTRaynor02, "LibertyCompletionistNormal_02", "LibertyCompletionistHard_02", "LibertyCompletionistBrutal_02");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTRaynor03, "LibertyCompletionistNormal_03", "LibertyCompletionistHard_03", "LibertyCompletionistBrutal_03");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHanson01, "LibertyCompletionistNormal_04", "LibertyCompletionistHard_04", "LibertyCompletionistBrutal_04");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHanson02, "LibertyCompletionistNormal_05", "LibertyCompletionistHard_05", "LibertyCompletionistBrutal_05");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHanson03A, "LibertyCompletionistNormal_06", "LibertyCompletionistHard_06", "LibertyCompletionistBrutal_06");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHanson03B, "LibertyCompletionistNormal_07", "LibertyCompletionistHard_07", "LibertyCompletionistBrutal_07");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHorner01, "LibertyCompletionistNormal_12", "LibertyCompletionistHard_12", "LibertyCompletionistBrutal_12");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHorner02, "LibertyCompletionistNormal_13", "LibertyCompletionistHard_13", "LibertyCompletionistBrutal_13");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHorner03, "LibertyCompletionistNormal_14", "LibertyCompletionistHard_14", "LibertyCompletionistBrutal_14");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHorner04, "LibertyCompletionistNormal_15", "LibertyCompletionistHard_15", "LibertyCompletionistBrutal_15");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTHorner05S, "LibertyCompletionistNormal_16", "LibertyCompletionistHard_16", "LibertyCompletionistBrutal_16");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTosh01, "LibertyCompletionistNormal_08", "LibertyCompletionistHard_08", "LibertyCompletionistBrutal_08");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTosh02, "LibertyCompletionistNormal_09", "LibertyCompletionistHard_09", "LibertyCompletionistBrutal_09");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTosh03A, "LibertyCompletionistNormal_10", "LibertyCompletionistHard_10", "LibertyCompletionistBrutal_10");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTosh03B, "LibertyCompletionistNormal_11", "LibertyCompletionistHard_11", "LibertyCompletionistBrutal_11");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTychus01, "LibertyCompletionistNormal_21", "LibertyCompletionistHard_21", "LibertyCompletionistBrutal_21");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTychus02, "LibertyCompletionistNormal_22", "LibertyCompletionistHard_22", "LibertyCompletionistBrutal_22");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTychus03, "LibertyCompletionistNormal_23", "LibertyCompletionistHard_23", "LibertyCompletionistBrutal_23");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTychus04, "LibertyCompletionistNormal_24", "LibertyCompletionistHard_24", "LibertyCompletionistBrutal_24");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTTychus05, "LibertyCompletionistNormal_25", "LibertyCompletionistHard_25", "LibertyCompletionistBrutal_25");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTValerian01, "LibertyCompletionistNormal_26", "LibertyCompletionistHard_26", "LibertyCompletionistBrutal_26");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTValerian02A, "LibertyCompletionistNormal_27", "LibertyCompletionistHard_27", "LibertyCompletionistBrutal_27");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTValerian02B, "LibertyCompletionistNormal_28", "LibertyCompletionistHard_28", "LibertyCompletionistBrutal_28");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTValerian03, "LibertyCompletionistNormal_29", "LibertyCompletionistHard_29", "LibertyCompletionistBrutal_29");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTZeratul01, "LibertyCompletionistNormal_17", "LibertyCompletionistHard_17", "LibertyCompletionistBrutal_17");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTZeratul02, "LibertyCompletionistNormal_18", "LibertyCompletionistHard_18", "LibertyCompletionistBrutal_18");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTZeratul03, "LibertyCompletionistNormal_19", "LibertyCompletionistHard_19", "LibertyCompletionistBrutal_19");
    libEA0820A1_gf_TS_CompletionistCheck(libEA0820A1_ge_MapID_MapTZeratul04, "LibertyCompletionistNormal_20", "LibertyCompletionistHard_20", "LibertyCompletionistBrutal_20");
}

void libEA0820A1_gf_TS_CompletionistCheck (int lp_map, string lp_normal, string lp_hard, string lp_brutal) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gv_tS_CurrentMap == lp_map)) {
        if ((libNtve_gf_DifficultyValueInt(0, 1, 1, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_normal, 1);
        }

        if ((libNtve_gf_DifficultyValueInt(0, 0, 1, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_hard, 1);
        }

        if ((libNtve_gf_DifficultyValueInt(0, 0, 0, 1) == 1)) {
            AchievementTermQuantitySet(1, lp_brutal, 1);
        }

    }

}

void libEA0820A1_gf_TS_UpdateCharacterSheepPanel () {
    // Variable Declarations
    int lv_index;
    int lv_indexTech;
    int lv_indexMerc;
    int lv_indexResearch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    CharacterSheetPanelSetNameText(PlayerGroupAll(), StringExternal("Param/Value/lib_EA0820A1_C21C1F09"));
}

void libEA0820A1_gf_TS_AddRecentTech (int lp_tech) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto07E7BDEF_ae = libEA0820A1_gv_tS_RecentTechMax;
    const int auto07E7BDEF_ai = 1;
    const int autoB5459782_ae = libEA0820A1_gv_tS_RecentTechMax;
    const int autoB5459782_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto07E7BDEF_ai >= 0 && lv_index <= auto07E7BDEF_ae) || (auto07E7BDEF_ai < 0 && lv_index >= auto07E7BDEF_ae) ) ; lv_index += auto07E7BDEF_ai ) {
        if (true) {
            libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (autoB5459782_ai >= 0 && lv_index <= autoB5459782_ae) || (autoB5459782_ai < 0 && lv_index >= autoB5459782_ae) ) ; lv_index += autoB5459782_ai ) {
        libEA0820A1_gv_tSX_RecentTech[(lv_index - 1)] = libEA0820A1_gv_tSX_RecentTech[lv_index];
    }
    libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
}

void libEA0820A1_gf_TS_AddRecentMerc (int lp_merc) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto293CA442_ae = libEA0820A1_gv_tS_RecentMercMax;
    const int auto293CA442_ai = 1;
    const int auto1E5A2F63_ae = libEA0820A1_gv_tS_RecentMercMax;
    const int auto1E5A2F63_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto293CA442_ai >= 0 && lv_index <= auto293CA442_ae) || (auto293CA442_ai < 0 && lv_index >= auto293CA442_ae) ) ; lv_index += auto293CA442_ai ) {
        if ((libEA0820A1_gv_tSX_RecentMerc[lv_index] == libEA0820A1_ge_StoryMercID_MercNone)) {
            libEA0820A1_gv_tSX_RecentMerc[lv_index] = lp_merc;
            libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (auto1E5A2F63_ai >= 0 && lv_index <= auto1E5A2F63_ae) || (auto1E5A2F63_ai < 0 && lv_index >= auto1E5A2F63_ae) ) ; lv_index += auto1E5A2F63_ai ) {
        libEA0820A1_gv_tSX_RecentMerc[(lv_index - 1)] = libEA0820A1_gv_tSX_RecentMerc[lv_index];
    }
    libEA0820A1_gv_tSX_RecentMerc[libEA0820A1_gv_tS_RecentMercMax] = lp_merc;
    libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
}

void libEA0820A1_gf_TS_AddRecentResearch (int lp_research) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto656E30EE_ae = libEA0820A1_gv_tS_RecentResearchMax;
    const int auto656E30EE_ai = 1;
    const int auto4D5EBD30_ae = libEA0820A1_gv_tS_RecentResearchMax;
    const int auto4D5EBD30_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto656E30EE_ai >= 0 && lv_index <= auto656E30EE_ae) || (auto656E30EE_ai < 0 && lv_index >= auto656E30EE_ae) ) ; lv_index += auto656E30EE_ai ) {
        if (true) {
            libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
            return ;
        }

    }
    lv_index = 2;
    for ( ; ( (auto4D5EBD30_ai >= 0 && lv_index <= auto4D5EBD30_ae) || (auto4D5EBD30_ai < 0 && lv_index >= auto4D5EBD30_ae) ) ; lv_index += auto4D5EBD30_ai ) {
        libEA0820A1_gv_tSX_RecentResearch[(lv_index - 1)] = libEA0820A1_gv_tSX_RecentResearch[lv_index];
    }
    libEA0820A1_gf_TS_UpdateCharacterSheepPanel();
}

void libEA0820A1_gf_TS_ResetRecentlyPurchasedData () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto437AE195_ae = libEA0820A1_gv_tS_RecentTechMax;
    const int auto437AE195_ai = 1;
    const int autoA30DB8C2_ae = libEA0820A1_gv_tS_RecentMercMax;
    const int autoA30DB8C2_ai = 1;
    const int auto38875B2F_ae = libEA0820A1_gv_tS_RecentResearchMax;
    const int auto38875B2F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto437AE195_ai >= 0 && lv_index <= auto437AE195_ae) || (auto437AE195_ai < 0 && lv_index >= auto437AE195_ae) ) ; lv_index += auto437AE195_ai ) {
    }
    lv_index = 1;
    for ( ; ( (autoA30DB8C2_ai >= 0 && lv_index <= autoA30DB8C2_ae) || (autoA30DB8C2_ai < 0 && lv_index >= autoA30DB8C2_ae) ) ; lv_index += autoA30DB8C2_ai ) {
        libEA0820A1_gv_tSX_RecentMerc[lv_index] = libEA0820A1_ge_StoryMercID_MercNone;
    }
    lv_index = 1;
    for ( ; ( (auto38875B2F_ai >= 0 && lv_index <= auto38875B2F_ae) || (auto38875B2F_ai < 0 && lv_index >= auto38875B2F_ae) ) ; lv_index += auto38875B2F_ai ) {
    }
}

void libEA0820A1_gf_TS_InitizlizeStoryConversationSingle (string lp_conversation) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_ConvoCount = (libEA0820A1_gv_tS_ConvoCount + 1);
    libEA0820A1_gv_tS_Convos[libEA0820A1_gv_tS_ConvoCount] = lp_conversation;
}

void libEA0820A1_gf_TS_InitizlizeStoryConversations () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("ArmorySwann");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("BridgeHanson");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("BridgeHorner");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("BridgeTosh");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("BridgeTychus");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CantinafidgetsJukebox");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CantinaTosh");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CantinaTychus");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CharFidgetsArtifact");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CharTychus");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("CharWarfield");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("LabFidgetsAdjutant");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("LabFidgetsArtifact");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("LabHanson");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("Labresearch");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsArmyphoto");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsBadge");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsEvolutionofrevolution2");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsFreedomposter");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHeavensDevils");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHydrahead");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsHydrahunt");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSarafidgetsintro");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsKerriganPhoto");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsLocalhero2");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetsvikingphoto2");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraFidgetswantedposter");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("MarSaraTychus");
    libEA0820A1_gf_TS_InitizlizeStoryConversationSingle("Valerian");
}

string libEA0820A1_gf_ContactPortraitModel (int lp_contactID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ContactPortrait[(lp_contactID)];
}

int libEA0820A1_gf_CountMissions (int lp_status) {
    // Variable Declarations
    int lv_subtotal;
    int lv_map;

    // Automatic Variable Declarations
    int auto470150DA_i;

    // Variable Initialization
    lv_map = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    lv_subtotal = 0;
    auto470150DA_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto470150DA_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_map = libCamp_gv_tS_MapID[auto470150DA_i];
        if ((libEA0820A1_gf_MissionStatusCheck(lv_map, lp_status) == true)) {
            lv_subtotal = (lv_subtotal + 1);
        }

        auto470150DA_i = auto470150DA_i + 1;
    }
    return lv_subtotal;
}

int libEA0820A1_gf_LastMap () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tSX_LastMap);
}

bool libEA0820A1_gf_LastMapConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int auto6F2E5C6E_val;

    // Implementation
    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gf_LastMap(), libEA0820A1_ge_MapType_Mission) == true)) {
        return libEA0820A1_gf_LastMissionConditionCheck(lp_condition);
    }

    auto6F2E5C6E_val = lp_condition;
    if (auto6F2E5C6E_val == libEA0820A1_ge_MissionCondition_Successful) {
        return libEA0820A1_gv_tSX_LastMapSuccess;
    }
    else {
    }
    return false;
}

int libEA0820A1_gf_LastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tSX_LastMission);
}

bool libEA0820A1_gf_LastMissionConditionCheck (int lp_condition) {
    // Automatic Variable Declarations
    int autoA6E186CC_val;

    // Implementation
    autoA6E186CC_val = lp_condition;
    if (autoA6E186CC_val == libEA0820A1_ge_MissionCondition_Successful) {
        return libEA0820A1_gv_tSX_LastMissionSuccess;
    }
    else if (autoA6E186CC_val == libEA0820A1_ge_MissionCondition_Simulation) {
        return libEA0820A1_gv_tSX_LastMissionSimulation;
    }
    else {
    }
    return false;
}

int libEA0820A1_gf_LastSuccessfulMission () {
    // Variable Declarations
    int lv_mission;

    // Automatic Variable Declarations
    int auto1CAE0D21_i;

    // Variable Initialization
    lv_mission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto1CAE0D21_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto1CAE0D21_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_mission = libCamp_gv_tS_MapID[auto1CAE0D21_i];
        if ((ConversationDataStateGetValue(ConversationDataStateIndex("MissionLast", (lv_mission))) == 1)) {
            return lv_mission;
        }

        auto1CAE0D21_i = auto1CAE0D21_i + 1;
    }
    return libEA0820A1_ge_MapID_MapNone;
}

bool libEA0820A1_gf_MapTypeCheck (int lp_mapId, int lp_mapType) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gv_tS_MapType[(lp_mapId)] == lp_mapType);
}

string libEA0820A1_gf_MapFile (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MapFile[(lp_map)];
}

trigger libEA0820A1_gf_MissionBriefing (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libEA0820A1_gv_tS_MissionBriefing[lv_mapIndex];
}

trigger libEA0820A1_gf_MissionBriefingPreload (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libEA0820A1_gv_tS_MissionBriefingPreload[lv_mapIndex];
}

trigger libEA0820A1_gf_MissionBriefingRoughPreload (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libEA0820A1_gv_tS_MissionBriefingPreloadRough[lv_mapIndex];
}

int libEA0820A1_gf_MissionContact (int lp_mapID) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    return libEA0820A1_gv_tS_MissionContact[lv_mapIndex];
}

int libEA0820A1_gf_MissionPlanet (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MissionLocation[(lp_mission)];
}

int libEA0820A1_gf_MissionStatusAge (int lp_mission, int lp_status) {
    // Automatic Variable Declarations
    int autoF679AE55_val;

    // Implementation
    autoF679AE55_val = lp_status;
    if (autoF679AE55_val == libEA0820A1_ge_MissionStatus_Available) {
        return ConversationDataStateGetValue(ConversationDataStateIndex("MissionAvailable", (lp_mission)));
    }
    else if (autoF679AE55_val == libEA0820A1_ge_MissionStatus_Completed) {
        return ConversationDataStateGetValue(ConversationDataStateIndex("MissionCompleted", (lp_mission)));
    }
    else {
    }
    return 0;
}

bool libEA0820A1_gf_MissionDifficultyCompleted (int lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if (((libEA0820A1_gv_tSX_MissionDifficultyCompleted[(lp_mission)][(lp_difficulty)] == true) || (libEA0820A1_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)] > 0))) {
        return true;
    }

    return false;
}

int libEA0820A1_gf_MissionCompleteBestTime (int lp_mission, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)];
}

int libEA0820A1_gf_MissionStatus (int lp_missionID) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gf_MissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Completed) != 0)) {
        return libEA0820A1_ge_MissionStatus_Completed;
    }

    if ((libEA0820A1_gf_MissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Available) != 0)) {
        return libEA0820A1_ge_MissionStatus_Available;
    }

    return libEA0820A1_ge_MissionStatus_Locked;
}

bool libEA0820A1_gf_MissionStatusCheck (int lp_missionID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gf_MissionStatus(lp_missionID) == lp_status);
}

int libEA0820A1_gf_MissionReward (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt((ConversationDataStateFixedValue(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Reward") * 1000.0));
}

text libEA0820A1_gf_MissionName (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Name");
}

text libEA0820A1_gf_MissionNameInUpperCase (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return TextCase(libEA0820A1_gf_MissionName(lp_mission), true);
}

text libEA0820A1_gf_MissionEpilogue (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Epilogue");
}

text libEA0820A1_gf_MissionPlanetInfo (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Planet Info");
}

text libEA0820A1_gf_MissionObjectivesText (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Objectives");
}

string libEA0820A1_gf_MissionPitches (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MissionPitches[(lp_mission)];
}

int libEA0820A1_gf_MissionUnlockedTechSubgorup (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MissionTechUnitsEnabled[(lp_mission)][lp_index];
}

string libEA0820A1_gf_MissionUnlockedUnitType (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_StoryTechGroupUnitType(libEA0820A1_gf_MissionUnlockedTechSubgorup(lp_mission, 1));
}

string libEA0820A1_gf_MissionLoadingScreenImage (int lp_mission) {
    // Variable Declarations
    string lv_image;
    int lv_planet;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libEA0820A1_ge_PlanetID_PlanetNone;

    // Implementation
    lv_image = libEA0820A1_gv_tS_MapLoadingScreenImage[(lp_mission)];
    lv_planet = libEA0820A1_gv_tS_MissionLocation[(lp_mission)];
    if ((lv_image == null) && (lv_planet != libEA0820A1_ge_PlanetID_PlanetNone)) {
        lv_image = libEA0820A1_gv_tS_PlanetImage[(lv_planet)];
    }

    return lv_image;
}

int libEA0820A1_gf_NumberOfMissions (int lp_options) {
    // Variable Declarations
    int lv_mission;
    int lv_count;

    // Automatic Variable Declarations
    int auto962D5EFF_i;
    int autoD721ACE6_val;

    // Variable Initialization
    lv_mission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto962D5EFF_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto962D5EFF_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_mission = libCamp_gv_tS_MapID[auto962D5EFF_i];
        autoD721ACE6_val = lp_options;
        if (autoD721ACE6_val == libEA0820A1_ge_MissionCountOptions_All) {
            lv_count += 1;
        }
        else if (autoD721ACE6_val == libEA0820A1_ge_MissionCountOptions_Available) {
            if ((libEA0820A1_gf_MissionStatusCheck(lv_mission, libEA0820A1_ge_MissionStatus_Available) == true)) {
                lv_count += 1;
            }

        }
        else if (autoD721ACE6_val == libEA0820A1_ge_MissionCountOptions_Completed) {
            if ((libEA0820A1_gf_MissionStatusCheck(lv_mission, libEA0820A1_ge_MissionStatus_Completed) == true)) {
                lv_count += 1;
            }

        }
        else if (autoD721ACE6_val == libEA0820A1_ge_MissionCountOptions_Locked) {
            if ((libEA0820A1_gf_MissionStatusCheck(lv_mission, libEA0820A1_ge_MissionStatus_Locked) == true)) {
                lv_count += 1;
            }

        }
        else {
        }
        auto962D5EFF_i = auto962D5EFF_i + 1;
    }
    return lv_count;
}

int libEA0820A1_gf_TS_MissionRewardResearchPoints (int lp_mission, int lp_researchCategory) {
    // Automatic Variable Declarations
    int auto888F3F90_val;

    // Implementation
    auto888F3F90_val = lp_researchCategory;
    if (auto888F3F90_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_MapConvoID(lp_mission), "ResearchProtoss"));
    }
    else if (auto888F3F90_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_MapConvoID(lp_mission), "ResearchZerg"));
    }
    else {
    }
    return 0;
}

int libEA0820A1_gf_TS_TertiaryIntegerOp (bool lp_condition, int lp_trueValue, int lp_falseValue) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_trueValue;
    }
    else {
        return lp_falseValue;
    }
}

bool libEA0820A1_gf_TS_MapIsMission (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_MapTypeCheck(lp_map, libEA0820A1_ge_MapType_Mission);
}

int libEA0820A1_gf_TS_MapIDFromIndex (int lp_mapIndex) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MapID[lp_mapIndex];
}

string libEA0820A1_gf_TS_MapConvoID (int lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MapConvoID[(lp_map)];
}

text libEA0820A1_gf_FormatCredits (int lp_credits, bool lp_withDollarSign) {
    // Variable Declarations

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return FormatNumber(lp_credits);
}

int libEA0820A1_gf_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_CurrentMap;
}

void libEA0820A1_gf_UpdateMissionFlow () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int autoB12BDB5B_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTRaynor01, true);
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTRaynor02, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTRaynor03, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor02, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHanson01, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor03, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHanson02, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHanson03A, ((libEA0820A1_gf_MissionStatusAge(libEA0820A1_ge_MapID_MapTHanson02, libEA0820A1_ge_MissionStatus_Completed) > 2) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson02, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 12))));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHanson03B, ((libEA0820A1_gf_MissionStatusAge(libEA0820A1_ge_MapID_MapTHanson02, libEA0820A1_ge_MissionStatus_Completed) > 2) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson02, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 12))));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTHanson03A, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03B, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTHanson03B, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03A, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTosh01, (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 4));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTosh02, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTosh03A, ((libEA0820A1_gf_MissionStatusAge(libEA0820A1_ge_MapID_MapTTosh02, libEA0820A1_ge_MissionStatus_Completed) > 2) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh02, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 13))));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTosh03B, ((libEA0820A1_gf_MissionStatusAge(libEA0820A1_ge_MapID_MapTTosh02, libEA0820A1_ge_MissionStatus_Completed) > 2) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh02, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 13))));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTTosh03A, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh03B, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTTosh03B, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh03A, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHorner01, (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 6));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHorner02, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHorner01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHorner03, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHorner02, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTHorner04, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHorner03, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTychus01, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor03, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTychus02, (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus01, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 8)));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTychus03, (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus02, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 11)));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTychus04, (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus03, libEA0820A1_ge_MissionStatus_Completed) && (libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed) >= 14)));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTTychus05, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus04, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTZeratul01, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus02, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTZeratul02, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTZeratul01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTZeratul03, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTZeratul02, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTZeratul04, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTZeratul03, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTychus05, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_ge_MissionStatus_Completed));
    libEA0820A1_gf_TS_LockUnlockMissionIfCondition(false, libEA0820A1_ge_MapID_MapTValerian03, (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_ge_MissionStatus_Completed) || libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_ge_MissionStatus_Completed)));
    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        autoB12BDB5B_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoB12BDB5B_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[autoB12BDB5B_i];
            if ((lv_indexMission != libEA0820A1_ge_MapID_MapTValerian01) && (lv_indexMission != libEA0820A1_ge_MapID_MapTValerian02A) && (lv_indexMission != libEA0820A1_ge_MapID_MapTValerian02B) && (lv_indexMission != libEA0820A1_ge_MapID_MapTValerian03)) {
                libEA0820A1_gf_TS_LockUnlockMissionIfCondition(true, lv_indexMission, true);
            }

            autoB12BDB5B_i = autoB12BDB5B_i + 1;
        }
    }

}

void libEA0820A1_gf_SetMissionBriefing (int lp_mapID, trigger lp_briefing, trigger lp_briefingPreload, trigger lp_briefingPreloadRough) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libEA0820A1_gv_tS_MissionBriefing[lv_mapIndex] = lp_briefing;
    libEA0820A1_gv_tS_MissionBriefingPreload[lv_mapIndex] = lp_briefingPreload;
    libEA0820A1_gv_tS_MissionBriefingPreloadRough[lv_mapIndex] = lp_briefingPreloadRough;
}

void libEA0820A1_gf_SetMissionABChoiceCallback (int lp_mapID, trigger lp_aBChoice) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libEA0820A1_gv_tS_MissionABChoice[lv_mapIndex] = lp_aBChoice;
}

void libEA0820A1_gf_SetMissionABChoiceResult (int lp_mapID) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_MissionABChoiceResult = lp_mapID;
}

void libEA0820A1_gf_TS_MarkMissionAsStatus (int lp_missionID, int lp_status) {
    // Automatic Variable Declarations
    int auto38D8A151_val;

    // Implementation
    auto38D8A151_val = lp_status;
    if (auto38D8A151_val == libEA0820A1_ge_MissionStatus_Locked) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Available, 0);
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Completed, 0);
    }
    else if (auto38D8A151_val == libEA0820A1_ge_MissionStatus_Available) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Available, 1);
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Completed, 0);
    }
    else if (auto38D8A151_val == libEA0820A1_ge_MissionStatus_Completed) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Available, 0);
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_missionID, libEA0820A1_ge_MissionStatus_Completed, 1);
    }
    else {
    }
}

void libEA0820A1_gf_TS_SetMissionStatusAge (int lp_mission, int lp_status, int lp_age) {
    // Automatic Variable Declarations
    int autoF7B4BE78_val;

    // Implementation
    autoF7B4BE78_val = lp_status;
    if (autoF7B4BE78_val == libEA0820A1_ge_MissionStatus_Available) {
        ConversationDataStateSetValue(ConversationDataStateIndex("MissionAvailable", (lp_mission)), lp_age);
    }
    else if (autoF7B4BE78_val == libEA0820A1_ge_MissionStatus_Completed) {
        ConversationDataStateSetValue(ConversationDataStateIndex("MissionCompleted", (lp_mission)), lp_age);
    }
    else {
    }
}

void libEA0820A1_gf_TS_SetMissionDifficultyCompleted (int lp_mission, int lp_difficulty, bool lp_completed) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_MissionDifficultyCompleted[(lp_mission)][(lp_difficulty)] = lp_completed;
}

void libEA0820A1_gf_TS_SetMissionCompleteBestTime (int lp_mission, int lp_difficulty, int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_MissionDifficultyBestTime[(lp_mission)][(lp_difficulty)] = lp_time;
}

void libEA0820A1_gf_TS_CompleteMission (int lp_mission) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto8BB9F75C_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    if (((lp_mission == libEA0820A1_ge_MapID_MapNone) || (libEA0820A1_gf_MissionStatusCheck(lp_mission, libEA0820A1_ge_MissionStatus_Completed) == true))) {
        return ;
    }

    libEA0820A1_gf_TS_MarkMissionAsStatus(lp_mission, libEA0820A1_ge_MissionStatus_Completed);
    auto8BB9F75C_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto8BB9F75C_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto8BB9F75C_i];
        if ((lv_indexMission != lp_mission)) {
            libEA0820A1_gf_TS_IncreaseMissionAge(lv_indexMission);
        }

        auto8BB9F75C_i = auto8BB9F75C_i + 1;
    }
    libEA0820A1_gf_UpdateMissionFlow();
}

void libEA0820A1_gf_TS_IncreaseMissionAge (int lp_mission) {
    // Automatic Variable Declarations
    int auto8D3DEE0A_val;

    // Implementation
    auto8D3DEE0A_val = libEA0820A1_gf_MissionStatus(lp_mission);
    if (auto8D3DEE0A_val == libEA0820A1_ge_MissionStatus_Locked) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Available, 0);
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Completed, 0);
    }
    else if (auto8D3DEE0A_val == libEA0820A1_ge_MissionStatus_Available) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Available, (libEA0820A1_gf_MissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Available) + 1));
    }
    else if (auto8D3DEE0A_val == libEA0820A1_ge_MissionStatus_Completed) {
        libEA0820A1_gf_TS_SetMissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Completed, (libEA0820A1_gf_MissionStatusAge(lp_mission, libEA0820A1_ge_MissionStatus_Completed) + 1));
    }
    else {
    }
}

void libEA0820A1_gf_TS_InitializeMapDataSingle (int lp_mapID, string lp_map, text lp_progressCheatName, int lp_type, string lp_convoID, text lp_subtitle, string lp_loadingScreenImage, string lp_backLoadingScreenImage, string lp_backDefeatLoadingScreenImage, text lp_summary, int lp_location, bool lp_isRequired, int lp_contact, int lp_creditsPoor, int lp_creditsAvg, int lp_creditsRich, int lp_enabedTechUnit1, int lp_enabedTechUnit2, int lp_enabedTechUnit3, string lp_pitches, text lp_enemyForces, string lp_battleReportImage, string lp_battleReportIcon) {
    // Variable Declarations
    int lv_mapIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mapIndex = (lp_mapID);
    libEA0820A1_gv_tS_MapID[lv_mapIndex] = lp_mapID;
    libEA0820A1_gv_tS_MapFile[lv_mapIndex] = lp_map;
    libEA0820A1_gv_tS_MapProgressCheatName[lv_mapIndex] = lp_progressCheatName;
    libEA0820A1_gv_tS_MapProgressCheatName[lv_mapIndex] = ConversationDataStateText(lp_convoID, "Name");
    libEA0820A1_gv_tS_MapType[lv_mapIndex] = lp_type;
    libEA0820A1_gv_tS_MapConvoID[lv_mapIndex] = lp_convoID;
    libEA0820A1_gv_tS_MapSubtitle[lv_mapIndex] = lp_subtitle;
    libEA0820A1_gv_tS_MapLoadingScreenImage[lv_mapIndex] = lp_loadingScreenImage;
    libEA0820A1_gv_tS_MapBackLoadingImage[lv_mapIndex] = lp_backLoadingScreenImage;
    libEA0820A1_gv_tS_MapBackDefeatLoadingImage[lv_mapIndex] = lp_backDefeatLoadingScreenImage;
    libEA0820A1_gv_tS_MissionSummary[lv_mapIndex] = lp_summary;
    libEA0820A1_gv_tS_MissionLocation[lv_mapIndex] = lp_location;
    libEA0820A1_gv_tS_MissionIsRequired[lv_mapIndex] = lp_isRequired;
    libEA0820A1_gv_tS_MissionContact[lv_mapIndex] = lp_contact;
    libEA0820A1_gv_tS_ExpectedCreditsPoor[lv_mapIndex] = lp_creditsPoor;
    libEA0820A1_gv_tS_ExpectedCreditsAvg[lv_mapIndex] = lp_creditsAvg;
    libEA0820A1_gv_tS_ExpectedCreditsRich[lv_mapIndex] = lp_creditsRich;
    libEA0820A1_gv_tS_MissionPitches[lv_mapIndex] = lp_pitches;
    libEA0820A1_gv_tS_MissionEnemyForces[lv_mapIndex] = lp_enemyForces;
    libEA0820A1_gv_tS_MissionBattleReportImage[lv_mapIndex] = lp_battleReportImage;
    libEA0820A1_gv_tS_MissionBattleReportIcon[lv_mapIndex] = lp_battleReportIcon;
    libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 1, false);
    libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 2, false);
    libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 3, false);
    libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lp_mapID, 4, false);
    libEA0820A1_gf_TS_SetMissionCompleteBestTime(lp_mapID, 1, 0);
    libEA0820A1_gf_TS_SetMissionCompleteBestTime(lp_mapID, 2, 0);
    libEA0820A1_gf_TS_SetMissionCompleteBestTime(lp_mapID, 3, 0);
    libEA0820A1_gf_TS_SetMissionCompleteBestTime(lp_mapID, 4, 0);
}

void libEA0820A1_gf_TS_InitializeMapData () {
    // Variable Declarations
    string lv_loading_MarSaraBar;
    string lv_loading_HyperionBridge;
    string lv_loading_CharBattleZone;
    string lv_loading_HyperionArmory;
    string lv_loading_HyperionCantina;
    string lv_loading_HyperionLab;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_loading_MarSaraBar = "MarSaraLoadingScreenImage";
    lv_loading_HyperionBridge = "HyperionLoadingScreenImage";
    lv_loading_CharBattleZone = "CharLoadingScreenImage";
    lv_loading_HyperionArmory = "ArmoryLoadingScreenImage";
    lv_loading_HyperionCantina = "CantinaLoadingScreenImage";
    lv_loading_HyperionLab = "LabLoadingScreenImage";

    // Implementation
    libEA0820A1_gf_TS_InitializeContactData();
    libEA0820A1_gf_TS_InitializeMapDataSingle(libEA0820A1_ge_MapID_MapTSecret01, "TSecret", StringExternal("Param/Value/lib_EA0820A1_601681BB"), libEA0820A1_ge_MapType_Mission, "Maps|TSecret01", null, null, null, null, StringToText(""), libEA0820A1_ge_PlanetID_PlanetNone, false, libEA0820A1_ge_ContactID_ContactNone, 0, 0, 0, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, "", StringExternal("Param/Value/lib_EA0820A1_C228A814"), null, null);
    libEA0820A1_gf_TS_InitializeMapDataSingle(libEA0820A1_ge_MapID_MapTStory01, "TStory01", StringExternal("Param/Value/lib_EA0820A1_19CAE85F"), libEA0820A1_ge_MapType_StoryMode, "Maps|TStory01", null, null, null, null, StringToText(""), libEA0820A1_ge_PlanetID_PlanetNone, true, libEA0820A1_ge_ContactID_ContactNone, 0, 0, 0, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libEA0820A1_gf_TS_InitializeMapDataSingle(libEA0820A1_ge_MapID_MapTArcade, "TArcade", StringExternal("Param/Value/lib_EA0820A1_1115952B"), libEA0820A1_ge_MapType_MiniGame, "Maps|TArcade", null, null, lv_loading_HyperionBridge, null, StringToText(""), libEA0820A1_ge_PlanetID_PlanetNone, false, libEA0820A1_ge_ContactID_ContactNone, 0, 0, 0, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libEA0820A1_gf_TS_InitializeMapDataSingle(libEA0820A1_ge_MapID_MapTSimulator, "TSimulator", StringExternal("Param/Value/lib_EA0820A1_1E7C5DD3"), libEA0820A1_ge_MapType_MiniGame, "Maps|TSimulator", null, null, lv_loading_HyperionArmory, null, StringToText(""), libEA0820A1_ge_PlanetID_PlanetNone, false, libEA0820A1_ge_ContactID_ContactNone, 0, 0, 0, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone, "", StringToText(""), null, null);
    libCamp_gf_TS_DebugProgressInitMissionPath();
}

void libEA0820A1_gf_TS_InitializeContactDataSingle (int lp_contactID, text lp_name, string lp_convoStateIndex, string lp_portrait) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_contactID);
    libEA0820A1_gv_tS_ContactName[lv_index] = lp_name;
    libEA0820A1_gv_tS_ContactStateIndex[lv_index] = lp_convoStateIndex;
    libEA0820A1_gv_tS_ContactPortrait[lv_index] = lp_portrait;
}

void libEA0820A1_gf_TS_InitializeContactData () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactAdjutant, StringExternal("Param/Value/lib_EA0820A1_662F4808"), "Characters|CharAdjutant", "AdjutantPortrait_L");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactAdjutantConfederate, StringExternal("Param/Value/lib_EA0820A1_817235FE"), "Characters|CharConfederateAdjutant", null);
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactArcturusMengsk, StringExternal("Param/Value/lib_EA0820A1_E4B4C26D"), "Characters|CharArcturus", "ArcturusPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactBanshee, UnitTypeGetName("Banshee"), "Characters|CharBanshee", "BansheePortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactBattlecruiser, UnitTypeGetName("Battlecruiser"), "Characters|CharBattlecruiser", "BattlecruiserPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactCivilianFemale1, UnitTypeGetName("CivilianFemale"), "Characters|CharCivilianFemale1", "FemaleCivilian1Portrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactCivilianFemale2, UnitTypeGetName("CivilianFemale"), "Characters|CharCivilianFemale2", "FemaleCivilian2Portrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactCivilianMale1, UnitTypeGetName("Civilian"), "Characters|CharCivilian1", "MaleCivilian1Portrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactCivilianMale2, UnitTypeGetName("Civilian"), "Characters|CharCivilian2", "MaleCivilian2Portrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactGoliathMercenary, UnitTypeGetName("Goliath"), "Characters|CharGoliath", "GoliathPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactHanson, StringExternal("Param/Value/lib_EA0820A1_374092AF"), "Characters|CharHanson", "HansonPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactHellion, UnitTypeGetName("Jackal"), "Characters|CharHellion", "JackalPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactHighTemplar, UnitTypeGetName("HighTemplar"), "Characters|CharHighTemplar", "HighTemplarPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactHorner, StringExternal("Param/Value/lib_EA0820A1_15E86851"), "Characters|CharHorner", "HornerPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactKerrigan, StringExternal("Param/Value/lib_EA0820A1_82A9FC78"), "Characters|CharKerrigan", "KerriganPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactMarine, UnitTypeGetName("Marine"), "Characters|CharMarine", "MarinePortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactMedic, UnitTypeGetName("Medic"), "Characters|CharMedic", "MedicPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactMedivac, UnitTypeGetName("Dropship"), "Characters|CharMedivac", "MedivacPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactMiraHan, StringExternal("Param/Value/lib_EA0820A1_9AD380FE"), "Characters|CharHan", "HanPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactNarud, StringExternal("Param/Value/lib_EA0820A1_D8061594"), "Characters|CharNarud", "NarudPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactNova, StringExternal("Param/Value/lib_EA0820A1_1F8F30EF"), "Characters|CharNova", "NovaPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactOrlan, StringExternal("Param/Value/lib_EA0820A1_B9C9F9BC"), "Characters|CharOrlan", "OrlanPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactRaynor, StringExternal("Param/Value/lib_EA0820A1_D91B96A7"), "Characters|CharRaynor", "RaynorCommanderPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactRaynorMarine, StringExternal("Param/Value/lib_EA0820A1_6A5064F7"), "Characters|CharRaynor", "RaynorMarinePortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactReaper, UnitTypeGetName("Reaper"), "Characters|CharReaper", "ReaperPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactSCV, UnitTypeGetName("SCV"), "Characters|CharSCV", "SCVPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactSelendis, StringExternal("Param/Value/lib_EA0820A1_E0C181F6"), "Characters|CharSelendis", "SelendisPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactSiegeTank, UnitTypeGetName("SiegeTank"), "Characters|CharSiegeTank", "SiegeTankPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactSwann, StringExternal("Param/Value/lib_EA0820A1_80B20749"), "Characters|CharSwann", "SwannPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactTosh, StringExternal("Param/Value/lib_EA0820A1_629CF6B4"), "Characters|CharTosh", "ToshPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactTychus, StringExternal("Param/Value/lib_EA0820A1_0BBB4446"), "Characters|CharTychus", "TychusPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactValerianMengsk, StringExternal("Param/Value/lib_EA0820A1_6A972BCC"), "Characters|CharValerian", "ValerianPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactViking, UnitTypeGetName("VikingFighter"), "Characters|CharViking", "VikingFighterPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactWarfield, StringExternal("Param/Value/lib_EA0820A1_06424D7E"), "Characters|CharWarfield", "PortraitWarfield");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactZealot, UnitTypeGetName("Zealot"), "Characters|CharZealot", "ZealotPortrait");
    libEA0820A1_gf_TS_InitializeContactDataSingle(libEA0820A1_ge_ContactID_ContactZeratul, StringExternal("Param/Value/lib_EA0820A1_97F54F21"), "Characters|CharZeratul", "ZeratulPortrait");
}

void libEA0820A1_gf_TS_LockUnlockMissionIfCondition (bool lp_lockUnlockOption, int lp_mission, bool lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true) && (lp_lockUnlockOption == false) && (libEA0820A1_gf_MissionStatus(lp_mission) == libEA0820A1_ge_MissionStatus_Locked)) {
        libEA0820A1_gf_TS_MarkMissionAsStatus(lp_mission, libEA0820A1_ge_MissionStatus_Available);
    }

    if ((lp_condition == true) && (lp_lockUnlockOption == true) && (libEA0820A1_gf_MissionStatus(lp_mission) == libEA0820A1_ge_MissionStatus_Available)) {
        libEA0820A1_gf_TS_MarkMissionAsStatus(lp_mission, libEA0820A1_ge_MissionStatus_Locked);
    }

}

void libEA0820A1_gf_TS_SetLastSuccessfulMission (int lp_mission) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto23B8940F_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto23B8940F_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto23B8940F_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto23B8940F_i];
        if ((lv_indexMission == lp_mission)) {
            ConversationDataStateSetValue(ConversationDataStateIndex("MissionLast", (lv_indexMission)), 1);
        }
        else {
            ConversationDataStateSetValue(ConversationDataStateIndex("MissionLast", (lv_indexMission)), 0);
        }
        auto23B8940F_i = auto23B8940F_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateNewMissionOpened () {
    // Variable Declarations
    bool lv_opened;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto55042775_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto55042775_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto55042775_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto55042775_i];
        if ((libEA0820A1_gf_MissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Available) == 1)) {
            ConversationDataStateSetValue("NewMissionOpened", 1);
            return ;
        }

        auto55042775_i = auto55042775_i + 1;
    }
    ConversationDataStateSetValue("NewMissionOpened", 0);
}

void libEA0820A1_gf_LaunchMission (int lp_mission, bool lp_simulationOnOff, int lp_difficulty) {
    // Variable Declarations
    int lv_planet;
    text lv_body;
    int lv_missionPicked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libEA0820A1_ge_PlanetID_PlanetNone;
    lv_body = StringToText("");
    lv_missionPicked = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    lv_missionPicked = lp_mission;
    if ((libEA0820A1_gv_tS_MissionABChoice[(lp_mission)] != null) && (lp_simulationOnOff == false)) {
        libEA0820A1_gv_tS_MissionABChoiceResult = libEA0820A1_ge_MapID_MapNone;
        TriggerExecute(libEA0820A1_gv_tS_MissionABChoice[(lp_mission)], true, true);
        if ((libEA0820A1_gv_tS_MissionABChoiceResult == libEA0820A1_ge_MapID_MapNone)) {
            return ;
        }
        else {
            lv_missionPicked = libEA0820A1_gv_tS_MissionABChoiceResult;
        }
    }

    if (((libEA0820A1_gf_TS_GameFullyDownloaded() == true) || (lp_simulationOnOff == false)) && (libEA0820A1_gv_tS_MissionBriefing[(lv_missionPicked)] != null)) {
        TriggerExecute(libEA0820A1_gv_tS_MissionBriefing[(lv_missionPicked)], true, true);
    }

    GameOver(1, c_gameOverVictory, false, false);
}

text libEA0820A1_gf_MercName (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercNames[(lp_mercID)];
}

text libEA0820A1_gf_MercDescription (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercDescriptions[(lp_mercID)];
}

int libEA0820A1_gf_MercCost (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercCost[(lp_mercID)];
}

int libEA0820A1_gf_MercTechSubgroup (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercTechSubGroup[(lp_mercID)][lp_index];
}

int libEA0820A1_gf_MercCount (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercUnitCount[(lp_mercID)][lp_index];
}

text libEA0820A1_gf_MercUnitText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercUnitText[(lp_mercID)];
}

string libEA0820A1_gf_MercUnitText2 (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercUnitType[(lp_mercID)];
}

text libEA0820A1_gf_MercAvailablityText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercAvailabilityText[(lp_mercID)];
}

text libEA0820A1_gf_MercSpecialText (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercSpecialText[(lp_mercID)];
}

string libEA0820A1_gf_MercPortraitModel (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercPortrait[(lp_mercID)];
}

string libEA0820A1_gf_MercVideo (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercVideo[(lp_mercID)];
}

string libEA0820A1_gf_MercUpgrade (int lp_mercID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercUpgrade[(lp_mercID)];
}

bool libEA0820A1_gf_MercStatusCheck (int lp_mercID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gv_tSX_MercStatus[(lp_mercID)] == (lp_status));
}

int libEA0820A1_gf_CostofPurchasedMerc () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_cost;

    // Automatic Variable Declarations
    int auto4CA2B99E_i;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;

    // Implementation
    lv_cost = 0;
    auto4CA2B99E_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto4CA2B99E_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto4CA2B99E_i];
        if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
            lv_cost += libEA0820A1_gf_MercCost(lv_indexMerc);
        }

        auto4CA2B99E_i = auto4CA2B99E_i + 1;
    }
    return lv_cost;
}

abilcmd libEA0820A1_gf_TS_MercAbilityCommand (int lp_mercID, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MercAbilityCommands[(lp_mercID)][lp_index];
}

void libEA0820A1_gf_SetMercStatus (int lp_mercID, int lp_status) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_MercStatus[(lp_mercID)] = (lp_status);
}

void libEA0820A1_gf_TS_InitializeMercDataSingle (int lp_iD, text lp_name, text lp_description, int lp_cost, int lp_techSubgroup1, int lp_unitCount1, int lp_techSubgroup2, int lp_unitCount2, text lp_unitText, string lp_unitType, text lp_availabilityText, text lp_specialText, string lp_portrait, string lp_video, abilcmd lp_command1, abilcmd lp_command2, abilcmd lp_command3, string lp_upgrade, string lp_hiredImage, string lp_noCreditImage) {
    // Variable Declarations
    int lv_mercIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_mercIndex = (lp_iD);
    libEA0820A1_gv_tS_MercID[lv_mercIndex] = lp_iD;
    libEA0820A1_gv_tS_MercNames[lv_mercIndex] = lp_name;
    libEA0820A1_gv_tS_MercDescriptions[lv_mercIndex] = lp_description;
    libEA0820A1_gv_tS_MercCost[lv_mercIndex] = lp_cost;
    libEA0820A1_gv_tS_MercTechSubGroup[lv_mercIndex][1] = lp_techSubgroup1;
    libEA0820A1_gv_tS_MercUnitCount[lv_mercIndex][1] = lp_unitCount1;
    libEA0820A1_gv_tS_MercTechSubGroup[lv_mercIndex][2] = lp_techSubgroup2;
    libEA0820A1_gv_tS_MercUnitCount[lv_mercIndex][2] = lp_unitCount2;
    libEA0820A1_gv_tS_MercUnitText[lv_mercIndex] = lp_unitText;
    libEA0820A1_gv_tS_MercUnitType[lv_mercIndex] = lp_unitType;
    libEA0820A1_gv_tS_MercAvailabilityText[lv_mercIndex] = lp_availabilityText;
    libEA0820A1_gv_tS_MercSpecialText[lv_mercIndex] = lp_specialText;
    libEA0820A1_gv_tS_MercPortrait[lv_mercIndex] = lp_portrait;
    libEA0820A1_gv_tS_MercVideo[lv_mercIndex] = lp_video;
    libEA0820A1_gv_tSX_MercStatus[lv_mercIndex] = libEA0820A1_ge_StoryMercStatus_Locked;
    libEA0820A1_gv_tS_MercAbilityCommands[lv_mercIndex][1] = lp_command1;
    libEA0820A1_gv_tS_MercAbilityCommands[lv_mercIndex][2] = lp_command2;
    libEA0820A1_gv_tS_MercAbilityCommands[lv_mercIndex][3] = lp_command3;
    libEA0820A1_gv_tS_MercUpgrade[lv_mercIndex] = lp_upgrade;
    libEA0820A1_gv_tS_MercHiredImage[lv_mercIndex] = lp_hiredImage;
    libEA0820A1_gv_tS_MercNoCreditImage[lv_mercIndex] = lp_noCreditImage;
}

void libEA0820A1_gf_TS_InitializeMercData () {
    // Automatic Variable Declarations
    // Implementation
}

void libEA0820A1_gf_TS_ResetMercData () {
    // Variable Declarations
    int lv_indexMerc;

    // Automatic Variable Declarations
    int auto0E1CD34F_i;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;

    // Implementation
    auto0E1CD34F_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto0E1CD34F_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto0E1CD34F_i];
        libEA0820A1_gf_SetMercStatus(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Locked);
        auto0E1CD34F_i = auto0E1CD34F_i + 1;
    }
}

void libEA0820A1_gf_TS_ApplyMercenaryTech (int lp_player) {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_allowDisallow;
    int lv_abilityCommandIndex;

    // Automatic Variable Declarations
    int autoBFFEE8AD_i;
    const int autoA3EFB658_ae = libEA0820A1_gv_TSC_MERC_LAST2;
    const int autoA3EFB658_ai = 1;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_allowDisallow = true;

    // Implementation
    autoBFFEE8AD_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoBFFEE8AD_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoBFFEE8AD_i];
        if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
            lv_allowDisallow = true;
        }
        else {
            lv_allowDisallow = false;
        }
        lv_abilityCommandIndex = 1;
        for ( ; ( (autoA3EFB658_ai >= 0 && lv_abilityCommandIndex <= autoA3EFB658_ae) || (autoA3EFB658_ai < 0 && lv_abilityCommandIndex >= autoA3EFB658_ae) ) ; lv_abilityCommandIndex += autoA3EFB658_ai ) {
            if ((libEA0820A1_gf_TS_MercAbilityCommand(lv_indexMerc, lv_abilityCommandIndex) != null)) {
                TechTreeAbilityAllow(lp_player, libEA0820A1_gf_TS_MercAbilityCommand(lv_indexMerc, lv_abilityCommandIndex), lv_allowDisallow);
            }

        }
        if ((lv_allowDisallow == true)) {
            libEA0820A1_gf_AddUnitTypeToUnitHelpPanel(libEA0820A1_gf_MercUnitText2(lv_indexMerc), true, lp_player);
        }

        autoBFFEE8AD_i = autoBFFEE8AD_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateMercStatus () {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_enabled;
    int lv_index;

    // Automatic Variable Declarations
    int auto51A10864_i;
    const int autoDFC99517_ae = libEA0820A1_gv_TSC_MERC_LAST22;
    const int autoDFC99517_ai = 1;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;

    // Implementation
    auto51A10864_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto51A10864_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto51A10864_i];
        lv_enabled = true;
        lv_index = 1;
        for ( ; ( (autoDFC99517_ai >= 0 && lv_index <= autoDFC99517_ae) || (autoDFC99517_ai < 0 && lv_index >= autoDFC99517_ae) ) ; lv_index += autoDFC99517_ai ) {
            if ((libEA0820A1_gf_MercTechSubgroup(lv_indexMerc, lv_index) != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroupState[(libEA0820A1_gf_MercTechSubgroup(lv_indexMerc, lv_index))] != c_purchaseCategoryStateEnabled)) {
                lv_enabled = false;
                break;
            }

        }
        if ((lv_enabled == true)) {
            if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Locked) == true)) {
                libEA0820A1_gf_SetMercStatus(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_New);
            }

        }
        else {
            libEA0820A1_gf_SetMercStatus(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Locked);
        }
        auto51A10864_i = auto51A10864_i + 1;
    }
}

void libEA0820A1_gf_TS_ApplyMercUpgrades (int lp_player) {
    // Variable Declarations
    int lv_indexMerc;
    bool lv_enabled;
    int lv_index;

    // Automatic Variable Declarations
    int auto354F645C_i;
    const int autoD8E136B6_ae = libEA0820A1_gv_TSC_MERC_LAST22;
    const int autoD8E136B6_ai = 1;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;

    // Implementation
    auto354F645C_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto354F645C_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto354F645C_i];
        lv_enabled = true;
        lv_index = 1;
        for ( ; ( (autoD8E136B6_ai >= 0 && lv_index <= autoD8E136B6_ae) || (autoD8E136B6_ai < 0 && lv_index >= autoD8E136B6_ae) ) ; lv_index += autoD8E136B6_ai ) {
            if ((libEA0820A1_gf_MercTechSubgroup(lv_indexMerc, lv_index) != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroupState[(libEA0820A1_gf_MercTechSubgroup(lv_indexMerc, lv_index))] != c_purchaseCategoryStateEnabled)) {
                lv_enabled = false;
                break;
            }

        }
        if ((lv_enabled == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libEA0820A1_gf_MercUpgrade(lv_indexMerc), 1);
        }

        auto354F645C_i = auto354F645C_i + 1;
    }
}

void libEA0820A1_gf_DisplayMercenaryPanel (trigger lp_exitCallback) {
    // Variable Declarations
    int lv_indexMerc;
    int lv_index;
    text lv_mercText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_mercText = StringToText("");

    // Implementation
    libEA0820A1_gv_tS_MercUIExitCallback = lp_exitCallback;
    libEA0820A1_gf_TS_MercUIUpdateUI();
    libEA0820A1_gf_TS_MercUIGift(libEA0820A1_ge_StoryMercID_MercKelmorianMercenaries);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, true);
}

void libEA0820A1_gf_TS_MercUIUpdateUI () {
    // Variable Declarations
    int lv_indexMerc;
    int lv_index;
    text lv_mercText;

    // Automatic Variable Declarations
    int auto907538EB_i;
    int auto0E02009D_val;
    int autoE78E1D61_i;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_mercText = StringToText("");

    // Implementation
    if ((libEA0820A1_gv_tS_MercUICreated == false)) {
        libEA0820A1_gv_tS_MercUICreated = true;
        auto907538EB_i = libCamp_gv_TSC_MERC_FIRST;
        while (auto907538EB_i <= libCamp_gv_TSC_MERC_LAST) {
            lv_indexMerc = libCamp_gv_tS_MercID[auto907538EB_i];
            MercenaryCreate(PlayerGroupAll(), c_mercenaryStateDisabled);
            libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)] = MercenaryLastCreated();
            MercenarySetTitleText(MercenaryLastCreated(), libEA0820A1_gf_MercName(lv_indexMerc));
            MercenarySetDescriptionText(MercenaryLastCreated(), libEA0820A1_gf_MercDescription(lv_indexMerc));
            MercenarySetCost(MercenaryLastCreated(), libEA0820A1_gf_MercCost(lv_indexMerc));
            MercenarySetUnitText(MercenaryLastCreated(), libEA0820A1_gf_MercUnitText(lv_indexMerc));
            MercenarySetSpecialText(MercenaryLastCreated(), libEA0820A1_gf_MercSpecialText(lv_indexMerc));
            MercenarySetModelLink(MercenaryLastCreated(), libEA0820A1_gf_MercPortraitModel(lv_indexMerc));
            MercenarySetScenePath(MercenaryLastCreated(), libEA0820A1_gf_MercVideo(lv_indexMerc));
            auto0E02009D_val = lv_indexMerc;
            if (auto0E02009D_val == libEA0820A1_ge_StoryMercID_MercKelmorianMercenaries) {
            }
            else if (auto0E02009D_val == libEA0820A1_ge_StoryMercID_MercHammerSecurities) {
            }
            else if (auto0E02009D_val == libEA0820A1_ge_StoryMercID_MercDevilDogs) {
            }
            else {
            }
            auto907538EB_i = auto907538EB_i + 1;
        }
    }

    autoE78E1D61_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoE78E1D61_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoE78E1D61_i];
        MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], null);
        MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], libEA0820A1_gf_MercPortraitModel(lv_indexMerc));
        if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Available) == true)) {
            MercenarySetState(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateEnabled);
            if ((libEA0820A1_gf_MercCost(lv_indexMerc) > libEA0820A1_gf_StoryCredits())) {
                MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], libEA0820A1_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
                MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
            }

        }
        else if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_New) == true)) {
            MercenarySetState(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateNew);
            if ((libEA0820A1_gf_MercCost(lv_indexMerc) > libEA0820A1_gf_StoryCredits())) {
                MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], libEA0820A1_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
                MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
            }

        }
        else if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Locked) == true)) {
            MercenarySetState(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStateDisabled);
        }
        else if ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
            MercenarySetState(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], c_mercenaryStatePurchased);
            MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], libEA0820A1_gv_tS_MercHiredImage[(lv_indexMerc)]);
            MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
        }
        autoE78E1D61_i = autoE78E1D61_i + 1;
    }
}

void libEA0820A1_gf_TS_MercUIGift (int lp_mercGifted) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mercGifted == libEA0820A1_ge_StoryMercID_MercNone) && (libEA0820A1_gf_MercStatusCheck(lp_mercGifted, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        return ;
    }

    libEA0820A1_gf_SetMercStatus(lp_mercGifted, libEA0820A1_ge_StoryMercStatus_Purchased);
    libEA0820A1_gf_TS_AddRecentMerc(lp_mercGifted);
    MercenaryPurchase(libEA0820A1_gv_tS_MercUIMercenaries[(lp_mercGifted)]);
}

void libEA0820A1_gf_TS_BattleReportUpdate () {
    int init_i;

    // Variable Declarations
    int lv_indexMission;
    int lv_index;
    int lv_count;
    bool[81] lv_isMission;
    int[81] lv_missions;
    int[41] lv_missionCompleted;
    int lv_missionCompletedCount;
    int[81] lv_scenes;
    int lv_indexOuter;
    int lv_indexInner;
    bool lv_swapped;
    int lv_missionSwap;

    // Automatic Variable Declarations
    int auto81B03432_i;
    int auto37A284BC_ae;
    const int auto37A284BC_ai = 1;
    int auto8D9F3CA6_ae;
    const int auto8D9F3CA6_ai = 1;
    int autoE3F31A1D_ae;
    const int autoE3F31A1D_ai = 1;
    int autoB302B39E_val;
    int auto52A27919_val;
    int autoD01ADEB5_ae;
    const int autoD01ADEB5_ai = 1;
    int auto3760CA78_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    for (init_i = 0; init_i <= 80; init_i += 1) {
        lv_missions[init_i] = libEA0820A1_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        lv_missionCompleted[init_i] = libEA0820A1_ge_MapID_MapNone;
    }
    for (init_i = 0; init_i <= 80; init_i += 1) {
        lv_scenes[init_i] = libEA0820A1_ge_SceneID_SceneNone;
    }
    lv_missionSwap = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    if ((libEA0820A1_gv_tS_BattleReportReady == true)) {
        return ;
    }

    libEA0820A1_gv_tS_BattleReportReady = true;
    lv_missionCompletedCount = 0;
    auto81B03432_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto81B03432_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto81B03432_i];
        if (((libEA0820A1_gf_MissionStatusCheck(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed) == true) || ((lv_indexMission == libEA0820A1_ge_MapID_MapTHorner05S) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed) == true)))) {
            lv_missionCompletedCount += 1;
            lv_missionCompleted[lv_missionCompletedCount] = lv_indexMission;
        }

        auto81B03432_i = auto81B03432_i + 1;
    }
    auto37A284BC_ae = (lv_missionCompletedCount - 1);
    lv_indexOuter = 1;
    for ( ; ( (auto37A284BC_ai >= 0 && lv_indexOuter <= auto37A284BC_ae) || (auto37A284BC_ai < 0 && lv_indexOuter >= auto37A284BC_ae) ) ; lv_indexOuter += auto37A284BC_ai ) {
        lv_swapped = false;
        auto8D9F3CA6_ae = (lv_missionCompletedCount - lv_indexOuter);
        lv_indexInner = 1;
        for ( ; ( (auto8D9F3CA6_ai >= 0 && lv_indexInner <= auto8D9F3CA6_ae) || (auto8D9F3CA6_ai < 0 && lv_indexInner >= auto8D9F3CA6_ae) ) ; lv_indexInner += auto8D9F3CA6_ai ) {
            if ((libEA0820A1_gf_MissionStatusAge(lv_missionCompleted[(lv_indexInner + 1)], libEA0820A1_ge_MissionStatus_Completed) > libEA0820A1_gf_MissionStatusAge(lv_missionCompleted[lv_indexInner], libEA0820A1_ge_MissionStatus_Completed))) {
                lv_missionSwap = lv_missionCompleted[lv_indexInner];
                lv_missionCompleted[lv_indexInner] = lv_missionCompleted[(lv_indexInner + 1)];
                lv_missionCompleted[(lv_indexInner + 1)] = lv_missionSwap;
                lv_swapped = true;
            }

        }
        if ((lv_swapped == false)) {
            break;
        }

    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_861B6D8D") + IntToText(lv_missionCompletedCount)), false);
    lv_count = 0;
    lv_count += 1;
    lv_isMission[lv_count] = false;
    lv_scenes[lv_count] = libEA0820A1_ge_SceneID_ScenePreRenderedBetterMarine;
    lv_count += 1;
    lv_isMission[lv_count] = false;
    lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran01RaynorIntro;
    autoE3F31A1D_ae = lv_missionCompletedCount;
    lv_index = 1;
    for ( ; ( (autoE3F31A1D_ai >= 0 && lv_index <= autoE3F31A1D_ae) || (autoE3F31A1D_ai < 0 && lv_index >= autoE3F31A1D_ae) ) ; lv_index += autoE3F31A1D_ai ) {
        autoB302B39E_val = lv_missionCompleted[lv_index];
        if (autoB302B39E_val == libEA0820A1_ge_MapID_MapTZeratul01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_ScenePreRenderedOldRivals;
        }
        else if (autoB302B39E_val == libEA0820A1_ge_MapID_MapTValerian01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran16CharIntro;
        }
        else if (autoB302B39E_val == libEA0820A1_ge_MapID_MapTHanson03B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTHanson03A;
            if ((libEA0820A1_gf_TS_BattleReportMissionCompleted(libEA0820A1_ge_MapID_MapTHanson03A) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran08HansonEndA;
            }

        }
        else if (autoB302B39E_val == libEA0820A1_ge_MapID_MapTTosh03B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTTosh03A;
            if ((libEA0820A1_gf_TS_BattleReportMissionCompleted(libEA0820A1_ge_MapID_MapTTosh03A) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran09ToshEndA;
            }

        }
        else if (autoB302B39E_val == libEA0820A1_ge_MapID_MapTValerian02B) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTValerian02A;
        }
        else {
        }
        lv_count += 1;
        lv_isMission[lv_count] = true;
        lv_missions[lv_count] = lv_missionCompleted[lv_index];
        auto52A27919_val = lv_missionCompleted[lv_index];
        if (auto52A27919_val == libEA0820A1_ge_MapID_MapTRaynor01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran04TychusIntro;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTRaynor03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran05HornerBridgeIntro;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTychus01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran15KerriganIntro;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTychus02) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran03ZeratulsWarning;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTychus03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_ScenePreRenderedTheDream;
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran10RaynorsDream;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTychus04) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran06ValerianIntro;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTychus05) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran07BarFight;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTValerian01) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran11CharBatltefield;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTValerian02A) {
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTValerian02B;
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran17CharBattlefieldEnd;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTValerian02B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran17CharBattlefieldEnd;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTValerian03) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_ScenePreRenderedEnd;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTHanson03A) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran08HansonEndA;
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTHanson03B;
            if ((libEA0820A1_gf_TS_BattleReportMissionCompleted(libEA0820A1_ge_MapID_MapTHanson03B) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran13HansonEndB;
            }

        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTHanson03B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran13HansonEndB;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTosh03A) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran09ToshEndA;
            lv_count += 1;
            lv_isMission[lv_count] = true;
            lv_missions[lv_count] = libEA0820A1_ge_MapID_MapTTosh03B;
            if ((libEA0820A1_gf_TS_BattleReportMissionCompleted(libEA0820A1_ge_MapID_MapTTosh03B) == true)) {
                lv_count += 1;
                lv_isMission[lv_count] = false;
                lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran14ToshEndB;
            }

        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTTosh03B) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran14ToshEndB;
        }
        else if (auto52A27919_val == libEA0820A1_ge_MapID_MapTHorner04) {
            lv_count += 1;
            lv_isMission[lv_count] = false;
            lv_scenes[lv_count] = libEA0820A1_ge_SceneID_SceneTerran12HornerVictory;
        }
        else {
        }
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_EDA91042") + IntToText(lv_count)), false);
    autoD01ADEB5_ae = lv_count;
    lv_index = 1;
    for ( ; ( (autoD01ADEB5_ai >= 0 && lv_index <= autoD01ADEB5_ae) || (autoD01ADEB5_ai < 0 && lv_index >= autoD01ADEB5_ae) ) ; lv_index += autoD01ADEB5_ai ) {
        if ((lv_isMission[lv_index] == true)) {
            libEA0820A1_gf_TS_BattleReportAddMission(lv_missions[lv_index], c_battleReportStateCompleted, ((lv_count + 1) - lv_index));
            TriggerDebugOutput(1, (IntToText(lv_index) + StringExternal("Param/Value/lib_EA0820A1_DC7D7A97") + libEA0820A1_gf_MissionNameInUpperCase(lv_missions[lv_index])), false);
        }
        else {
            libEA0820A1_gf_TS_BattleReportAddScene(lv_scenes[lv_index], ((lv_count + 1) - lv_index));
            TriggerDebugOutput(1, (IntToText(lv_index) + StringExternal("Param/Value/lib_EA0820A1_3E4C7C56") + libEA0820A1_gv_tS_SceneNames[(lv_scenes[lv_index])]), false);
        }
    }
    auto3760CA78_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto3760CA78_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto3760CA78_i];
        if ((libEA0820A1_gf_MissionStatusCheck(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed) == false) && (lv_indexMission != libEA0820A1_ge_MapID_MapTSecret01) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTHanson03A) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03B, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTHanson03B) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03A, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTTosh03A) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh03B, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTTosh03B) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh03A, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTValerian02A) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTValerian02B) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_ge_MissionStatus_Completed) == false)) && ((lv_indexMission != libEA0820A1_ge_MapID_MapTHorner05S) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed) == false))) {
            libEA0820A1_gf_TS_BattleReportAddMission(lv_indexMission, c_battleReportStateHidden, 0);
        }

        auto3760CA78_i = auto3760CA78_i + 1;
    }
}

text libEA0820A1_gf_TS_BattleReportFormatObjectives (int lp_mission) {
    // Variable Declarations
    text lv_result;
    text lv_resultCompleted;
    text lv_resultDiscovered;
    text lv_resultUndiscovered;
    int lv_indexObj;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = StringToText("");
    lv_resultCompleted = StringToText("");
    lv_resultDiscovered = StringToText("");
    lv_resultUndiscovered = StringToText("");
    lv_indexObj = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    lv_result = (lv_resultCompleted + lv_resultDiscovered + lv_resultUndiscovered);
    return lv_result;
}

text libEA0820A1_gf_TS_BattleReportFormatBestTime (int lp_mission, int lp_difficulty) {
    // Variable Declarations
    text lv_result;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_result = StringToText("");

    // Implementation
    lv_result = libEA0820A1_gf_FormatTimeCampaign(libEA0820A1_gf_MissionCompleteBestTime(lp_mission, lp_difficulty));
    lv_result = (StringExternal("Param/Value/lib_EA0820A1_7321066C") + StringExternal("Param/Value/lib_EA0820A1_C4ADE8D7") + lv_result + StringExternal("Param/Value/lib_EA0820A1_67CD1993"));
    return lv_result;
}

bool libEA0820A1_gf_TS_BattleReportMissionCompleted (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gf_MissionStatusCheck(lp_mission, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        return true;
    }

    if (((libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 1) == true) || (libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 2) == true) || (libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 3) == true) || (libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 4) == true))) {
        return true;
    }

    return false;
}

void libEA0820A1_gf_TS_BattleReportAddMission (int lp_mission, int lp_state, int lp_priority) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_indexAchievement;
    int lv_indexObjective;
    int lv_bonus;
    int lv_bonusMax;
    int lv_researchPointZergMax;
    int lv_researchPointProtMax;
    int lv_researchPointZerg;
    int lv_researchPointProt;
    text lv_researchText;
    bool lv_missionCompleted;

    // Automatic Variable Declarations
    const int auto19D2907C_ae = libEA0820A1_gv_tSC_MAXMAPACHIEVEMENT;
    const int auto19D2907C_ai = 1;

    // Variable Initialization
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    lv_indexMission = (lp_mission);
    BattleReportCreate(PlayerGroupAll(), libEA0820A1_gf_MissionNameInUpperCase(lp_mission), c_battleReportTypeMission, lp_state);
    libEA0820A1_gv_tS_BattleReportMissions[lv_indexMission] = BattleReportLastCreated();
    BattleReportSetButtonImage(BattleReportLastCreated(), libEA0820A1_gv_tS_MissionBattleReportIcon[(lp_mission)]);
    BattleReportSetMissionText(BattleReportLastCreated(), libEA0820A1_gf_MissionNameInUpperCase(lp_mission));
    BattleReportSetMissionImage(BattleReportLastCreated(), libEA0820A1_gv_tS_MissionBattleReportImage[(lp_mission)]);
    lv_index = 1;
    for ( ; ( (auto19D2907C_ai >= 0 && lv_index <= auto19D2907C_ae) || (auto19D2907C_ai < 0 && lv_index >= auto19D2907C_ae) ) ; lv_index += auto19D2907C_ai ) {
        if ((libEA0820A1_gv_tS_MapAchievements[(lp_mission)][lv_index] != null)) {
            BattleReportAddAchievement(BattleReportLastCreated(), libEA0820A1_gv_tS_MapAchievements[(lp_mission)][lv_index]);
        }

    }
    if ((lv_bonusMax > 0)) {
        BattleReportSetBonusTitle(BattleReportLastCreated(), StringExternal("Param/Value/lib_EA0820A1_DBF233B8"));
        BattleReportSetBonusText(BattleReportLastCreated(), (StringExternal("Param/Value/lib_EA0820A1_2D7E79F1") + libEA0820A1_gf_FormatCredits(lv_bonus, true) + StringExternal("Param/Value/lib_EA0820A1_92672D46") + libEA0820A1_gf_FormatCredits(lv_bonusMax, true) + StringExternal("Param/Value/lib_EA0820A1_3BBBF7D4")));
    }
    else {
        BattleReportSetBonusTitle(BattleReportLastCreated(), StringToText(""));
        BattleReportSetBonusText(BattleReportLastCreated(), StringToText(""));
    }
    lv_researchPointZergMax += libEA0820A1_gf_TS_MissionRewardResearchPoints(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
    lv_researchPointProtMax += libEA0820A1_gf_TS_MissionRewardResearchPoints(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
    if ((libEA0820A1_gf_MissionStatusCheck(lp_mission, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        lv_researchPointZerg += libEA0820A1_gf_TS_MissionRewardResearchPoints(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
        lv_researchPointProt += libEA0820A1_gf_TS_MissionRewardResearchPoints(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
    }

    if (((lv_researchPointZergMax > 0) || (lv_researchPointProtMax > 0))) {
        BattleReportSetResearchTitle(BattleReportLastCreated(), StringExternal("Param/Value/lib_EA0820A1_EB0965B0"));
        lv_researchText = StringToText("");
        if ((lv_researchPointZergMax > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_9E006A47") + IntToText(lv_researchPointZerg) + StringExternal("Param/Value/lib_EA0820A1_F4BB0602") + IntToText(lv_researchPointZergMax) + StringExternal("Param/Value/lib_EA0820A1_8A2D8731") + StringExternal("Param/Value/lib_EA0820A1_07E8F7F0"));
            if ((lv_researchPointProtMax > 0)) {
                lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_3BA7796B"));
            }

        }

        if ((lv_researchPointProtMax > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_8C9DF405") + IntToText(lv_researchPointProt) + StringExternal("Param/Value/lib_EA0820A1_5B932167") + IntToText(lv_researchPointProtMax) + StringExternal("Param/Value/lib_EA0820A1_3F799E51") + StringExternal("Param/Value/lib_EA0820A1_6A5514DB"));
        }

        BattleReportSetResearchText(BattleReportLastCreated(), lv_researchText);
    }

    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 1, libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 1));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 2, libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 2));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 3, libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 3));
    BattleReportSetDifficultyLevelCompleted(BattleReportLastCreated(), 4, libEA0820A1_gf_MissionDifficultyCompleted(lp_mission, 4));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 1, libEA0820A1_gf_TS_BattleReportFormatBestTime(lp_mission, 1));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 2, libEA0820A1_gf_TS_BattleReportFormatBestTime(lp_mission, 2));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 3, libEA0820A1_gf_TS_BattleReportFormatBestTime(lp_mission, 3));
    BattleReportSetDifficultyLevelBestTimeText(BattleReportLastCreated(), 4, libEA0820A1_gf_TS_BattleReportFormatBestTime(lp_mission, 4));
    BattleReportSetPriority(BattleReportLastCreated(), lp_priority);
    if (((lp_mission != libEA0820A1_ge_MapID_MapTHanson03B) && (lp_mission != libEA0820A1_ge_MapID_MapTTosh03B) && (lp_mission != libEA0820A1_ge_MapID_MapTValerian02B) && ((lp_mission != libEA0820A1_ge_MapID_MapTHorner05S) || (libEA0820A1_gf_TS_BattleReportMissionCompleted(libEA0820A1_ge_MapID_MapTHorner05S) == true)))) {
        BattleReportSetShownInMissionTotal(BattleReportLastCreated(), true);
    }
    else {
        BattleReportSetShownInMissionTotal(BattleReportLastCreated(), false);
    }
}

void libEA0820A1_gf_TS_BattleReportAddScene (int lp_scene, int lp_priority) {
    // Variable Declarations
    int lv_indexScene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_indexScene = (lp_scene);
    if ((libEA0820A1_gf_TS_GameFullyDownloaded() == false) && (lp_scene != libEA0820A1_ge_SceneID_ScenePreRenderedTheDream) && (lp_scene != libEA0820A1_ge_SceneID_ScenePreRenderedOldRivals) && (lp_scene != libEA0820A1_ge_SceneID_ScenePreRenderedEnd) && (lp_scene != libEA0820A1_ge_SceneID_ScenePreRenderedBetterMarine)) {
        TextExpressionSetToken("Param/Expression/lib_EA0820A1_F83C6CAC", "SCENENAME", libEA0820A1_gv_tS_SceneNames[lv_indexScene]);
        BattleReportCreate(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_EA0820A1_F83C6CAC"), c_battleReportTypeScene, c_battleReportStateCompleted);
    }
    else {
        BattleReportCreate(PlayerGroupAll(), libEA0820A1_gv_tS_SceneNames[lv_indexScene], c_battleReportTypeScene, c_battleReportStateCompleted);
    }
    libEA0820A1_gv_tS_BattleReportScenes[lv_indexScene] = BattleReportLastCreated();
    BattleReportSetSceneImage(BattleReportLastCreated(), libEA0820A1_gv_tS_SceneImages[lv_indexScene]);
    BattleReportSetButtonImage(BattleReportLastCreated(), libEA0820A1_gv_tS_SceneIcon[lv_indexScene]);
    BattleReportSetSceneText(BattleReportLastCreated(), libEA0820A1_gv_tS_SceneNames[lv_indexScene]);
    BattleReportSetPriority(BattleReportLastCreated(), lp_priority);
}

void libEA0820A1_gf_TS_BattleReportHide () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, false);
}

void libEA0820A1_gf_DisplayBattleReport (trigger lp_sceneFinishCallback, trigger lp_leaveCallback) {
    // Variable Declarations
    int lv_mission;
    int lv_indexMission;
    int lv_scene;
    int lv_indexScene;

    // Automatic Variable Declarations
    int autoD41F4514_i;

    // Variable Initialization
    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_scene = libEA0820A1_ge_SceneID_SceneNone;
    lv_indexScene = libEA0820A1_ge_SceneID_SceneNone;

    // Implementation
    libEA0820A1_gv_tS_BattleReportSceneFinishCallback = lp_sceneFinishCallback;
    libEA0820A1_gv_tS_BattleReportPanelLeaveCallback = lp_leaveCallback;
    libEA0820A1_gf_TS_BattleReportUpdate();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    if (true) {
        lv_mission = libEA0820A1_ge_MapID_MapNone;
        lv_scene = libEA0820A1_ge_SceneID_SceneNone;
        autoD41F4514_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoD41F4514_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[autoD41F4514_i];
            if (true) {
                lv_mission = lv_indexMission;
                break;
            }

            autoD41F4514_i = autoD41F4514_i + 1;
        }
        if ((lv_mission != libEA0820A1_ge_MapID_MapNone)) {
            BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libEA0820A1_gv_tS_BattleReportMissions[(lv_mission)]);
        }
        else {
            if ((lv_scene != libEA0820A1_ge_SceneID_SceneNone)) {
                BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libEA0820A1_gv_tS_BattleReportScenes[(lv_scene)]);
            }

        }
    }
    else {
        BattleReportPanelSetSelectedBattleReport(PlayerGroupAll(), libEA0820A1_gv_tS_BattleReportScenes[(libEA0820A1_ge_SceneID_SceneTerran01RaynorIntro)]);
    }
}

void libEA0820A1_gf_RefreshBattleReport () {
    // Variable Declarations
    int lv_mission;
    int lv_indexMission;
    int lv_scene;
    int lv_indexScene;
    int lv_missionSelected;
    int lv_sceneSelected;

    // Automatic Variable Declarations
    int autoC4482F74_i;

    // Variable Initialization
    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_scene = libEA0820A1_ge_SceneID_SceneNone;
    lv_indexScene = libEA0820A1_ge_SceneID_SceneNone;
    lv_missionSelected = libEA0820A1_ge_MapID_MapNone;
    lv_sceneSelected = libEA0820A1_ge_SceneID_SceneNone;

    // Implementation
    autoC4482F74_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoC4482F74_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoC4482F74_i];
        if ((libEA0820A1_gv_tS_BattleReportMissions[(lv_indexMission)] != c_invalidBattleReportId)) {
            if (true) {
                lv_missionSelected = lv_indexMission;
            }

            BattleReportDestroy(libEA0820A1_gv_tS_BattleReportMissions[(lv_indexMission)]);
            libEA0820A1_gv_tS_BattleReportMissions[(lv_indexMission)] = c_invalidBattleReportId;
        }

        autoC4482F74_i = autoC4482F74_i + 1;
    }
    libEA0820A1_gv_tS_BattleReportReady = false;
    libEA0820A1_gf_TS_BattleReportUpdate();
    if ((lv_missionSelected != libEA0820A1_ge_MapID_MapNone)) {
    }

    if ((lv_sceneSelected != libEA0820A1_ge_SceneID_SceneNone)) {
    }

}

bool libEA0820A1_gf_TS_GameFullyDownloaded () {
    // Automatic Variable Declarations
    // Implementation
    return GameDataIsFullyDownloaded(1);
}

void libEA0820A1_gf_RegisterMissionDebriefingCallback (int lp_mission, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_MissionDebriefingCallbacks[(lp_mission)] = lp_callback;
}

trigger libEA0820A1_gf_MissionDebriefingCallback (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MissionDebriefingCallbacks[(lp_mission)];
}

bool libEA0820A1_gf_MissionObjectiveStateCheck (int lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gv_tSX_MissionObjState[(lp_objective)] == (lp_state));
}

bool libEA0820A1_gf_MissionObjectiveIsPrimary (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_MissionObjIsPrimary[(lp_objective)];
}

text libEA0820A1_gf_MissionObjectiveName (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_MissionObjName[(lp_objective)];
}

int libEA0820A1_gf_MissionObjectiveMap (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MissionObjMap[(lp_objective)];
}

int libEA0820A1_gf_MissionObjectiveRewardsEarned (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_gf_MissionObjectiveMap(lp_objective), libEA0820A1_ge_MissionStatus_Completed) == true)) {
        return (libEA0820A1_gf_MissionObjectiveProgress(lp_objective) * libEA0820A1_gf_MissionObjectiveCreditsPerItem(lp_objective));
    }

    return 0;
}

int libEA0820A1_gf_MissionObjectiveRewardsEarnedLastMission () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent;
}

int libEA0820A1_gf_MissionObjectiveItemCount (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_MissionObjectiveConvoID(lp_objective), "Item Count"));
}

int libEA0820A1_gf_MissionObjectiveCreditsPerItem (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_MissionObjectiveConvoID(lp_objective), "Credits Per Item"));
}

int libEA0820A1_gf_MissionObjectiveProgress (int lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue(libEA0820A1_gv_tS_MissionObjConvoID[(lp_objective)]);
}

bool libEA0820A1_gf_TS_AllObjectivesCompletedForMission (int lp_mission) {
    // Variable Declarations
    int lv_obj;

    // Automatic Variable Declarations
    int autoA802431F_i;

    // Variable Initialization
    lv_obj = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    autoA802431F_i = 1;
    while (autoA802431F_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lp_mission][autoA802431F_i] != 0) {
            lv_obj = libCamp_gv_tS_MissionObjectives[lp_mission][autoA802431F_i];
            if ((ObjectiveGetState(libEA0820A1_gv_tS_MissionObjObjective[(lv_obj)]) != c_objectiveStateCompleted)) {
                return false;
            }

        }
        autoA802431F_i = autoA802431F_i + 1;
    }
    return true;
}

string libEA0820A1_gf_TS_MissionObjectiveConvoID (int lp_objective) {
    // Variable Declarations
    int lv_obj;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_obj = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    return libEA0820A1_gv_tS_MissionObjConvoID[(lp_objective)];
}

void libEA0820A1_gf_RegisterMissionObjective (int lp_objectiveID, int lp_objective, text lp_objectiveName) {
    // Variable Declarations
    int lv_objIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_objIndex = (lp_objectiveID);
    libEA0820A1_gv_tS_MissionObjObjective[lv_objIndex] = lp_objective;
    libEA0820A1_gv_tSX_MissionObjName[lv_objIndex] = lp_objectiveName;
    libEA0820A1_gv_tSX_MissionObjIsPrimary[lv_objIndex] = ObjectiveGetPrimary(lp_objective);
}

void libEA0820A1_gf_SetMissionObjectiveState (int lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_MissionObjState[(lp_objective)] = (lp_state);
}

void libEA0820A1_gf_SetMissionObjectiveProgress (int lp_objective, int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue(libEA0820A1_gf_TS_MissionObjectiveConvoID(lp_objective), lp_progress);
}

void libEA0820A1_gf_AddProgressToStoryObjective (int lp_progress, int lp_objective) {
    // Variable Declarations
    int lv_indexObjective;
    int lv_rewardsOld;
    int lv_rewardsNew;

    // Automatic Variable Declarations
    int auto25376A90_i;

    // Variable Initialization
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    libEA0820A1_gv_tS_MissionObjProgressCurrent[(lp_objective)] += lp_progress;
    auto25376A90_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
    while (auto25376A90_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
        lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto25376A90_i];
        if ((libEA0820A1_gf_MissionObjectiveMap(lv_indexObjective) == libEA0820A1_gv_tS_CurrentMap)) {
            lv_rewardsOld += (libEA0820A1_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)] * libEA0820A1_gf_MissionObjectiveCreditsPerItem(lv_indexObjective));
            lv_rewardsNew += (libEA0820A1_gv_tS_MissionObjProgressCurrent[(lv_indexObjective)] * libEA0820A1_gf_MissionObjectiveCreditsPerItem(lv_indexObjective));
        }

        auto25376A90_i = auto25376A90_i + 1;
    }
    libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent = (lv_rewardsNew - lv_rewardsOld);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_AF2E790C") + IntToText(lv_rewardsNew) + StringExternal("Param/Value/lib_EA0820A1_2CDD6294") + IntToText(lv_rewardsOld) + StringExternal("Param/Value/lib_EA0820A1_CCB81DCA") + IntToText(libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent) + StringExternal("Param/Value/lib_EA0820A1_B99D7934")), false);
    if ((libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent < 0)) {
        libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
    }

    if ((libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent > 0)) {
        libEA0820A1_gf_SetMissionObjectiveProgress(lp_objective, libEA0820A1_gv_tS_MissionObjProgressCurrent[(lp_objective)]);
    }

}

void libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle (int lp_obj, int lp_map, string lp_convoID) {
    // Variable Declarations
    int lv_objIndex;
    int lv_mapIndex;
    int lv_missionObjIndex;

    // Automatic Variable Declarations
    const int auto76173722_ae = libEA0820A1_gv_TSC_MISSIONOBJECTIVECOUNT;
    const int auto76173722_ai = 1;

    // Variable Initialization

    // Implementation
    lv_objIndex = (lp_obj);
    libEA0820A1_gv_tS_MissionObjIDs[lv_objIndex] = lp_obj;
    libEA0820A1_gv_tS_MissionObjMap[lv_objIndex] = lp_map;
    libEA0820A1_gv_tS_MissionObjConvoID[lv_objIndex] = lp_convoID;
    libEA0820A1_gv_tSX_MissionObjName[lv_objIndex] = null;
    libEA0820A1_gv_tSX_MissionObjIsPrimary[lv_objIndex] = false;
    lv_mapIndex = (lp_map);
    lv_missionObjIndex = 1;
    for ( ; ( (auto76173722_ai >= 0 && lv_missionObjIndex <= auto76173722_ae) || (auto76173722_ai < 0 && lv_missionObjIndex >= auto76173722_ae) ) ; lv_missionObjIndex += auto76173722_ai ) {
        if ((libEA0820A1_gv_tS_MissionObjectives[lv_mapIndex][lv_missionObjIndex] == libEA0820A1_ge_MissionObjective_MissionObjectiveNone)) {
            libEA0820A1_gv_tS_MissionObjectives[lv_mapIndex][lv_missionObjIndex] = lp_obj;
            break;
        }

    }
}

void libEA0820A1_gf_TS_InitializeMissionObjectiveData () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor01Objective1, libEA0820A1_ge_MapID_MapTRaynor01, "MissionObjective|TRaynor01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor01Objective2, libEA0820A1_ge_MapID_MapTRaynor01, "MissionObjective|TRaynor01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor02Objective1, libEA0820A1_ge_MapID_MapTRaynor02, "MissionObjective|TRaynor02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor02Objective2, libEA0820A1_ge_MapID_MapTRaynor02, "MissionObjective|TRaynor02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor03Objective1, libEA0820A1_ge_MapID_MapTRaynor03, "MissionObjective|TRaynor03_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TRaynor03Objective2, libEA0820A1_ge_MapID_MapTRaynor03, "MissionObjective|TRaynor03_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson01Objective1, libEA0820A1_ge_MapID_MapTHanson01, "MissionObjective|THanson01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson01Objective2, libEA0820A1_ge_MapID_MapTHanson01, "MissionObjective|THanson01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson01Objective3, libEA0820A1_ge_MapID_MapTHanson01, "MissionObjective|THanson01_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson01Objective4, libEA0820A1_ge_MapID_MapTHanson01, "MissionObjective|THanson01_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson02Objective1, libEA0820A1_ge_MapID_MapTHanson02, "MissionObjective|THanson02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson02Objective2, libEA0820A1_ge_MapID_MapTHanson02, "MissionObjective|THanson02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03AObjective1, libEA0820A1_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03AObjective2, libEA0820A1_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03AObjective3, libEA0820A1_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03AObjective4, libEA0820A1_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03AObjective5, libEA0820A1_ge_MapID_MapTHanson03A, "MissionObjective|THanson03A_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THanson03BObjective1, libEA0820A1_ge_MapID_MapTHanson03B, "MissionObjective|THanson03B_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh01Objective1, libEA0820A1_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh01Objective2, libEA0820A1_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh01Objective3, libEA0820A1_ge_MapID_MapTTosh01, "MissionObjective|TTosh01_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh02Objective1, libEA0820A1_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh02Objective2, libEA0820A1_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh02Objective3, libEA0820A1_ge_MapID_MapTTosh02, "MissionObjective|TTosh02_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03AObjective1, libEA0820A1_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03AObjective2, libEA0820A1_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03AObjective3, libEA0820A1_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03AObjective4, libEA0820A1_ge_MapID_MapTTosh03A, "MissionObjective|TTosh03A_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03BObjective1, libEA0820A1_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03BObjective2, libEA0820A1_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03BObjective3, libEA0820A1_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03BObjective5, libEA0820A1_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_5");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTosh03BObjective4, libEA0820A1_ge_MapID_MapTTosh03B, "MissionObjective|TTosh03B_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner01Objective1, libEA0820A1_ge_MapID_MapTHorner01, "MissionObjective|THorner01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner01Objective2, libEA0820A1_ge_MapID_MapTHorner01, "MissionObjective|THorner01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner01Objective3, libEA0820A1_ge_MapID_MapTHorner01, "MissionObjective|THorner01_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner01Objective32, libEA0820A1_ge_MapID_MapTHorner01, "MissionObjective|THorner01_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner02Objective1, libEA0820A1_ge_MapID_MapTHorner02, "MissionObjective|THorner02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner02Objective2, libEA0820A1_ge_MapID_MapTHorner02, "MissionObjective|THorner02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner02Objective3, libEA0820A1_ge_MapID_MapTHorner02, "MissionObjective|THorner02_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective1, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective2, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective3, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective4, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective5, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_5");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner03Objective6, libEA0820A1_ge_MapID_MapTHorner03, "MissionObjective|THorner03_6");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner04Objective1, libEA0820A1_ge_MapID_MapTHorner04, "MissionObjective|THorner04_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner04Objective2, libEA0820A1_ge_MapID_MapTHorner04, "MissionObjective|THorner04_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner04Objective3, libEA0820A1_ge_MapID_MapTHorner04, "MissionObjective|THorner04_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective1, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective2, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective3, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective4, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective5, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_5");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_THorner05Objective52, libEA0820A1_ge_MapID_MapTHorner05S, "MissionObjective|THorner05_6");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus01Objective1, libEA0820A1_ge_MapID_MapTTychus01, "MissionObjective|TTychus01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus01Objective2, libEA0820A1_ge_MapID_MapTTychus01, "MissionObjective|TTychus01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus02Objective1, libEA0820A1_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus02Objective2, libEA0820A1_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus02Objective3, libEA0820A1_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus02Objective32, libEA0820A1_ge_MapID_MapTTychus02, "MissionObjective|TTychus02_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus03Objective1, libEA0820A1_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus03Objective2, libEA0820A1_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus03Objective3, libEA0820A1_ge_MapID_MapTTychus03, "MissionObjective|TTychus03_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus04Objective1, libEA0820A1_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus04Objective2, libEA0820A1_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus04Objective3, libEA0820A1_ge_MapID_MapTTychus04, "MissionObjective|TTychus04_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus05Objective1, libEA0820A1_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus05Objective2, libEA0820A1_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus05Objective3, libEA0820A1_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TTychus05Objective4, libEA0820A1_ge_MapID_MapTTychus05, "MissionObjective|TTychus05_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul01Objective1, libEA0820A1_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul01Objective2, libEA0820A1_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul01Objective3, libEA0820A1_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul01EscapetotheVoidSeeker, libEA0820A1_ge_MapID_MapTZeratul01, "MissionObjective|TZeratul01_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul02Objective1, libEA0820A1_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul02Objective2, libEA0820A1_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul02Objective3, libEA0820A1_ge_MapID_MapTZeratul02, "MissionObjective|TZeratul02_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul03Objective1, libEA0820A1_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul03Objective2, libEA0820A1_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul03Objective4, libEA0820A1_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul02Objective42, libEA0820A1_ge_MapID_MapTZeratul03, "MissionObjective|TZeratul03_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul04Objective1, libEA0820A1_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul04Objective2, libEA0820A1_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TZeratul04Objective3, libEA0820A1_ge_MapID_MapTZeratul04, "MissionObjective|TZeratul04_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian01Objective1, libEA0820A1_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian01Objective2, libEA0820A1_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian01Objective4, libEA0820A1_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_4");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian01Objective3, libEA0820A1_ge_MapID_MapTValerian01, "MissionObjective|TValerian01_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian02AObjective1, libEA0820A1_ge_MapID_MapTValerian02A, "MissionObjective|TValerian02A_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian02AObjective2, libEA0820A1_ge_MapID_MapTValerian02A, "MissionObjective|TValerian02A_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian02BObjective1, libEA0820A1_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_1");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian02BObjective2, libEA0820A1_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_2");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian02BObjective3, libEA0820A1_ge_MapID_MapTValerian02B, "MissionObjective|TValerian02B_3");
    libEA0820A1_gf_TS_InitializeMissionObjectiveDataSingle(libEA0820A1_ge_MissionObjective_TValerian03Objective1, libEA0820A1_ge_MapID_MapTValerian03, "MissionObjective|TValerian03_1");
}

void libEA0820A1_gf_TS_UpdateMissionObjectives () {
    // Variable Declarations
    int lv_obj;
    int lv_objective;

    // Automatic Variable Declarations
    int autoDC975281_i;
    int auto0D722490_val;

    // Variable Initialization
    lv_obj = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_objective = c_invalidObjectiveId;

    // Implementation
    autoDC975281_i = 1;
    while (autoDC975281_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[libEA0820A1_gv_tS_CurrentMap][autoDC975281_i] != 0) {
            lv_obj = libCamp_gv_tS_MissionObjectives[libEA0820A1_gv_tS_CurrentMap][autoDC975281_i];
            lv_objective = libEA0820A1_gv_tS_MissionObjObjective[(lv_obj)];
            if ((lv_objective != c_invalidObjectiveId)) {
                libEA0820A1_gv_tSX_MissionObjIsPrimary[(lv_obj)] = ObjectiveGetPrimary(lv_objective);
                auto0D722490_val = ObjectiveGetState(lv_objective);
                if (auto0D722490_val == c_objectiveStateActive) {
                    if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                        libEA0820A1_gf_SetMissionObjectiveState(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveAvailable);
                    }

                }
                else if (auto0D722490_val == c_objectiveStateFailed) {
                    if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                        libEA0820A1_gf_SetMissionObjectiveState(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveAvailable);
                    }

                }
                else if (auto0D722490_val == c_objectiveStateCompleted) {
                    if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveCompleted) == false)) {
                        libEA0820A1_gf_SetMissionObjectiveState(lv_obj, libEA0820A1_ge_MissionObjectiveState_ObjectiveCompleted);
                    }

                }
                else {
                }
            }

        }
        autoDC975281_i = autoDC975281_i + 1;
    }
}

text libEA0820A1_gf_StoryResearchName (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateName(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)]);
}

text libEA0820A1_gf_StoryResearchDescription (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Description"));
}

int libEA0820A1_gf_StoryResearchCategory (int lp_researchID) {
    // Automatic Variable Declarations
    int auto5D104AE6_val;

    // Implementation
    auto5D104AE6_val = FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Category")));
    if (auto5D104AE6_val == (libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
        return libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;
    }
    else if (auto5D104AE6_val == (libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)) {
        return libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg;
    }
    else {
        return libEA0820A1_ge_StoryResearchCategory_ResearchCategoryNone;
    }
}

string libEA0820A1_gf_StoryResearchIcon (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateImagePath(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)]);
}

text libEA0820A1_gf_StoryResearchTooltip (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Tooltip"));
}

text libEA0820A1_gf_StoryResearchConfirmationText (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Confirmation"));
}

string libEA0820A1_gf_StoryResearchMovie (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateMoviePath(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)]);
}

int libEA0820A1_gf_StoryResearchLevelRequirement (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Required Level")));
}

int libEA0820A1_gf_StoryResearchMissionObject (int lp_missionID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchMissionObjects[(lp_missionID)][0];
}

int libEA0820A1_gf_StoryResearchMissionProgress (int lp_missionID, int lp_researchCat) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_ResearchMissionProgress[(lp_missionID)][(lp_researchCat)];
}

bool libEA0820A1_gf_StoryResearchStateCheck (int lp_researchID, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gv_tSX_ResearchState[(lp_researchID)] == (lp_state));
}

int libEA0820A1_gf_StoryResearchPoints (int lp_categeory) {
    // Variable Declarations
    int lv_indexMission;
    int lv_points;

    // Automatic Variable Declarations
    int auto33FAFF36_val;
    int auto86F68746_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto33FAFF36_val = lp_categeory;
    if (auto33FAFF36_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_points = FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchStartPointProt", "Value"));
    }
    else if (auto33FAFF36_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_points = FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchStartPointZerg", "Value"));
    }
    else {
    }
    auto86F68746_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto86F68746_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto86F68746_i];
        if ((libEA0820A1_gf_MissionStatusCheck(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed) == true)) {
            lv_points += (libEA0820A1_gf_StoryResearchMissionProgress(lv_indexMission, lp_categeory) * 1);
            lv_points += libEA0820A1_gf_TS_MissionRewardResearchPoints(lv_indexMission, lp_categeory);
        }

        auto86F68746_i = auto86F68746_i + 1;
    }
    lv_points += libCamp_gv_tSX_DebugResearchLevel[(lp_categeory)];
    return lv_points;
}

int libEA0820A1_gf_StoryResearchPointsOld (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_ResearchPointsOld[(lp_categeory)];
}

int libEA0820A1_gf_StoryResearchPointsConverted (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_ResearchPointsConverted[(lp_categeory)];
}

int libEA0820A1_gf_StoryResearchPointCap (int lp_categeory) {
    // Automatic Variable Declarations
    int auto94AB7D3A_val;

    // Implementation
    auto94AB7D3A_val = lp_categeory;
    if (auto94AB7D3A_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointCapProt", "Value"));
    }
    else if (auto94AB7D3A_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointCapZerg", "Value"));
    }
    else {
    }
    return 0;
}

int libEA0820A1_gf_StoryResearchCreditsPerPoint () {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue("LabResearchConstants|ResearchPointToCredits", "Value"));
}

int libEA0820A1_gf_TS_StoryResearchUIItem (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchUIItem[(lp_researchID)];
}

string libEA0820A1_gf_TS_StoryResearchRewardUpgrade1 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateUpgrade(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Upgrade 1"));
}

string libEA0820A1_gf_TS_StoryResearchRewardUpgrade2 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateUpgrade(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Upgrade 2"));
}

abilcmd libEA0820A1_gf_TS_StoryResearchRewardAC1 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateAbilCmd(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Ability Command 1"));
}

abilcmd libEA0820A1_gf_TS_StoryResearchRewardAC2 (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateAbilCmd(libEA0820A1_gv_tS_ResearchConvoID[(lp_researchID)], ("Ability Command 2"));
}

int libEA0820A1_gf_TS_StoryResearchMissionProgressCurrent (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(lp_categeory)];
}

int libEA0820A1_gf_TS_StoryResearchMissionObject (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchMissionObjects[(lp_mission)][lp_index];
}

int libEA0820A1_gf_TS_StoryResearchMissionObjectCount (int lp_mission, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchMissionObjectCount[(lp_mission)][lp_index];
}

int libEA0820A1_gf_TS_StoryResearchMissionMainObjectiveReward (int lp_mission, int lp_category) {
    // Variable Declarations
    int lv_index;
    int lv_point;

    // Automatic Variable Declarations
    int auto22DF0774_val;
    int auto4723B7CC_val;
    int autoBAE2AC57_val;
    int auto5BE3EBA4_val;
    int autoAC22FB34_val;

    // Variable Initialization

    // Implementation
    auto22DF0774_val = lp_mission;
    if (auto22DF0774_val == libEA0820A1_ge_MapID_MapTZeratul01) {
        auto4723B7CC_val = lp_category;
        if (auto4723B7CC_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
            return 3;
        }
        else {
        }
    }
    else if (auto22DF0774_val == libEA0820A1_ge_MapID_MapTZeratul02) {
        autoBAE2AC57_val = lp_category;
        if (autoBAE2AC57_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 3;
        }
        else {
        }
    }
    else if (auto22DF0774_val == libEA0820A1_ge_MapID_MapTZeratul03) {
        auto5BE3EBA4_val = lp_category;
        if (auto5BE3EBA4_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 4;
        }
        else {
        }
    }
    else if (auto22DF0774_val == libEA0820A1_ge_MapID_MapTZeratul04) {
        autoAC22FB34_val = lp_category;
        if (autoAC22FB34_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
            return 3;
        }
        else {
        }
    }
    else {
    }
    return 0;
}

int libEA0820A1_gf_TS_StoryResearchMissionOpportunities (int lp_mission, int lp_category) {
    // Variable Declarations
    int lv_index;
    int lv_point;

    // Automatic Variable Declarations
    const int auto7A862705_ae = 2;
    const int auto7A862705_ai = 1;

    // Variable Initialization

    // Implementation
    lv_point = 0;
    lv_index = 1;
    for ( ; ( (auto7A862705_ai >= 0 && lv_index <= auto7A862705_ae) || (auto7A862705_ai < 0 && lv_index >= auto7A862705_ae) ) ; lv_index += auto7A862705_ai ) {
        lv_point += (libEA0820A1_gf_StoryResearchObjectReward(libEA0820A1_gf_TS_StoryResearchMissionObject(lp_mission, lv_index), lp_category) * libEA0820A1_gf_TS_StoryResearchMissionObjectCount(lp_mission, lv_index));
    }
    lv_point += libEA0820A1_gf_TS_StoryResearchMissionMainObjectiveReward(lp_mission, lp_category);
    return lv_point;
}

int libEA0820A1_gf_TS_StoryResearchTier (int lp_research) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gf_StoryResearchLevelRequirement(lp_research) / libEA0820A1_gv_tSC_RESEARCH_TIERLEVEL);
}

int libEA0820A1_gf_TS_StoryResearchSlot (int lp_research) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_ResearchSlot[(lp_research)];
}

int libEA0820A1_gf_TS_StoryResearchTheOtherOfTheSameTier (int lp_research) {
    // Variable Declarations
    int lv_catIndex;
    int lv_tierIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_catIndex = (libEA0820A1_gf_StoryResearchCategory(lp_research));
    lv_tierIndex = libEA0820A1_gf_TS_StoryResearchTier(lp_research);
    lv_slotIndex = libEA0820A1_gf_TS_StoryResearchSlot(lp_research);
    return libEA0820A1_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][(3 - lv_slotIndex)];
}

int libEA0820A1_gf_StoryResearchObjectReward (int lp_researchObject, int lp_category) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto9C4F88E2_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto9C4F88E2_val = lp_category;
    if (auto9C4F88E2_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_name = "RewardProtoss";
    }
    else if (auto9C4F88E2_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_name = "RewardZerg";
    }
    else {
    }
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gv_tS_ResearchObjConvoID[(lp_researchObject)], lv_name));
}

text libEA0820A1_gf_StoryResearchSupplementTextForObjective (int lp_researchObject, int lp_style, int lp_total, int lp_progress) {
    // Variable Declarations
    int lv_category;
    text lv_text;
    int lv_reward;

    // Automatic Variable Declarations
    int autoDEDCA636_val;
    int auto1184F28C_val;

    // Variable Initialization
    lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;

    // Implementation
    lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;
    lv_reward = libEA0820A1_gf_StoryResearchObjectReward(lp_researchObject, lv_category);
    if ((lv_reward == 0)) {
        lv_category = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg;
        lv_reward = libEA0820A1_gf_StoryResearchObjectReward(lp_researchObject, lv_category);
    }

    autoDEDCA636_val = lp_style;
    if (autoDEDCA636_val == libEA0820A1_ge_StoryResearchObjectiveTextStyle_Multipart) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_EA0820A1_892C4913") + IntToText((lp_progress * lv_reward)) + StringExternal("Param/Value/lib_EA0820A1_B95F8502") + IntToText((lp_total * lv_reward)) + StringExternal("Param/Value/lib_EA0820A1_15226409"));
    }
    else if (autoDEDCA636_val == libEA0820A1_ge_StoryResearchObjectiveTextStyle_Lumpsum) {
        lv_text = (lv_text);
    }
    else {
    }
    auto1184F28C_val = lv_category;
    if (auto1184F28C_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_EA0820A1_1E23B9B2"));
    }
    else if (auto1184F28C_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
        lv_text = (lv_text + StringExternal("Param/Value/lib_EA0820A1_B0BB02F6"));
    }
    else {
    }
    return lv_text;
}

void libEA0820A1_gf_TS_InitializeResearchDataSingle (int lp_iD, string lp_convoID) {
    // Variable Declarations
    int lv_researchIndex;
    int lv_catIndex;
    int lv_tierIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    const int autoBE44459F_ae = 2;
    const int autoBE44459F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_researchIndex = (lp_iD);
    libEA0820A1_gv_tS_ResearchID[lv_researchIndex] = lp_iD;
    libEA0820A1_gv_tS_ResearchConvoID[lv_researchIndex] = lp_convoID;
    libEA0820A1_gv_tS_ResearchUIItem[lv_researchIndex] = c_invalidResearchItemId;
    lv_catIndex = (libEA0820A1_gf_StoryResearchCategory(lp_iD));
    lv_tierIndex = libEA0820A1_gf_TS_StoryResearchTier(lp_iD);
    lv_slotIndex = 1;
    for ( ; ( (autoBE44459F_ai >= 0 && lv_slotIndex <= autoBE44459F_ae) || (autoBE44459F_ai < 0 && lv_slotIndex >= autoBE44459F_ae) ) ; lv_slotIndex += autoBE44459F_ai ) {
        if ((libEA0820A1_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][lv_slotIndex] == libEA0820A1_ge_StoryResearchID_ResearchNone)) {
            libEA0820A1_gv_tS_ResearchIDInUIStructure[lv_catIndex][lv_tierIndex][lv_slotIndex] = lp_iD;
            libEA0820A1_gv_tS_ResearchSlot[lv_researchIndex] = lv_slotIndex;
            break;
        }

    }
}

void libEA0820A1_gf_TS_InitializeResearchData () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int autoE4D6AF62_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    libEA0820A1_gf_TS_InitializeResearchObjData();
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP11UltraCapacitors, "LabResearch|ResearchP1_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP12VanadiumPlating, "LabResearch|ResearchP1_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP21OrbitalDepots, "LabResearch|ResearchP2_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP22MicroFiltering, "LabResearch|ResearchP2_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP31AutomatedRefinery, "LabResearch|ResearchP3_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP32CommandCenterReactor, "LabResearch|ResearchP3_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP41Raven, "LabResearch|ResearchP4_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP42ScienceVessel, "LabResearch|ResearchP4_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP51TechReactor, "LabResearch|ResearchP5_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchP52OrbitalStrike, "LabResearch|ResearchP5_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ11ShrikeTurret, "LabResearch|ResearchZ1_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ12FortifiedBunker, "LabResearch|ResearchZ1_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ21PlanetaryFortress, "LabResearch|ResearchZ2_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ22PerditionTurret, "LabResearch|ResearchZ2_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ31Predator, "LabResearch|ResearchZ3_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ32Hercules, "LabResearch|ResearchZ3_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ41CellularReactors, "LabResearch|ResearchZ4_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ42RegenerativeBioSteel, "LabResearch|ResearchZ4_2");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ51HiveMindEmulator, "LabResearch|ResearchZ5_1");
    libEA0820A1_gf_TS_InitializeResearchDataSingle(libEA0820A1_ge_StoryResearchID_ResearchZ52SigmaProjector, "LabResearch|ResearchZ5_2");
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHanson01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindChrysalisDNA;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHanson01)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHanson02)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheInfestors;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHanson02)][1] = 2;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHorner01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindDefilerBoneSamples;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHorner01)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHorner02)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelicContraband;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHorner02)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHorner03)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindDevourerTissueSamples;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHorner03)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTValerian01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectDestroytheSporeCannons;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTValerian01)][1] = 4;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTychus01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTychus01)][1] = 4;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTychus02)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTychus02)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTychus04)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTychus04)][1] = 4;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTosh02)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTosh02)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHorner05S)][2] = libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHorner05S)][2] = 4;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTychus05)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectRescuePrisoners;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTychus05)][1] = 4;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTosh01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTosh01)][1] = 1;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTTychus03)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTTychus03)][1] = 1;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTHorner05S)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTHorner05S)][1] = 1;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTZeratul01)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectDestroyHatcheries;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTZeratul01)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTZeratul02)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTZeratul02)][1] = 3;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTZeratul03)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectPowertheObelisks;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTZeratul03)][1] = 2;
    libEA0820A1_gv_tS_ResearchMissionObjects[(libEA0820A1_ge_MapID_MapTZeratul04)][1] = libEA0820A1_ge_StoryResearchObject_ResearchObjectProtecttheArchive;
    libEA0820A1_gv_tS_ResearchMissionObjectCount[(libEA0820A1_ge_MapID_MapTZeratul04)][1] = 1;
    autoE4D6AF62_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoE4D6AF62_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoE4D6AF62_i];
        libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
        libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
        autoE4D6AF62_i = autoE4D6AF62_i + 1;
    }
}

void libEA0820A1_gf_TS_InitializeResearchObjDataSingle (int lp_iD, string lp_convoID) {
    // Variable Declarations
    int lv_researchObjIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_researchObjIndex = (lp_iD);
    libEA0820A1_gv_tS_ResearchObjID[lv_researchObjIndex] = lp_iD;
    libEA0820A1_gv_tS_ResearchObjConvoID[lv_researchObjIndex] = lp_convoID;
}

void libEA0820A1_gf_TS_InitializeResearchObjData () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindChrysalisDNA, "LabResearchObject|FindChrysalisDNA");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheInfestors, "LabResearchObject|KillInfestors");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectDestroyHatcheries, "LabResearchObject|DestroyHatcheries");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindDefilerBoneSamples, "LabResearchObject|FindDefilerBoneSamples");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindDevourerTissueSamples, "LabResearchObject|FindCerebrateTissueSamples");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectDestroytheSporeCannons, "LabResearchObject|KillSporeCannons");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectDestroythePreserverPrisons, "LabResearchObject|DestroyPreserverPrisons");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectOvermindTendrils, "LabResearchObject|OvermindTendrils");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectKill1500Zerg, "LabResearchObject|Kill1500Zerg");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectKilltheBrutalisk, "LabResearchObject|KillBrutalisk");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelics, "LabResearchObject|FindProtossRelic");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindProtossRelicContraband, "LabResearchObject|FindProtossRelicContraband");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectPowertheAbandonedStructure, "LabResearchObject|PowerupAbandonedStructure");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectPowertheObelisks, "LabResearchObject|PowerupAncientObelisk");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectFindtheProtossPsiElements, "LabResearchObject|FindProtossPsiElements");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectVisittheShrines, "LabResearchObject|VisitEachShrine");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectProtecttheArchive, "LabResearchObject|ProtectArchive");
    libEA0820A1_gf_TS_InitializeResearchObjDataSingle(libEA0820A1_ge_StoryResearchObject_ResearchObjectRescuePrisoners, "LabResearchObject|ReleasePrisoners");
}

void libEA0820A1_gf_TS_ResetResearchData () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto3ED2EF60_i;
    int autoECF2955F_i;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto3ED2EF60_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto3ED2EF60_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto3ED2EF60_i];
        autoECF2955F_i = libCamp_gv_TSC_MISSION_FIRST;
        while (autoECF2955F_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[autoECF2955F_i];
            libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexResearch)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
            libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexResearch)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
            autoECF2955F_i = autoECF2955F_i + 1;
        }
        libEA0820A1_gv_tSX_ResearchState[(lv_indexResearch)] = (libEA0820A1_ge_StoryResearchState_ResearchStateAvailable);
        auto3ED2EF60_i = auto3ED2EF60_i + 1;
    }
    libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = 0;
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = 0;
}

void libEA0820A1_gf_TS_ApplyResearchesTech (int lp_player) {
    // Variable Declarations
    int lv_indexResearch;
    int lv_level;
    bool lv_allowDisallow;

    // Automatic Variable Declarations
    int auto6BE05D4E_i;
    unitgroup auto70EB54F1_g;
    int auto70EB54F1_u;
    unit auto70EB54F1_var;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_allowDisallow = true;

    // Implementation
    auto6BE05D4E_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto6BE05D4E_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto6BE05D4E_i];
        if ((libEA0820A1_gf_StoryResearchStateCheck(lv_indexResearch, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            lv_level = 1;
            lv_allowDisallow = true;
        }
        else {
            lv_level = 0;
            lv_allowDisallow = false;
        }
        if ((libEA0820A1_gf_TS_StoryResearchRewardUpgrade1(lv_indexResearch) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libEA0820A1_gf_TS_StoryResearchRewardUpgrade1(lv_indexResearch), lv_level);
        }

        if ((libEA0820A1_gf_TS_StoryResearchRewardUpgrade2(lv_indexResearch) != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libEA0820A1_gf_TS_StoryResearchRewardUpgrade2(lv_indexResearch), lv_level);
        }

        if ((libEA0820A1_gf_TS_StoryResearchRewardAC1(lv_indexResearch) != null)) {
            TechTreeAbilityAllow(lp_player, libEA0820A1_gf_TS_StoryResearchRewardAC1(lv_indexResearch), lv_allowDisallow);
        }

        if ((libEA0820A1_gf_TS_StoryResearchRewardAC2(lv_indexResearch) != null)) {
            TechTreeAbilityAllow(lp_player, libEA0820A1_gf_TS_StoryResearchRewardAC2(lv_indexResearch), lv_allowDisallow);
        }

        auto6BE05D4E_i = auto6BE05D4E_i + 1;
    }
    libEA0820A1_gf_TS_UpdateTechAddons(lp_player);
    libEA0820A1_gf_TS_UpdateTechUpgrades(lp_player);
    libEA0820A1_gf_TS_UpdateResearchUnitHelpPanel(lp_player);
    if ((TechTreeUpgradeCount(lp_player, "CellularReactors", c_techCountQueuedOrBetter) == 1)) {
        auto70EB54F1_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto70EB54F1_u = UnitGroupCount(auto70EB54F1_g, c_unitCountAll);
        for (;; auto70EB54F1_u -= 1) {
            auto70EB54F1_var = UnitGroupUnitFromEnd(auto70EB54F1_g, auto70EB54F1_u);
            if (auto70EB54F1_var == null) { break; }
            UnitSetPropertyFixed(auto70EB54F1_var, c_unitPropEnergy, (UnitGetPropertyFixed(auto70EB54F1_var, c_unitPropEnergy, c_unitPropCurrent) + 100.0));
        }
    }

}

void libEA0820A1_gf_TS_UpdateResearchUnitHelpPanel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP41Raven, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Raven", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP42ScienceVessel, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("ScienceVessel", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP51TechReactor, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("TechReactor", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ21PlanetaryFortress, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("PlanetaryFortress", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ22PerditionTurret, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("PerditionTurret", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ31Predator, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Predator", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ32Hercules, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Hercules", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ51HiveMindEmulator, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("HiveMindEmulator", true, lp_player);
    }

    if ((libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ52SigmaProjector, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("PsiDisruptor", true, lp_player);
    }

}

void libEA0820A1_gf_AddProgressToStoryResearch (int lp_researchObject, int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] += (lp_count * libEA0820A1_gf_StoryResearchObjectReward(lp_researchObject, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss));
    libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] += (lp_count * libEA0820A1_gf_StoryResearchObjectReward(lp_researchObject, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg));
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_4F11063B") + IntToText(libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)])), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_8B95BA7B") + IntToText(libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg))), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_9BE8B381") + IntToText(libEA0820A1_gv_tS_ResearchMissionProgressCurrent[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)])), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_D0FD035B") + IntToText(libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss))), false);
    if ((libEA0820A1_gf_TS_StoryResearchMissionProgressCurrent(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) > libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss))) {
        libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_StoryResearchMissionProgressCurrent(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_73150E6D") + IntToText(libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss))), false);
    }

    if ((libEA0820A1_gf_TS_StoryResearchMissionProgressCurrent(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) > libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg))) {
        libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_StoryResearchMissionProgressCurrent(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_6A2DC779") + IntToText(libEA0820A1_gf_StoryResearchMissionProgress(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg))), false);
    }

}

void libEA0820A1_gf_SetStoryResearchPurchased (int lp_researchID) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_ResearchState[(lp_researchID)] = libEA0820A1_ge_StoryResearchState_ResearchStatePurchased;
}

void libEA0820A1_gf_SetStoryResearchPointsConverted (int lp_category, int lp_points) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_ResearchPointsConverted[(lp_category)] = lp_points;
}

void libEA0820A1_gf_SetStoryResearchPointsOld (int lp_category, int lp_points) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_ResearchPointsOld[(lp_category)] = lp_points;
}

int libEA0820A1_gf_TS_StoryResearchPointsOld (int lp_categeory) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_ResearchUIOldPoints[(lp_categeory)];
}

int libEA0820A1_gf_TS_ResearchUIResearchID (int lp_researchItem) {
    // Variable Declarations
    int lv_indexResearch;

    // Automatic Variable Declarations
    int auto18A42295_i;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    auto18A42295_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto18A42295_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto18A42295_i];
        if ((libEA0820A1_gf_TS_StoryResearchUIItem(lv_indexResearch) == lp_researchItem)) {
            return lv_indexResearch;
        }

        auto18A42295_i = auto18A42295_i + 1;
    }
    return libEA0820A1_ge_StoryResearchID_ResearchNone;
}

void libEA0820A1_gf_DisplayResearchPanel (trigger lp_exitCallback) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_ResearchUIExitCallback = lp_exitCallback;
    libEA0820A1_gv_tS_ResearchUIExitEnabled = false;
    libEA0820A1_gf_TS_ResearchUICreate();
    ResearchCategorySetCurrentLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)]);
    ResearchCategorySetCurrentLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)]);
    ResearchCategorySetLastLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)]);
    ResearchCategorySetLastLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)]);
    libEA0820A1_gf_TS_ResearchUIUpdate();
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_StoryResearchPoints(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_StoryResearchPoints(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
    libEA0820A1_gv_tS_ResearchUIExitEnabled = true;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, true);
}

void libEA0820A1_gf_TS_ResearchUICreate () {
    int init_i;
    int init_j;
    int init_k;

    // Variable Declarations
    int lv_categoryIndex;
    text lv_categoryName;
    int lv_indexCategory;
    int lv_tierIndex;
    int lv_indexResearch;
    int lv_slotIndex;
    int[3][6][3] lv_uIItem;

    // Automatic Variable Declarations
    const int autoAB7ADD0C_ae = 2;
    const int autoAB7ADD0C_ai = 1;
    int autoBF402F01_val;
    const int autoEFBD2DB8_ae = 5;
    const int autoEFBD2DB8_ai = 1;
    int autoF51EEC34_i;

    // Variable Initialization
    lv_indexCategory = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 2; init_k += 1) {
                lv_uIItem[init_i][init_j][init_k] = c_invalidResearchItemId;
            }
        }
    }

    // Implementation
    if ((libEA0820A1_gv_tS_ResearchUICreated == true)) {
        return ;
    }

    libEA0820A1_gv_tS_ResearchUICreated = true;
    lv_categoryIndex = 1;
    for ( ; ( (autoAB7ADD0C_ai >= 0 && lv_categoryIndex <= autoAB7ADD0C_ae) || (autoAB7ADD0C_ai < 0 && lv_categoryIndex >= autoAB7ADD0C_ae) ) ; lv_categoryIndex += autoAB7ADD0C_ai ) {
        autoBF402F01_val = lv_categoryIndex;
        if (autoBF402F01_val == (libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
            lv_indexCategory = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss;
            lv_categoryName = StringExternal("Param/Value/lib_EA0820A1_5EAC8E05");
        }
        else if (autoBF402F01_val == (libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)) {
            lv_indexCategory = libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg;
            lv_categoryName = StringExternal("Param/Value/lib_EA0820A1_B1E84A2A");
        }
        else {
        }
        ResearchCategoryCreate(PlayerGroupAll(), lv_categoryIndex);
        libEA0820A1_gv_tS_ResearchUICategories[lv_categoryIndex] = ResearchCategoryLastCreated();
        ResearchCategorySetNameText(ResearchCategoryLastCreated(), lv_categoryName);
        lv_tierIndex = 1;
        for ( ; ( (autoEFBD2DB8_ai >= 0 && lv_tierIndex <= autoEFBD2DB8_ae) || (autoEFBD2DB8_ai < 0 && lv_tierIndex >= autoEFBD2DB8_ae) ) ; lv_tierIndex += autoEFBD2DB8_ai ) {
            ResearchTierCreate(PlayerGroupAll(), ResearchCategoryLastCreated(), lv_tierIndex);
            libEA0820A1_gv_tS_ResearchUITiers[lv_categoryIndex][lv_tierIndex] = ResearchTierLastCreated();
            ResearchTierSetMaxPurchasesAllowed(ResearchTierLastCreated(), 1);
            ResearchTierSetRequiredLevel(ResearchTierLastCreated(), (lv_tierIndex * libEA0820A1_gv_tSC_RESEARCH_TIERLEVEL));
        }
    }
    autoF51EEC34_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoF51EEC34_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoF51EEC34_i];
        lv_categoryIndex = (libEA0820A1_gf_StoryResearchCategory(lv_indexResearch));
        lv_tierIndex = libEA0820A1_gf_TS_StoryResearchTier(lv_indexResearch);
        lv_slotIndex = libEA0820A1_gf_TS_StoryResearchSlot(lv_indexResearch);
        ResearchItemCreate(PlayerGroupAll(), libEA0820A1_gv_tS_ResearchUITiers[lv_categoryIndex][lv_tierIndex], lv_slotIndex);
        libEA0820A1_gv_tS_ResearchUIItem[(lv_indexResearch)] = ResearchItemLastCreated();
        lv_uIItem[lv_categoryIndex][lv_tierIndex][lv_slotIndex] = ResearchItemLastCreated();
        ResearchItemSetNameText(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchName(lv_indexResearch));
        ResearchItemSetDescriptionText(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchDescription(lv_indexResearch));
        ResearchItemSetIconFilePath(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchIcon(lv_indexResearch));
        ResearchItemSetMovieFilePath(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchMovie(lv_indexResearch));
        ResearchItemSetTooltipText(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchTooltip(lv_indexResearch));
        ResearchItemSetConfirmationText(ResearchItemLastCreated(), libEA0820A1_gf_StoryResearchConfirmationText(lv_indexResearch));
        ResearchItemSetState(ResearchItemLastCreated(), c_researchItemStateEnabled);
        autoF51EEC34_i = autoF51EEC34_i + 1;
    }
}

void libEA0820A1_gf_TS_ResearchUIUpdate () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;
    text lv_tip;

    // Automatic Variable Declarations
    int auto5386AA7E_i;
    int autoAD18F89A_i;
    int auto233CB30E_val;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    libEA0820A1_gf_TS_ResearchUICreate();
    ResearchCategorySetCurrentLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], MinI(libEA0820A1_gf_StoryResearchPointCap(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss), libEA0820A1_gf_StoryResearchPoints(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)));
    ResearchCategorySetCurrentLevel(libEA0820A1_gv_tS_ResearchUICategories[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], MinI(libEA0820A1_gf_StoryResearchPointCap(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg), libEA0820A1_gf_StoryResearchPoints(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)));
    auto5386AA7E_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto5386AA7E_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto5386AA7E_i];
        ResearchItemSetTooltipText(libEA0820A1_gv_tS_ResearchUIItem[(lv_indexResearch)], libEA0820A1_gf_StoryResearchTooltip(lv_indexResearch));
        ResearchItemSetState(libEA0820A1_gf_TS_StoryResearchUIItem(lv_indexResearch), c_researchItemStateEnabled);
        auto5386AA7E_i = auto5386AA7E_i + 1;
    }
    autoAD18F89A_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoAD18F89A_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoAD18F89A_i];
        if ((libEA0820A1_gf_StoryResearchStateCheck(lv_indexResearch, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            ResearchItemSetState(libEA0820A1_gf_TS_StoryResearchUIItem(lv_indexResearch), c_researchItemStatePurchased);
            lv_otherResearch = libEA0820A1_gf_TS_StoryResearchTheOtherOfTheSameTier(lv_indexResearch);
            ResearchItemSetState(libEA0820A1_gf_TS_StoryResearchUIItem(lv_otherResearch), c_researchItemStateDisabled);
            auto233CB30E_val = libEA0820A1_gf_StoryResearchCategory(lv_otherResearch);
            if (auto233CB30E_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
                lv_tip = (StringExternal("Param/Value/lib_EA0820A1_3A0C8CB9") + libEA0820A1_gf_StoryResearchName(lv_otherResearch) + StringExternal("Param/Value/lib_EA0820A1_0E652248"));
                libEA0820A1_gf_TS_ResearchUIClearProtossConfirmationText();
            }
            else if (auto233CB30E_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
                lv_tip = (StringExternal("Param/Value/lib_EA0820A1_1EF97A4A") + libEA0820A1_gf_StoryResearchName(lv_otherResearch) + StringExternal("Param/Value/lib_EA0820A1_CDD3FBDF"));
                libEA0820A1_gf_TS_ResearchUIClearZergConfirmationText();
            }
            else {
            }
            ResearchItemSetTooltipText(libEA0820A1_gv_tS_ResearchUIItem[(lv_otherResearch)], lv_tip);
        }

        autoAD18F89A_i = autoAD18F89A_i + 1;
    }
}

void libEA0820A1_gf_TS_ResearchUIClearProtossConfirmationText () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;

    // Automatic Variable Declarations
    int auto49A1523C_i;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    auto49A1523C_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto49A1523C_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto49A1523C_i];
        if ((libEA0820A1_gf_StoryResearchCategory(lv_indexResearch) == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)) {
            ResearchItemSetConfirmationText(libEA0820A1_gf_TS_StoryResearchUIItem(lv_indexResearch), StringToText(""));
        }

        auto49A1523C_i = auto49A1523C_i + 1;
    }
}

void libEA0820A1_gf_TS_ResearchUIClearZergConfirmationText () {
    // Variable Declarations
    int lv_indexResearch;
    int lv_otherResearch;

    // Automatic Variable Declarations
    int auto108B5CB9_i;

    // Variable Initialization
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_otherResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Implementation
    auto108B5CB9_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto108B5CB9_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto108B5CB9_i];
        if ((libEA0820A1_gf_StoryResearchCategory(lv_indexResearch) == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)) {
            ResearchItemSetConfirmationText(libEA0820A1_gf_TS_StoryResearchUIItem(lv_indexResearch), StringToText(""));
        }

        auto108B5CB9_i = auto108B5CB9_i + 1;
    }
}

void libEA0820A1_gf_TS_RoomChangePanelCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gv_tS_RoomChangeDialog == c_invalidDialogId)) {
        DialogCreate(500, 50, c_anchorBottom, 0, 0, false);
        libEA0820A1_gv_tS_RoomChangeDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libEA0820A1_gv_tS_RoomChangeDialogBorder = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), true, PlayerGroupAll());
        DialogCreate(1600, 400, c_anchorBottom, 0, 70, false);
        libEA0820A1_gv_tS_RoomChangeDialogSubtitle = DialogLastCreated();
        DialogSetTransparency(DialogLastCreated(), 100.0);
    }

}

void libEA0820A1_gf_AddRoomChangePanelButton (text lp_roomName, trigger lp_clickCallback, trigger lp_updateCallback, int lp_custonData, text lp_tip) {
    // Variable Declarations
    const int lv_buttonX = 220;
    const int lv_buttonY = 42;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libEA0820A1_gf_TS_RoomChangePanelCreate();
    DialogControlCreate(libEA0820A1_gv_tS_RoomChangeDialog, c_triggerControlTypeButton);
    libEA0820A1_gv_tS_RoomChangeButtonCount += 1;
    libEA0820A1_gv_tS_RoomChangeButtons[libEA0820A1_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeButton" + IntToString(libEA0820A1_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_roomName, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lp_tip, PlayerGroupAll());
    libEA0820A1_gv_tS_RoomChangeButtonCallbackClick[libEA0820A1_gv_tS_RoomChangeButtonCount] = lp_clickCallback;
    libEA0820A1_gv_tS_RoomChangeButtonCallbackUpdate[libEA0820A1_gv_tS_RoomChangeButtonCount] = lp_updateCallback;
    libEA0820A1_gv_tS_RoomChangeButtonCustomData[libEA0820A1_gv_tS_RoomChangeButtonCount] = lp_custonData;
    DialogControlCreate(libEA0820A1_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libEA0820A1_gv_tS_RoomChangeButtonBG[libEA0820A1_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libEA0820A1_gv_tS_RoomChangeButtons[libEA0820A1_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(libEA0820A1_gv_tS_RoomChangeDialog, c_triggerControlTypeLabel);
    libEA0820A1_gv_tS_RoomChangeButtonText[libEA0820A1_gv_tS_RoomChangeButtonCount] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHandle(DialogControlLastCreated(), ("WoL_RoomChangeLabel" + IntToString(libEA0820A1_gv_tS_RoomChangeButtonCount)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_roomName, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonX, lv_buttonY);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libEA0820A1_gv_tS_RoomChangeButtons[libEA0820A1_gv_tS_RoomChangeButtonCount], c_anchorCenter, 0, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libEA0820A1_gf_UpdateRoomChangePanel();
}

int libEA0820A1_gf_LastAddRoomChangePanelButton () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_RoomChangeButtonCount;
}

int libEA0820A1_gf_RoomChangePanelButtonCount () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_RoomChangeButtonCount;
}

int libEA0820A1_gf_RoomChangePanelCurrentButton () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_RoomChangeButtonCurrent;
}

int libEA0820A1_gf_RoomChangePanelButtonCustomData (int lp_buttonId) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_RoomChangeButtonCustomData[lp_buttonId];
}

bool libEA0820A1_gf_RoomChangePanelIsVisible () {
    // Automatic Variable Declarations
    // Implementation
    return ((libEA0820A1_gv_tS_RoomChangeDialog != c_invalidDialogId) && DialogIsVisible(libEA0820A1_gv_tS_RoomChangeDialog, 1));
}

void libEA0820A1_gf_HideRoomChangePanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_RoomChangePanelCreate();
    if ((lp_showHide == true)) {
        if ((libEA0820A1_gv_tS_RoomChangeButtonCount > 0)) {
            DialogSetVisible(libEA0820A1_gv_tS_RoomChangeDialog, PlayerGroupAll(), true);
            DialogSetVisible(libEA0820A1_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
            DialogSetSubtitlePositionOverride(libEA0820A1_gv_tS_RoomChangeDialogSubtitle);
        }

    }
    else {
        DialogSetVisible(libEA0820A1_gv_tS_RoomChangeDialog, PlayerGroupAll(), false);
        DialogSetVisible(libEA0820A1_gv_tS_RoomChangeDialogSubtitle, PlayerGroupAll(), false);
        DialogSetSubtitlePositionOverride(c_invalidDialogId);
    }
}

void libEA0820A1_gf_UpdateRoomChangePanel () {
    // Variable Declarations
    int lv_index;
    int lv_sizeX;
    int lv_sizeY;

    // Automatic Variable Declarations
    int autoB04B9CDE_ae;
    const int autoB04B9CDE_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libEA0820A1_gv_tS_RoomChangeButtonCount > 0)) {
        lv_sizeX = 30;
        lv_sizeY = 60;
        autoB04B9CDE_ae = libEA0820A1_gv_tS_RoomChangeButtonCount;
        lv_index = 1;
        for ( ; ( (autoB04B9CDE_ai >= 0 && lv_index <= autoB04B9CDE_ae) || (autoB04B9CDE_ai < 0 && lv_index >= autoB04B9CDE_ae) ) ; lv_index += autoB04B9CDE_ai ) {
            if ((libEA0820A1_gv_tS_RoomChangeButtonCallbackUpdate[lv_index] != null)) {
                libEA0820A1_gv_tS_RoomChangeButtonCurrent = lv_index;
                TriggerExecute(libEA0820A1_gv_tS_RoomChangeButtonCallbackUpdate[lv_index], true, false);
            }

            DialogControlSetPosition(libEA0820A1_gv_tS_RoomChangeButtons[lv_index], PlayerGroupAll(), c_anchorTopLeft, lv_sizeX, 13);
            lv_sizeX += 215;
        }
        lv_sizeX += 36;
        DialogSetSize(libEA0820A1_gv_tS_RoomChangeDialog, lv_sizeX, lv_sizeY);
        DialogControlSetSize(libEA0820A1_gv_tS_RoomChangeDialogBorder, PlayerGroupAll(), lv_sizeX, lv_sizeY);
        DialogSetPosition(libEA0820A1_gv_tS_RoomChangeDialog, c_anchorBottom, 0, 0);
    }

}

void libEA0820A1_gf_DisableRoomChangePanelButton (bool lp_enableDisable, int lp_buttonId) {
    // Automatic Variable Declarations
    // Deprecated
    libEA0820A1_gf_SetRoomChangePanelButtonState(lp_buttonId, libEA0820A1_ge_RoomPanelButtonState_Enable);
}

void libEA0820A1_gf_SetRoomChangePanelButtonState (int lp_buttonId, int lp_state) {
    // Automatic Variable Declarations
    int auto7B1F612D_val;

    // Implementation
    if ((lp_buttonId > libEA0820A1_gv_tS_RoomChangeButtonCount)) {
        return ;
    }

    auto7B1F612D_val = lp_state;
    if (auto7B1F612D_val == libEA0820A1_ge_RoomPanelButtonState_Enable) {
        DialogControlSetEnabled(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto7B1F612D_val == libEA0820A1_ge_RoomPanelButtonState_Locked) {
        DialogControlSetEnabled(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), false);
    }
    else if (auto7B1F612D_val == libEA0820A1_ge_RoomPanelButtonState_Disable) {
        DialogControlSetEnabled(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], PlayerGroupAll(), false);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonBG[lp_buttonId], PlayerGroupAll(), true);
        DialogControlSetVisible(libEA0820A1_gv_tS_RoomChangeButtonText[lp_buttonId], PlayerGroupAll(), true);
    }
    else {
    }
}

trigger auto_libEA0820A1_gf_FlashRoomChangePanelButton_Trigger = null;
int auto_libEA0820A1_gf_FlashRoomChangePanelButton_lp_buttonId;

void libEA0820A1_gf_FlashRoomChangePanelButton (int lp_buttonId) {
    auto_libEA0820A1_gf_FlashRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libEA0820A1_gf_FlashRoomChangePanelButton_Trigger == null) {
        auto_libEA0820A1_gf_FlashRoomChangePanelButton_Trigger = TriggerCreate("auto_libEA0820A1_gf_FlashRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libEA0820A1_gf_FlashRoomChangePanelButton_Trigger, false, false);
}

bool auto_libEA0820A1_gf_FlashRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libEA0820A1_gf_FlashRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libEA0820A1_gv_tS_RoomChangeButtonCount) || (libEA0820A1_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libEA0820A1_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == true))) {
        return true;
    }

    libEA0820A1_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = true;
    DialogControlCreate(libEA0820A1_gv_tS_RoomChangeDialog, c_triggerControlTypeImage);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (DialogControlGetWidth(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 18), (DialogControlGetHeight(libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], 1) + 24));
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId], c_anchorCenter, 0, -1);
    while (true) {
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 100.0);
        Wait(0.5, c_timeGame);
        if (((lp_buttonId > libEA0820A1_gv_tS_RoomChangeButtonCount) || (libEA0820A1_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libEA0820A1_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.2, 0.0);
        Wait(0.5, c_timeReal);
        if (((lp_buttonId > libEA0820A1_gv_tS_RoomChangeButtonCount) || (libEA0820A1_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId) || (libEA0820A1_gv_tS_RoomChangeButtonFlashing[lp_buttonId] == false))) {
            DialogControlDestroy(DialogControlLastCreated());
            return true;
        }

    }
    return true;
}

trigger auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_Trigger = null;
int auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

void libEA0820A1_gf_StopFlashingRoomChangePanelButton (int lp_buttonId) {
    auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_lp_buttonId = lp_buttonId;

    if (auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_Trigger == null) {
        auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_Trigger = TriggerCreate("auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_TriggerFunc");
    }

    TriggerExecute(auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_Trigger, false, false);
}

bool auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_buttonId = auto_libEA0820A1_gf_StopFlashingRoomChangePanelButton_lp_buttonId;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_buttonId > libEA0820A1_gv_tS_RoomChangeButtonCount) || (libEA0820A1_gv_tS_RoomChangeDialog == c_invalidDialogId) || (libEA0820A1_gv_tS_RoomChangeButtons[lp_buttonId] == c_invalidDialogControlId))) {
        return true;
    }

    libEA0820A1_gv_tS_RoomChangeButtonFlashing[lp_buttonId] = false;
    return true;
}

void libEA0820A1_gf_TS_InitializeSceneDataSingle (int lp_iD, text lp_name, string lp_image, string lp_icon) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_iD);
    libEA0820A1_gv_tS_SceneIDs[lv_index] = lp_iD;
    libEA0820A1_gv_tS_SceneNames[lv_index] = lp_name;
    libEA0820A1_gv_tS_SceneImages[lv_index] = lp_image;
    libEA0820A1_gv_tS_SceneIcon[lv_index] = lp_icon;
    libEA0820A1_gv_tS_SceneCallback[lv_index] = null;
    libEA0820A1_gv_tSX_ScenePlayed[lv_index] = false;
}

void libEA0820A1_gf_TS_InitializeSceneData () {
    // Automatic Variable Declarations
    // Implementation
}

void libEA0820A1_gf_RegisterSceneCallback (int lp_scene, trigger lp_callback) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_SceneCallback[(lp_scene)] = lp_callback;
}

trigger libEA0820A1_gf_SceneCallback (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_SceneCallback[(lp_scene)];
}

bool libEA0820A1_gf_ScenePlayed (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_ScenePlayed[(lp_scene)];
}

text libEA0820A1_gf_SceneName (int lp_scene) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_SceneNames[(lp_scene)];
}

void libEA0820A1_gf_SetScenePlayed (int lp_scene, bool lp_played) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_ScenePlayed[(lp_scene)] = lp_played;
}

void libEA0820A1_gf_ChangeAmbience (string lp_ambience) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ambience == libEA0820A1_gv_tS_CurrentAmbienceLink)) {
        return ;
    }

    libEA0820A1_gv_tS_CurrentAmbienceLink = lp_ambience;
    if ((lp_ambience != null)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, lp_ambience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_8F040A18") + StringToText(lp_ambience)), false);
    }
    else {
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_A7CD1C6E") + StringExternal("Param/Value/lib_EA0820A1_35FB14FF")), false);
    }
}

int libEA0820A1_gf_StoryState (int lp_stateID) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue(libEA0820A1_gv_tS_StoryStateConvoID[(lp_stateID)]);
}

int libEA0820A1_gf_StoryCredits () {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateGetValue("Credits");
}

int libEA0820A1_gf_TS_CampaignDifficulty () {
    // Automatic Variable Declarations
    int auto98F1C5E3_val;

    // Implementation
    auto98F1C5E3_val = libEA0820A1_gv_tSX_CampaignDifficulty;
    if (auto98F1C5E3_val == 1) {
        return 1;
    }
    else if (auto98F1C5E3_val == 2) {
        return 2;
    }
    else if (auto98F1C5E3_val == 3) {
        return 3;
    }
    else if (auto98F1C5E3_val == 4) {
        return 4;
    }
    else {
    }
    return 2;
}

void libEA0820A1_gf_SetStoryState (int lp_stateID, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue(libEA0820A1_gv_tS_StoryStateConvoID[(lp_stateID)], lp_value);
}

void libEA0820A1_gf_SetStoryCredits (int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue("Credits", lp_value);
}

void libEA0820A1_gf_TS_SetCampaignDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    int auto4B7ADD9E_val;

    // Implementation
    auto4B7ADD9E_val = lp_difficulty;
    if (auto4B7ADD9E_val == 1) {
        libEA0820A1_gv_tSX_CampaignDifficulty = 1;
    }
    else if (auto4B7ADD9E_val == 2) {
        libEA0820A1_gv_tSX_CampaignDifficulty = 2;
    }
    else if (auto4B7ADD9E_val == 3) {
        libEA0820A1_gv_tSX_CampaignDifficulty = 3;
    }
    else if (auto4B7ADD9E_val == 4) {
        libEA0820A1_gv_tSX_CampaignDifficulty = 4;
    }
    else {
    }
}

void libEA0820A1_gf_TS_InitializeStateData () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_InStoryMode = (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTStory01);
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateAchievementDisabled)] = "StoryState|AchievementDisabled";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateArmoryIntroDone)] = "StoryState|ArmoryIntroDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateBattleReportCurrentSelected)] = "StoryState|BattleReportCurrentSel";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateCantinaHornerLinePlayed)] = "StoryState|CantinaHornerLinePlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateCantinaIntroDone)] = "StoryState|CantinaIntroDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateCharInvasionStarted)] = "StoryState|CharInvasionStarted";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateFirstMissionLabResearchObjective)] = "StoryState|FirstMissionLabResearchObjective";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateFirstMissionMercBought)] = "StoryState|FirstMissionMercBought";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateHansonOn)] = "StoryState|HansonOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateHornerOn)] = "StoryState|HornerOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLabHornerLinePlayed)] = "StoryState|LabHornerLinePlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLabIntroDone)] = "StoryState|LabIntroDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateStetmannOn)] = "StoryState|CowinOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateSwannOn)] = "StoryState|SwannOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateToshOn)] = "StoryState|ToshOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTychusOn)] = "StoryState|TychusOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateHanson02DebriefingDone)] = "StoryState|Hanson02DebriefingDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateValerian01DebriefingDone)] = "StoryState|Valerian01DebriefingDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateWarfieldOn)] = "StoryState|WarfieldOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateYabarraOn)] = "StoryState|YbarraOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateHorner05sUnlocked)] = "StoryState|HornerSecretMissionOn";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateResearchCappedNoticeProtoss)] = "StoryState|ResearchCapNoticeProtossDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateResearchCappedNoticeZerg)] = "StoryState|ResearchCapNoticeZergDone";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLastMissionisZeratul02orZeratul03)] = "StoryState|LastMissionZ2OrZ3";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLabArtifactCount)] = "StoryState|LabArtifactCount";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateArmoryOpened)] = "StoryState|ArmoryOpened";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateArmoryVisited)] = "StoryState|ArmoryVisited";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateCantinaOpened)] = "StoryState|CantinaOpened";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateCantinaVisited)] = "StoryState|CantinaVisited";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLabOpened)] = "StoryState|LabOpened";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateLabVisited)] = "StoryState|LabVisited";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipFactoryPlayed)] = "StoryState|TipFactoryPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipStarportPlayed)] = "StoryState|TipStarportPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipVisitLabPlayed)] = "StoryState|TipVisitLabPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipNewProtossResearchPlayed)] = "StoryState|TipNewProtossResearchPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipNewZergResearchPlayed)] = "StoryState|TipNewZergResearchPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTipZergCreepPlayed)] = "StoryState|TipZergCreepPlayed";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateTaurenOutHouseActivated)] = "StoryState|TaurenOutHouseActivated";
    libEA0820A1_gv_tS_StoryStateConvoID[(libEA0820A1_ge_StoryStateID_StoryStateIsStoryTransitionSave)] = "StoryState|IsStoryTransitionSave";
}

void libEA0820A1_gf_TS_UpdateStoryStates () {
    // Automatic Variable Declarations
    // Implementation
    ConversationDataStateSetValue("MissionCompletedCount", libEA0820A1_gf_CountMissions(libEA0820A1_ge_MissionStatus_Completed));
    if (((libEA0820A1_gf_LastSuccessfulMission() == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gf_LastSuccessfulMission() == libEA0820A1_ge_MapID_MapTZeratul03))) {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 1);
    }
    else {
        ConversationDataStateSetValue("StoryState|LastMissionZ2OrZ3", 0);
    }
}

text libEA0820A1_gf_PlanetName (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_PlanetName[(lp_planetID)];
}

int libEA0820A1_gf_PlanetID (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index < libEA0820A1_gv_tSC_PLANET_FIRST) || (lp_index > libEA0820A1_gv_tSC_PLANET_LAST))) {
        return libEA0820A1_ge_PlanetID_PlanetNone;
    }

    return libEA0820A1_gv_tS_PlanetID[lp_index];
}

text libEA0820A1_gf_PlanetSubtitle (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_PlanetSubtitle[(lp_planetID)];
}

int libEA0820A1_gf_PlanetMission (int lp_planetID) {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto53F6916A_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto53F6916A_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto53F6916A_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto53F6916A_i];
        if ((libEA0820A1_gf_MissionPlanet(lv_indexMission) == lp_planetID) && (libEA0820A1_gf_MissionStatusCheck(lv_indexMission, libEA0820A1_ge_MissionStatus_Available) == true)) {
            return lv_indexMission;
        }

        auto53F6916A_i = auto53F6916A_i + 1;
    }
    return libEA0820A1_ge_MapID_MapNone;
}

string libEA0820A1_gf_PlanetLighting (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_PlanetLighting[(lp_planetID)];
}

string libEA0820A1_gf_PlanetIconModel (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_PlanetButtonModel[(lp_planetID)];
}

string libEA0820A1_gf_PlanetModel (int lp_planetID) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_PlanetModel[(lp_planetID)];
}

text libEA0820A1_gf_PlanetMissionResearchOpportunitiesText (int lp_mission, text lp_protossStyle, text lp_zergStyle) {
    // Variable Declarations
    int lv_researchProtoss;
    int lv_researchZerg;
    text lv_researchText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_researchText = StringToText("");
    lv_researchProtoss = libEA0820A1_gf_TS_StoryResearchMissionOpportunities(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
    lv_researchZerg = libEA0820A1_gf_TS_StoryResearchMissionOpportunities(lp_mission, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
    if ((lv_researchProtoss <= 0) && (lv_researchZerg <= 0)) {
        return null;
    }

    if ((lv_researchProtoss > 0)) {
        lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_23E07DB7") + lp_protossStyle + StringExternal("Param/Value/lib_EA0820A1_F4935936") + IntToText(lv_researchProtoss) + StringExternal("Param/Value/lib_EA0820A1_62ACBE57"));
        if ((lv_researchZerg > 0)) {
            lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_7AC097CA"));
        }

    }

    if ((lv_researchZerg > 0)) {
        lv_researchText = (lv_researchText + StringExternal("Param/Value/lib_EA0820A1_12E1187D") + lp_zergStyle + StringExternal("Param/Value/lib_EA0820A1_41E0C1A3") + IntToText(lv_researchZerg) + StringExternal("Param/Value/lib_EA0820A1_9ACD5D6E"));
    }

    return lv_researchText;
}

int libEA0820A1_gf_FirstPlanet () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_PlanetID(libEA0820A1_gv_tSC_PLANET_FIRST);
}

int libEA0820A1_gf_LastPlanet () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_PlanetID(libEA0820A1_gv_tSC_PLANET_LAST);
}

void libEA0820A1_gf_TS_InitializePlanetDataSingle (int lp_planetID, text lp_name, text lp_subtitle, string lp_model, string lp_buttonModel, string lp_lighting, string lp_image, soundlink lp_ambientSound) {
    // Variable Declarations
    int lv_planetIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_planetIndex = (lp_planetID);
    libEA0820A1_gv_tS_PlanetID[lv_planetIndex] = lp_planetID;
    libEA0820A1_gv_tS_PlanetName[lv_planetIndex] = lp_name;
    libEA0820A1_gv_tS_PlanetSubtitle[lv_planetIndex] = lp_subtitle;
    libEA0820A1_gv_tS_PlanetModel[lv_planetIndex] = lp_model;
    libEA0820A1_gv_tS_PlanetButtonModel[lv_planetIndex] = lp_buttonModel;
    libEA0820A1_gv_tS_PlanetLighting[lv_planetIndex] = lp_lighting;
    libEA0820A1_gv_tS_PlanetImage[lv_planetIndex] = lp_image;
    libEA0820A1_gv_tS_PlanetAmbientSound[lv_planetIndex] = lp_ambientSound;
    libEA0820A1_gv_tS_PlanetMission[lv_planetIndex] = libEA0820A1_ge_MapID_MapNone;
}

void libEA0820A1_gf_TS_InitializePlanetData () {
    // Automatic Variable Declarations
    // Implementation
}

int libEA0820A1_gf_AddPlanet (int lp_planet) {
    // Variable Declarations
    int lv_planetIndex;
    int lv_mission;
    int lv_missionIndex;
    int lv_contactIndex;
    int lv_groupEnabled;
    int lv_groupEnabledIndex;
    int lv_researchProtoss;
    int lv_researchZerg;
    text lv_researchText;
    int lv_objective;
    int lv_bonusRewards;
    string lv_contactTooltipConvo;
    string lv_techTooltipID;

    // Automatic Variable Declarations
    int auto5F37E381_i;
    int autoBFD39200_val;
    int auto46551199_val;

    // Variable Initialization
    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_groupEnabled = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
    lv_objective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_techTooltipID = "";

    // Implementation
    lv_planetIndex = (lp_planet);
    lv_mission = libEA0820A1_gf_PlanetMission(lp_planet);
    lv_missionIndex = (lv_mission);
    PlanetCreate(PlayerGroupAll(), c_planetStateActive);
    PlanetSetPlanetName(PlanetLastCreated(), libEA0820A1_gf_PlanetName(lp_planet));
    PlanetSetPlanetModelLink(PlanetLastCreated(), libEA0820A1_gv_tS_PlanetButtonModel[lv_planetIndex]);
    PlanetSetBackgroundModelLink(PlanetLastCreated(), libEA0820A1_gv_tS_PlanetModel[lv_planetIndex]);
    PlanetSetTooltipText(PlanetLastCreated(), libEA0820A1_gf_MissionPlanetInfo(lv_mission));
    PlanetSetMissionName(PlanetLastCreated(), libEA0820A1_gf_MissionNameInUpperCase(lv_mission));
    PlanetSetPrimaryObjectiveText(PlanetLastCreated(), (libEA0820A1_gf_MissionObjectivesText(lv_mission)));
    PlanetSetRewardTitle(PlanetLastCreated(), StringExternal("Param/Value/lib_EA0820A1_EE4DA7E9"));
    if ((libEA0820A1_gf_MissionReward(lv_mission) <= 0)) {
        PlanetSetRewardText(PlanetLastCreated(), StringToText(""));
    }
    else {
        PlanetSetRewardText(PlanetLastCreated(), (libEA0820A1_gf_FormatCredits(libEA0820A1_gf_MissionReward(lv_mission), false)));
    }
    if ((lv_mission == libEA0820A1_ge_MapID_MapTHorner05S)) {
        PlanetSetMissionTitle(PlanetLastCreated(), StringExternal("Param/Value/lib_EA0820A1_028C494C"));
        PlanetSetPlanetText(PlanetLastCreated(), StringExternal("Param/Value/lib_EA0820A1_4087EF9A"));
    }
    else {
        PlanetSetMissionTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelMissionTitle"));
    }
    PlanetSetPrimaryObjectiveTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelObjectiveTitle"));
    PlanetSetSecondaryObjectiveTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelBonusObjectiveTitle"));
    PlanetSetResearchTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelResearchTitle"));
    PlanetSetBonusTitle(PlanetLastCreated(), StringExternal("UI/PlanetPanelBonusTitle"));
    if ((lv_mission == libEA0820A1_ge_MapID_MapTHanson03A)) {
        lv_researchText = StringExternal("Param/Value/lib_EA0820A1_F75D1725");
    }
    else {
        lv_researchText = libEA0820A1_gf_PlanetMissionResearchOpportunitiesText(lv_mission, StringExternal("Param/Value/lib_EA0820A1_A223B128"), StringExternal("Param/Value/lib_EA0820A1_2DFD2F50"));
    }
    if ((lv_researchText != null)) {
        PlanetSetResearchText(PlanetLastCreated(), lv_researchText);
    }

    lv_bonusRewards = 0;
    auto5F37E381_i = 1;
    while (auto5F37E381_i <= libCamp_gv_TSC_MISSIONOBJECTIVECOUNT) {
        if (libCamp_gv_tS_MissionObjectives[lv_mission][auto5F37E381_i] != 0) {
            lv_objective = libCamp_gv_tS_MissionObjectives[lv_mission][auto5F37E381_i];
            lv_bonusRewards += (libEA0820A1_gf_MissionObjectiveItemCount(lv_objective) * libEA0820A1_gf_MissionObjectiveCreditsPerItem(lv_objective));
        }
        auto5F37E381_i = auto5F37E381_i + 1;
    }
    if ((lv_bonusRewards > 0)) {
        PlanetSetBonusText(PlanetLastCreated(), libEA0820A1_gf_FormatCredits(lv_bonusRewards, true));
    }

    lv_groupEnabledIndex = (lv_groupEnabled);
    PlanetSetTechnologyTooltipText(PlanetLastCreated(), ConversationDataStateText("PlanetPanelTooltips|TechImage", "Description"));
    if ((lv_groupEnabled != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroupShowOnReport[lv_groupEnabledIndex] == true)) {
    }
    else {
        PlanetSetTechnologyName(PlanetLastCreated(), StringToText(""));
    }
    if (((lv_mission == libEA0820A1_ge_MapID_MapTTosh03A))) {
        PlanetSetTechnologyName(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyText(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyUnitLink(PlanetLastCreated(), "QuestionMark");
    }

    lv_contactIndex = (libEA0820A1_gv_tS_MissionContact[lv_missionIndex]);
    PlanetSetContactName(PlanetLastCreated(), libEA0820A1_gv_tS_ContactName[lv_contactIndex]);
    if ((lv_mission == libEA0820A1_ge_MapID_MapTHanson01)) {
        PlanetSetContactModelLink(PlanetLastCreated(), "HansonDistressPortrait");
    }
    else {
        PlanetSetContactModelLink(PlanetLastCreated(), libEA0820A1_gf_ContactPortraitModel(libEA0820A1_gf_MissionContact(lv_mission)));
    }
    lv_contactTooltipConvo = "PlanetPanelTooltips|Employer_Image";
    autoBFD39200_val = libEA0820A1_gv_tS_MissionContact[lv_missionIndex];
    if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactHanson) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|DrHanson";
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactAdjutant) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Adjutant";
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactValerianMengsk) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|CrownPrinceValerian";
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactTychus) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Tychus";
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactTosh) {
        auto46551199_val = lv_mission;
        if (auto46551199_val == libEA0820A1_ge_MapID_MapTTosh01) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh01";
        }
        else if (auto46551199_val == libEA0820A1_ge_MapID_MapTTosh02) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else if (auto46551199_val == libEA0820A1_ge_MapID_MapTTosh03A) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else if (auto46551199_val == libEA0820A1_ge_MapID_MapTTosh03B) {
            lv_contactTooltipConvo = "PlanetPanelTooltips|Tosh_Tosh02/03";
        }
        else {
        }
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactHorner) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Horner";
    }
    else if (autoBFD39200_val == libEA0820A1_ge_ContactID_ContactZeratul) {
        lv_contactTooltipConvo = "PlanetPanelTooltips|Zeratul";
    }
    else {
    }
    PlanetSetContactTooltipText(PlanetLastCreated(), ConversationDataStateText(lv_contactTooltipConvo, "Description"));
    if (((lv_mission == libEA0820A1_ge_MapID_MapTValerian01) || (lv_mission == libEA0820A1_ge_MapID_MapTValerian02A) || (lv_mission == libEA0820A1_ge_MapID_MapTValerian02B) || (lv_mission == libEA0820A1_ge_MapID_MapTValerian03))) {
        PlanetSetContactTitle(PlanetLastCreated(), StringToText(""));
        PlanetSetTechnologyTitle(PlanetLastCreated(), StringToText(""));
    }

    return PlanetLastCreated();
}

int libEA0820A1_gf_TechPurchasableTechID (int lp_techPurchasable) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    int auto0585918D_i;

    // Variable Initialization
    lv_tech = libEA0820A1_ge_StoryTech_StoryTechNone;

    // Implementation
    auto0585918D_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto0585918D_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_tech = libCamp_gv_tS_TechID[auto0585918D_i];
        if ((libEA0820A1_gv_tS_Tech_UI[(lv_tech)] == lp_techPurchasable)) {
            return lv_tech;
        }

        auto0585918D_i = auto0585918D_i + 1;
    }
    return libEA0820A1_ge_StoryTech_StoryTechNone;
}

bool libEA0820A1_gf_CanAffordTech (int lp_techID) {
    // Variable Declarations
    int lv_techIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_techID);
    if ((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] != libEA0820A1_ge_StoryTechStates_TechLocked) && (libEA0820A1_gf_StoryCredits() >= libEA0820A1_gf_StoryTechCost(lp_techID))) {
        return true;
    }
    else {
        return false;
    }
}

int libEA0820A1_gf_CostofPurchasedTech () {
    // Variable Declarations
    int lv_indexTech;
    int lv_total;

    // Automatic Variable Declarations
    int autoFA4D0575_i;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;

    // Implementation
    lv_total = 0;
    autoFA4D0575_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoFA4D0575_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoFA4D0575_i];
        if ((libEA0820A1_gv_tSX_Tech_Status[(lv_indexTech)] == libEA0820A1_ge_StoryTechStates_TechPurchased)) {
            lv_total = (lv_total + libEA0820A1_gf_StoryTechCost(lv_indexTech));
        }

        autoFA4D0575_i = autoFA4D0575_i + 1;
    }
    return lv_total;
}

int libEA0820A1_gf_NumberofPurchasedTech () {
    // Variable Declarations
    int lv_index;
    int lv_total;

    // Automatic Variable Declarations
    int auto652D422D_ae;
    const int auto652D422D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_total = 0;
    auto652D422D_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (auto652D422D_ai >= 0 && lv_index <= auto652D422D_ae) || (auto652D422D_ai < 0 && lv_index >= auto652D422D_ae) ) ; lv_index += auto652D422D_ai ) {
        if ((libEA0820A1_gv_tSX_Tech_Status[lv_index] == libEA0820A1_ge_StoryTechStates_TechPurchased)) {
            lv_total += 1;
        }

    }
    return lv_total;
}

int libEA0820A1_gf_NumberofAvailableTech () {
    // Variable Declarations
    int lv_index;
    int lv_total;

    // Automatic Variable Declarations
    int auto2EC35F7A_ae;
    const int auto2EC35F7A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_total = 0;
    auto2EC35F7A_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (auto2EC35F7A_ai >= 0 && lv_index <= auto2EC35F7A_ae) || (auto2EC35F7A_ai < 0 && lv_index >= auto2EC35F7A_ae) ) ; lv_index += auto2EC35F7A_ai ) {
        if (((libEA0820A1_gv_tSX_Tech_Status[lv_index] == libEA0820A1_ge_StoryTechStates_TechAvailable) || (libEA0820A1_gv_tSX_Tech_Status[lv_index] == libEA0820A1_ge_StoryTechStates_TechNew))) {
            lv_total += 1;
        }

    }
    return lv_total;
}

string libEA0820A1_gf_TS_StoryTechConvoID (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_Tech_ConvoID[(lp_tech)];
}

text libEA0820A1_gf_StoryTechName (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateName(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech));
}

text libEA0820A1_gf_StoryTechTooltip (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), ("Tooltip"));
}

text libEA0820A1_gf_StoryTechDescription (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateText(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), ("Description"));
}

int libEA0820A1_gf_StoryTechCost (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), ("Cost")));
}

int libEA0820A1_gf_StoryTechSlot (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(ConversationDataStateFixedValue(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), ("Slot")));
}

string libEA0820A1_gf_StoryTechIcon (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateImagePath(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech));
}

string libEA0820A1_gf_StoryTechMovie (int lp_tech) {
    // Automatic Variable Declarations
    // Implementation
    return ConversationDataStateMoviePath(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech));
}

string libEA0820A1_gf_StoryTechUpgrade (int lp_tech, int lp_index) {
    // Variable Declarations
    string lv_convoID;

    // Automatic Variable Declarations
    int auto30823B2C_val;

    // Variable Initialization
    lv_convoID = "Upgrade1";

    // Implementation
    auto30823B2C_val = lp_index;
    if (auto30823B2C_val == 1) {
        lv_convoID = "Upgrade1";
    }
    else if (auto30823B2C_val == 2) {
        lv_convoID = "Upgrade2";
    }
    else {
        lv_convoID = "Upgrade1";
    }
    return ConversationDataStateUpgrade(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), (lv_convoID));
}

abilcmd libEA0820A1_gf_StoryTechAbilityCommand (int lp_tech, int lp_index) {
    // Variable Declarations
    string lv_convoID;

    // Automatic Variable Declarations
    int auto5E4C7D66_val;

    // Variable Initialization
    lv_convoID = "AC1";

    // Implementation
    auto5E4C7D66_val = lp_index;
    if (auto5E4C7D66_val == 1) {
        lv_convoID = "AC1";
    }
    else if (auto5E4C7D66_val == 2) {
        lv_convoID = "AC2";
    }
    else if (auto5E4C7D66_val == 3) {
        lv_convoID = "AC3";
    }
    else if (auto5E4C7D66_val == 4) {
        lv_convoID = "AC4";
    }
    else {
        lv_convoID = "AC1";
    }
    return ConversationDataStateAbilCmd(libEA0820A1_gf_TS_StoryTechConvoID(lp_tech), (lv_convoID));
}

bool libEA0820A1_gf_StoryTechUnitIsEnabled (string lp_techUnit) {
    // Variable Declarations
    int lv_indexTechGroup;

    // Automatic Variable Declarations
    int autoE0B67412_i;

    // Variable Initialization
    lv_indexTechGroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    autoE0B67412_i = libCamp_gv_TSC_TECHGROUP_FIRST;
    while (autoE0B67412_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
        lv_indexTechGroup = libCamp_gv_tS_TechGroupID[autoE0B67412_i];
        if ((libEA0820A1_gv_tS_TechGroupUnitType[(lv_indexTechGroup)] == lp_techUnit)) {
            return (libEA0820A1_gv_tS_TechGroupState[(lv_indexTechGroup)] == c_purchaseCategoryStateEnabled);
        }

        autoE0B67412_i = autoE0B67412_i + 1;
    }
    if ((lp_techUnit == "Raven")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP41Raven, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "ScienceVessel")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP42ScienceVessel, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "TechReactor")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchP51TechReactor, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PlanetaryFortress")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ21PlanetaryFortress, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PerditionTurret")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ22PerditionTurret, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "Predator")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ31Predator, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "Hercules")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ32Hercules, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "HiveMindEmulator")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ51HiveMindEmulator, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    if ((lp_techUnit == "PsiDisruptor")) {
        return libEA0820A1_gf_StoryResearchStateCheck(libEA0820A1_ge_StoryResearchID_ResearchZ52SigmaProjector, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased);
    }

    return false;
}

string libEA0820A1_gf_StoryTechGroupIcon (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_TechGroupIcon[(lp_group)];
}

string libEA0820A1_gf_StoryTechGroupUnitType (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_TechGroupUnitType[(lp_group)];
}

text libEA0820A1_gf_StoryTechGroupDescription (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_TechGroupDescription[(lp_group)];
}

text libEA0820A1_gf_StoryTechGroupTooltip (int lp_group) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_TechGroupTooltip[(lp_group)];
}

bool libEA0820A1_gf_StoryTechStateCheck (int lp_storyTech, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    return (libEA0820A1_gv_tSX_Tech_Status[(lp_storyTech)] == lp_state);
}

string libEA0820A1_gf_TS_HelpUnitsPanel_UnitTypeStringID (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_unitType);
}

bool libEA0820A1_gf_TS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableValueExists(true, libEA0820A1_gf_TS_HelpUnitsPanel_UnitTypeStringID(lp_unitType));
}

bool libEA0820A1_gf_TS_StoryTechGroupUIUnlocked (int lp_group) {
    // Automatic Variable Declarations
    int autoBE0A57F8_val;

    // Implementation
    autoBE0A57F8_val = lp_group;
    if (autoBE0A57F8_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret) {
        return (libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) >= 6);
    }
    else if (autoBE0A57F8_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseSCV) {
        return (libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) >= 9);
    }
    else if (autoBE0A57F8_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter) {
        return (libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) >= 12);
    }
    else {
    }
    return (libEA0820A1_gv_tS_TechGroupState[(lp_group)] == c_purchaseCategoryStateEnabled);
}

int libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory (int lp_category) {
    // Variable Declarations
    int lv_indexTech;
    int lv_techGroup;
    int lv_techCategory;
    int lv_count;

    // Automatic Variable Declarations
    int auto00B760FC_i;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_techGroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
    lv_techCategory = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;

    // Implementation
    lv_count = 0;
    auto00B760FC_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto00B760FC_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto00B760FC_i];
        lv_techGroup = libEA0820A1_gv_tS_Tech_GroupID[(lv_indexTech)];
        lv_techCategory = libEA0820A1_gv_tS_TechGroupCategoryID[(lv_techGroup)];
        if ((lv_techCategory == lp_category) && (libEA0820A1_gf_StoryTechStateCheck(lv_indexTech, libEA0820A1_ge_StoryTechStates_TechPurchased) == true)) {
            lv_count += 1;
        }

        auto00B760FC_i = auto00B760FC_i + 1;
    }
    return lv_count;
}

void libEA0820A1_gf_SetTechRestrictionsCallback (trigger lp_callbackTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_TechLimitsCallback = lp_callbackTrigger;
}

void libEA0820A1_gf_DisplayTechConsole (trigger lp_exitTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_TechExitCallback = lp_exitTrigger;
    libEA0820A1_gf_TS_CreateTechUI();
    libEA0820A1_gf_HideStoryUI(false, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePurchasePanel, true);
    if ((PurchaseGetSelectedPurchaseCategory(1) == c_invalidPurchaseCategoryId)) {
        PurchaseSetSelectedPurchaseCategory(PlayerGroupAll(), libEA0820A1_gv_tS_TechCategory_UI[(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryInfantry)]);
    }

}

void libEA0820A1_gf_EnableCampaignTechUnit (bool lp_enableDisable, int lp_techUnit, int lp_player) {
    // Variable Declarations
    bool lv_allowDisallow;

    // Automatic Variable Declarations
    int auto5DF5619E_val;

    // Variable Initialization
    lv_allowDisallow = true;

    // Implementation
    if ((lp_enableDisable == true)) {
        lv_allowDisallow = true;
        libEA0820A1_gv_tS_TechGroupState[(lp_techUnit)] = c_purchaseCategoryStateEnabled;
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel(libEA0820A1_gf_StoryTechGroupUnitType(lp_techUnit), true, lp_player);
    }
    else {
        lv_allowDisallow = false;
        libEA0820A1_gv_tS_TechGroupState[(lp_techUnit)] = c_purchaseCategoryStateHidden;
    }
    auto5DF5619E_val = lp_techUnit;
    if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseSCV) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("CommandCenterTrain", 0), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 0), lv_allowDisallow);
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 1), lv_allowDisallow);
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 2), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseBunker) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 6), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 5), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarine) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 0), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMedic) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 4), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryFirebat) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 5), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarauder) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 3), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryReaper) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 1), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesHellion) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 5), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 6), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 7), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesVulture) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 8), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 1), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 0), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsWrath) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 7), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsViking) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 4), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 1), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("StarportTrain", 3), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionSpectre) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 6), lv_allowDisallow);
        if ((lv_allowDisallow == true)) {
            TechTreeUpgradeAddLevel(lp_player, "SpectreTooltipUpgrade", 1);
        }

    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionGhost) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksTrain", 2), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionThor) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryTrain", 4), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupxxxReactor) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 1), lv_allowDisallow);
    }
    else if (auto5DF5619E_val == libEA0820A1_ge_StoryTechGroup_StoryTechGroupxxxSensorTower) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 8), lv_allowDisallow);
    }
    else {
    }
    libEA0820A1_gf_TS_UpdateTechAddons(lp_player);
    libEA0820A1_gf_TS_UpdateTechUpgrades(lp_player);
}

void libEA0820A1_gf_AddUnitTypeToUnitHelpPanel (string lp_unitType, bool lp_saveInHistory, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUnitHelp(lp_player, lp_unitType, true);
    if ((lp_saveInHistory == true)) {
        libEA0820A1_gf_TS_HelpUnitsPanel_AddEnabledUnitType(lp_unitType);
    }

}

void libEA0820A1_gf_ApplyCampaignTech (int lp_player) {
    // Variable Declarations
    int lv_indexTech;
    int lv_techACIndex;
    int lv_techUGIndex;

    // Automatic Variable Declarations
    int autoE366B9CE_i;
    const int auto1BAC3958_ae = libEA0820A1_gv_tSC_TECH_AC_COUNT;
    const int auto1BAC3958_ai = 1;
    const int auto55CA9AD9_ae = libEA0820A1_gv_tSC_TECH_UG_COUNT;
    const int auto55CA9AD9_ai = 1;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;

    // Implementation
    TechTreeRestrictionsEnable(lp_player, true);
    libEA0820A1_gf_TS_UpdateTechStates();
    libEA0820A1_gf_TS_ApplyCampaignTechLimitsUnlockUnits(lp_player);
    TechTreeUpgradeAddLevel(lp_player, "ReaperSpeed", 1);
    TechTreeUpgradeAddLevel(lp_player, "ReaperD8Charge", 1);
    TechTreeUpgradeAddLevel(lp_player, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(lp_player, "BansheeCloak", 1);
    TechTreeUpgradeAddLevel(lp_player, "WraithCloak", 1);
    TechTreeUpgradeAddLevel(lp_player, "YamatoCannon", 1);
    TechTreeUpgradeAddLevel(lp_player, "PersonalCloaking", 1);
    TechTreeUpgradeAddLevel(lp_player, "HunterSeeker", 1);
    autoE366B9CE_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoE366B9CE_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoE366B9CE_i];
        lv_techACIndex = 1;
        for ( ; ( (auto1BAC3958_ai >= 0 && lv_techACIndex <= auto1BAC3958_ae) || (auto1BAC3958_ai < 0 && lv_techACIndex >= auto1BAC3958_ae) ) ; lv_techACIndex += auto1BAC3958_ai ) {
            if ((libEA0820A1_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex) != null)) {
                if ((libEA0820A1_gv_tSX_Tech_Status[(lv_indexTech)] == libEA0820A1_ge_StoryTechStates_TechPurchased)) {
                    TechTreeAbilityAllow(lp_player, libEA0820A1_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex), true);
                }
                else {
                    TechTreeAbilityAllow(lp_player, libEA0820A1_gf_StoryTechAbilityCommand(lv_indexTech, lv_techACIndex), false);
                }
            }

        }
        lv_techUGIndex = 1;
        for ( ; ( (auto55CA9AD9_ai >= 0 && lv_techUGIndex <= auto55CA9AD9_ae) || (auto55CA9AD9_ai < 0 && lv_techUGIndex >= auto55CA9AD9_ae) ) ; lv_techUGIndex += auto55CA9AD9_ai ) {
            if ((libEA0820A1_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex) != null)) {
                if ((libEA0820A1_gv_tSX_Tech_Status[(lv_indexTech)] == libEA0820A1_ge_StoryTechStates_TechPurchased)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libEA0820A1_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex), 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libEA0820A1_gf_StoryTechUpgrade(lv_indexTech, lv_techUGIndex), 0);
                }
            }

        }
        autoE366B9CE_i = autoE366B9CE_i + 1;
    }
    if ((lp_player == 1)) {
        libEA0820A1_gf_TS_ApplyCampaignTechLimitsProtoss();
    }

    libEA0820A1_gf_TS_ApplyResearchesTech(lp_player);
    libEA0820A1_gf_TS_ApplyMercenaryTech(lp_player);
    libEA0820A1_gf_TS_ApplyMercUpgrades(lp_player);
    if ((TechTreeUpgradeCount(lp_player, "NeoSteelFrame", c_techCountCompleteOnly) > 0) && (TechTreeUpgradeCount(lp_player, "ShrikeTurret", c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NeoSteelAndShrikeTurretIconUpgrade", 1);
    }

    if ((lp_player == 1)) {
        libEA0820A1_gf_TS_HelpUnitsPanel_UpdatePanel();
        libEA0820A1_gf_TS_HelpTechTree_UpdatePanel();
    }

}

void libEA0820A1_gf_TS_ApplyCampaignTechLimitsUnlockUnits (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_techSubgroup;

    // Automatic Variable Declarations
    int autoDF2F8846_ae;
    const int autoDF2F8846_ai = 1;
    const int autoB8FE6DF4_ae = 3;
    const int autoB8FE6DF4_ai = 1;

    // Variable Initialization
    lv_techSubgroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    TechTreeUnitHelpDefault(lp_player, false);
    autoDF2F8846_ae = libEA0820A1_gv_TSC_TECHGROUP_LAST;
    lv_index = libEA0820A1_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (autoDF2F8846_ai >= 0 && lv_index <= autoDF2F8846_ae) || (autoDF2F8846_ai < 0 && lv_index >= autoDF2F8846_ae) ) ; lv_index += autoDF2F8846_ai ) {
        if ((libEA0820A1_gv_tS_TechGroupID[lv_index] != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone)) {
            if ((libEA0820A1_gv_tS_TechGroupState[lv_index] == c_purchaseCategoryStateEnabled)) {
                libEA0820A1_gf_EnableCampaignTechUnit(true, libEA0820A1_gv_tS_TechGroupID[lv_index], lp_player);
            }
            else {
                libEA0820A1_gf_EnableCampaignTechUnit(false, libEA0820A1_gv_tS_TechGroupID[lv_index], lp_player);
            }
        }
        else {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_C9E55BC3") + StringExternal("Param/Value/lib_EA0820A1_D08636DD") + IntToText(lv_index)), false);
        }
    }
    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == true)) {
        lv_index = 1;
        for ( ; ( (autoB8FE6DF4_ai >= 0 && lv_index <= autoB8FE6DF4_ae) || (autoB8FE6DF4_ai < 0 && lv_index >= autoB8FE6DF4_ae) ) ; lv_index += autoB8FE6DF4_ai ) {
            if ((lv_techSubgroup != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (lv_techSubgroup != libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret)) {
                libEA0820A1_gf_AddUnitTypeToUnitHelpPanel(libEA0820A1_gf_StoryTechGroupUnitType(lv_techSubgroup), true, lp_player);
            }

        }
    }

}

void libEA0820A1_gf_TS_ApplyCampaignTechLimitsProtoss () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = 1;
    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04))) {
        TechTreeAbilityAllow(lv_player, AbilityCommand("TimeWarp", 0), false);
        TechTreeUnitAllow(lv_player, "Probe", true);
        TechTreeUnitAllow(lv_player, "PhotonCannon", true);
        TechTreeUnitAllow(lv_player, "Assimilator", true);
        TechTreeUpgradeAllow(lv_player, "BlinkTech", true);
    }

    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "Zealot", true);
        TechTreeUnitAllow(lv_player, "Stalker", true);
        TechTreeUnitAllow(lv_player, "Archon", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel1", true);
        TechTreeUpgradeAllow(lv_player, "Charge", true);
        TechTreeUpgradeAllow(lv_player, "VoidRaySpeedUpgrade", true);
        TechTreeUpgradeAllow(lv_player, "ExtendedThermalLance", true);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Zealot", false, lv_player);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Stalker", false, lv_player);
    }

    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "DarkTemplar", true);
        TechTreeUnitAllow(lv_player, "Immortal", true);
        TechTreeUnitAllow(lv_player, "HighTemplar", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel2", true);
        TechTreeUpgradeAllow(lv_player, "PsiStormTech", true);
        TechTreeUpgradeAllow(lv_player, "HighTemplarKhaydarinAmulet", true);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("DarkTemplar", false, lv_player);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Immortal", false, lv_player);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Archon", false, lv_player);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("HighTemplar", false, lv_player);
    }

    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04))) {
        TechTreeUnitAllow(lv_player, "Colossus", true);
        TechTreeUnitAllow(lv_player, "Observer", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundArmorsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ProtossGroundWeaponsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ProtossShieldsLevel3", true);
        TechTreeUpgradeAllow(lv_player, "ObserverGraviticBooster", true);
        TechTreeUpgradeAllow(lv_player, "ExtendedThermalLance", true);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Colossus", false, lv_player);
        libEA0820A1_gf_AddUnitTypeToUnitHelpPanel("Observer", false, lv_player);
    }

}

void libEA0820A1_gf_TS_UpdateTechAddons (int lp_player) {
    // Variable Declarations
    bool lv_allowDisallowBarracksTechLab;
    bool lv_allowDisallowFactory;
    bool lv_allowDisallowFactoryTechLab;
    bool lv_allowDisallowStarport;
    bool lv_allowDisallowStarportTechLab;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("BarracksTrain", 5)) == true))) {
        lv_allowDisallowBarracksTechLab = true;
    }
    else {
        lv_allowDisallowBarracksTechLab = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 5)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 8)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 9)) == true))) {
        lv_allowDisallowFactory = true;
    }
    else {
        lv_allowDisallowFactory = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("FactoryTrain", 9)) == true))) {
        lv_allowDisallowFactoryTechLab = true;
    }
    else {
        lv_allowDisallowFactoryTechLab = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 4)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 0)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 5)) == true))) {
        lv_allowDisallowStarport = true;
    }
    else {
        lv_allowDisallowStarport = false;
    }
    if (((TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 1)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 3)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 7)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 2)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 6)) == true) || (TechTreeAbilityIsAllowed(lp_player, AbilityCommand("StarportTrain", 5)) == true))) {
        lv_allowDisallowStarportTechLab = true;
    }
    else {
        lv_allowDisallowStarportTechLab = false;
    }
    TechTreeAbilityAllow(lp_player, AbilityCommand("BarracksAddOns", 0), lv_allowDisallowBarracksTechLab);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 1), lv_allowDisallowFactory);
    TechTreeAbilityAllow(lp_player, AbilityCommand("FactoryAddOns", 0), lv_allowDisallowFactoryTechLab);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 1), lv_allowDisallowStarport);
    TechTreeAbilityAllow(lp_player, AbilityCommand("StarportAddOns", 0), lv_allowDisallowStarportTechLab);
}

void libEA0820A1_gf_TS_UpdateTechUpgrades (int lp_player) {
    // Variable Declarations
    bool lv_infantry1;
    bool lv_infantry2;
    bool lv_infantry3;
    bool lv_vehicle1;
    bool lv_vehicle2;
    bool lv_vehicle3;
    bool lv_shipWeapon1;
    bool lv_shipArmor1;
    bool lv_shipWeapon2;
    bool lv_shipArmor2;
    bool lv_shipWeapon3;
    bool lv_shipArmor3;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor02, libEA0820A1_ge_MissionStatus_Completed) == true))) {
        lv_infantry1 = true;
        if (((libEA0820A1_gf_StoryTechUnitIsEnabled("Hellion") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("SiegeTank") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Thor") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Vulture") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Diamondback") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Goliath") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Predator") == true))) {
            lv_vehicle1 = true;
        }

        if (((libEA0820A1_gf_StoryTechUnitIsEnabled("VikingFighter") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Banshee") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Battlecruiser") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Wraith") == true))) {
            lv_shipWeapon1 = true;
        }

        if (((libEA0820A1_gf_StoryTechUnitIsEnabled("Medivac") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Raven") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Hercules") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("VikingFighter") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Banshee") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Battlecruiser") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("Wraith") == true) || (libEA0820A1_gf_StoryTechUnitIsEnabled("ScienceVessel") == true))) {
            lv_shipArmor1 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 2), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 6), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 5), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 2), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 11), lv_shipWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 8), lv_shipArmor1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 10), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 13), lv_infantry1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 15), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 21), lv_vehicle1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 18), lv_shipWeapon1);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 24), lv_shipArmor1);
    if (((libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) >= 9))) {
        if ((lv_infantry1 == true)) {
            lv_infantry2 = true;
            libEA0820A1_gv_tS_UpgradeInfantry2 = true;
        }

        if ((lv_vehicle1 == true)) {
            lv_vehicle2 = true;
            libEA0820A1_gv_tS_UpgradeVehicle2 = true;
        }

        if ((lv_shipWeapon1 == true)) {
            lv_shipWeapon2 = true;
            libEA0820A1_gv_tS_UpgradeShip2 = true;
        }

        if ((lv_shipArmor1 == true)) {
            lv_shipArmor2 = true;
            libEA0820A1_gv_tS_UpgradeShip2 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 3), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 7), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 6), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 3), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 12), lv_shipWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 9), lv_shipArmor2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 11), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 14), lv_infantry2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 16), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 22), lv_vehicle2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 19), lv_shipWeapon2);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 25), lv_shipArmor2);
    if (((libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) >= 16))) {
        if ((lv_infantry2 == true)) {
            lv_infantry3 = true;
            libEA0820A1_gv_tS_UpgradeInfantry3 = true;
        }

        if ((lv_vehicle2 == true)) {
            lv_vehicle3 = true;
            libEA0820A1_gv_tS_UpgradeVehicle3 = true;
        }

        if ((lv_shipWeapon2 == true)) {
            lv_shipWeapon3 = true;
            libEA0820A1_gv_tS_UpgradeShip3 = true;
        }

        if ((lv_shipArmor2 == true)) {
            lv_shipArmor3 = true;
            libEA0820A1_gv_tS_UpgradeShip3 = true;
        }

    }

    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 4), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 8), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 7), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 4), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 13), lv_shipWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 10), lv_shipArmor3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 12), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("EngineeringBayResearch", 15), lv_infantry3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 17), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 23), lv_vehicle3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 20), lv_shipWeapon3);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ArmoryResearch", 26), lv_shipArmor3);
}

void libEA0820A1_gf_TS_UpdateTechGroupStates () {
    // Variable Declarations
    int lv_indexMission;
    int lv_techUnitIndex;
    int lv_techEnabledIndex;

    // Automatic Variable Declarations
    int auto6118EC8E_ae;
    const int auto6118EC8E_ai = 1;
    int autoF27A0A23_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto6118EC8E_ae = libEA0820A1_gv_TSC_TECHGROUP_LAST;
    lv_techUnitIndex = libEA0820A1_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (auto6118EC8E_ai >= 0 && lv_techUnitIndex <= auto6118EC8E_ae) || (auto6118EC8E_ai < 0 && lv_techUnitIndex >= auto6118EC8E_ae) ) ; lv_techUnitIndex += auto6118EC8E_ai ) {
        libEA0820A1_gv_tS_TechGroupState[lv_techUnitIndex] = c_purchaseCategoryStateHidden;
    }
    if (((libEA0820A1_gf_MissionStatus(libEA0820A1_ge_MapID_MapTRaynor02) == libEA0820A1_ge_MissionStatus_Completed) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor02))) {
        libEA0820A1_gv_tS_TechGroupState[(libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseSCV)] = c_purchaseCategoryStateEnabled;
        libEA0820A1_gv_tS_TechGroupState[(libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter)] = c_purchaseCategoryStateEnabled;
    }

    autoF27A0A23_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoF27A0A23_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoF27A0A23_i];
        autoF27A0A23_i = autoF27A0A23_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateTechStates () {
    // Variable Declarations
    int lv_index;
    int lv_subgroup;

    // Automatic Variable Declarations
    int autoCF4859EF_ae;
    const int autoCF4859EF_ai = 1;

    // Variable Initialization
    lv_subgroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    libEA0820A1_gf_TS_UpdateTechGroupStates();
    libEA0820A1_gf_TS_StoryCheckTechReqs();
    autoCF4859EF_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (autoCF4859EF_ai >= 0 && lv_index <= autoCF4859EF_ae) || (autoCF4859EF_ai < 0 && lv_index >= autoCF4859EF_ae) ) ; lv_index += autoCF4859EF_ai ) {
        lv_subgroup = libEA0820A1_gv_tS_Tech_GroupID[lv_index];
        if ((libEA0820A1_gv_tS_TechGroupState[(lv_subgroup)] != c_purchaseCategoryStateEnabled)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechUnavailable;
        }
        else {
            if ((libEA0820A1_gv_tSX_Tech_Status[lv_index] == libEA0820A1_ge_StoryTechStates_TechUnavailable)) {
                libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechAvailable;
                libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechNew;
            }

        }
    }
    libEA0820A1_gf_TS_UpdateMercStatus();
}

void libEA0820A1_gf_TS_InitializeTechCategorySingle (int lp_techGroup, text lp_name, int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_techGroup);
    libEA0820A1_gv_tS_TechCategoryID[lv_index] = lp_techGroup;
    libEA0820A1_gv_tS_TechCategoryName[lv_index] = lp_name;
    libEA0820A1_gv_tS_TechCategorySlot[lv_index] = lp_slot;
}

void libEA0820A1_gf_TS_InitializeTechCategory () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeTechCategorySingle(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryBase, StringExternal("Param/Value/lib_EA0820A1_F7DF4D09"), 1);
    libEA0820A1_gf_TS_InitializeTechCategorySingle(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryInfantry, StringExternal("Param/Value/lib_EA0820A1_632F76C4"), 2);
    libEA0820A1_gf_TS_InitializeTechCategorySingle(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryVehicles, StringExternal("Param/Value/lib_EA0820A1_7FE28DED"), 3);
    libEA0820A1_gf_TS_InitializeTechCategorySingle(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryStarships, StringExternal("Param/Value/lib_EA0820A1_514941A9"), 4);
    libEA0820A1_gf_TS_InitializeTechCategorySingle(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryDominion, StringExternal("Param/Value/lib_EA0820A1_0E9ED237"), 5);
}

void libEA0820A1_gf_TS_InitializeTechGroundSingle (int lp_techSubGroup, int lp_category, string lp_unitType, text lp_name, text lp_description, text lp_tooltip, string lp_icon, string lp_iconBig, bool lp_showOnReport) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_index = (lp_techSubGroup);
    libEA0820A1_gv_tS_TechGroupID[lv_index] = lp_techSubGroup;
    libEA0820A1_gv_tS_TechGroupCategoryID[lv_index] = lp_category;
    libEA0820A1_gv_tS_TechGroupUnitType[lv_index] = lp_unitType;
    libEA0820A1_gv_tS_TechGroupName[lv_index] = lp_name;
    libEA0820A1_gv_tS_TechGroupDescription[lv_index] = lp_description;
    libEA0820A1_gv_tS_TechGroupTooltip[lv_index] = lp_tooltip;
    libEA0820A1_gv_tS_TechGroupIcon[lv_index] = lp_icon;
    libEA0820A1_gv_tS_TechGroupIconBig[lv_index] = lp_iconBig;
    libEA0820A1_gv_tS_TechGroupState[lv_index] = c_purchaseCategoryStateEnabled;
    libEA0820A1_gv_tS_TechGroupShowOnReport[lv_index] = lp_showOnReport;
}

void libEA0820A1_gf_TS_InitializeTechGroup () {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = "SCV";
    lv_unitType = "Bunker";
    lv_unitType = "MissileTurret";
    lv_unitType = "CommandCenter";
    lv_unitType = "Marine";
    lv_unitType = "Medic";
    lv_unitType = "Firebat";
    lv_unitType = "Marauder";
    lv_unitType = "Reaper";
    lv_unitType = "Hellion";
    lv_unitType = "Goliath";
    lv_unitType = "Vulture";
    lv_unitType = "Diamondback";
    lv_unitType = "SiegeTank";
    lv_unitType = "Medivac";
    lv_unitType = "Wraith";
    lv_unitType = "VikingFighter";
    lv_unitType = "Banshee";
    lv_unitType = "Battlecruiser";
    lv_unitType = "Ghost";
    lv_unitType = "Spectre";
    lv_unitType = "Thor";
    lv_unitType = "NuclearReactor";
    lv_unitType = "SensorTower";
}

void libEA0820A1_gf_TS_InitializeTechDataSingle (int lp_tech, int lp_group, string lp_convoID, int lp_requires) {
    // Variable Declarations
    int lv_techIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_tech);
    libEA0820A1_gv_tS_TechID[lv_techIndex] = lp_tech;
    libEA0820A1_gv_tS_Tech_GroupID[lv_techIndex] = lp_group;
    libEA0820A1_gv_tS_Tech_ConvoID[lv_techIndex] = lp_convoID;
    libEA0820A1_gv_tS_Tech_Requires[lv_techIndex] = lp_requires;
}

void libEA0820A1_gf_TS_InitializeTechData () {
    // Variable Declarations
    string lv_tBDVideo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tBDVideo = "Assets\\Textures\\video_static.ogv";

    // Implementation
    libEA0820A1_gf_TS_InitializeTechCategory();
    libEA0820A1_gf_TS_InitializeTechGroup();
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSCVDualFusionWelder, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseSCV, "Tech|Tech_SCV_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSCVAdvancedConstruction, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseSCV, "Tech|Tech_SCV_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBunkerProjectileAccelerators, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseBunker, "Tech|Tech_Bunker_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBunkerNeosteelFrame, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseBunker, "Tech|Tech_Bunker_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMissileTurretReinforcedSuperstructure, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, "Tech|Tech_MissileTurret_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMissileTurretHellstormMissileBatteries, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseMissileTurret, "Tech|Tech_MissileTurret_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechCOCEOrbitalRelay, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter, "Tech|Tech_CommandCenter_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechCOCEFireSuppressionSystems, libEA0820A1_ge_StoryTechGroup_StoryTechGroupBaseCommandCenter, "Tech|Tech_CommandCenter_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMarineStimpacks, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarine, "Tech|Tech_Marine_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMarineCombatShield, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarine, "Tech|Tech_Marine_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMedicAdvancedMedicTraining, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMedic, "Tech|Tech_Medic_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMedicStabilizerMedPacks, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMedic, "Tech|Tech_Medic_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechFirebatBearclawNozzles, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, "Tech|Tech_Firebat_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechFirebatJuggernautPlating, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, "Tech|Tech_Firebat_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMarauderJackhammerConcussionGrenade, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, "Tech|Tech_Marauder_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMarauderAblativeScales, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, "Tech|Tech_Marauder_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechReaperD8Charges, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryReaper, "Tech|Tech_Reaper_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechReaperU238Rounds, libEA0820A1_ge_StoryTechGroup_StoryTechGroupInfantryReaper, "Tech|Tech_Reaper_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechHellionInfernalPreIgniter, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, "Tech|Tech_Hellion_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechHellionTwinLinkedFlameThrowers, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, "Tech|Tech_Hellion_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechGoliathStabilizers, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, "Tech|Tech_Goliath_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechGoliathAresClassTargetingSystem, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, "Tech|Tech_Goliath_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechDiamondbackTriLithiumPowerCells, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, "Tech|Tech_Diamondback_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechDiamondbackHyperfluxor, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, "Tech|Tech_Diamondback_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechVultureCerberusMines, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, "Tech|Tech_Vulture_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechVultureNanoConstructors, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, "Tech|Tech_Vulture_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSiegeTankMaelstromRounds, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, "Tech|Tech_SiegeTank_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSiegeTankShapedBlast, libEA0820A1_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, "Tech|Tech_SiegeTank_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMedivacAdvancedHealingAI, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, "Tech|Tech_Medivac_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechMedivacRapidDeployment, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, "Tech|Tech_Medivac_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechWraithSingularityAnchor, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, "Tech|Tech_Wraith_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechWraithCloakDistortionField, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, "Tech|Tech_Wraith_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechVikingAresClassTargetingSystem, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsViking, "Tech|Tech_Viking_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechVikingRipwaveMissiles, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsViking, "Tech|Tech_Viking_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBansheeCrossSpectrumDampeners, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, "Tech|Tech_Banshee_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBansheeShockwaveMissilePattern, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, "Tech|Tech_Banshee_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBattlecruiserMissilePods, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, "Tech|Tech_Battlecruiser_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechBattlecruiserDefensiveMatrix, libEA0820A1_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, "Tech|Tech_Battlecruiser_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechGhostOcularImplants, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionGhost, "Tech|Tech_Ghost_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechGhostPermaCloak, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionGhost, "Tech|Tech_Ghost_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSpectreUltrasonicPulse, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionSpectre, "Tech|Tech_Spectre_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechSpectrePermaCloak, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionSpectre, "Tech|Tech_Spectre_2", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechThor330mmBarrageCannons, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionThor, "Tech|Tech_Thor_1", libEA0820A1_ge_StoryTech_StoryTechNone);
    libEA0820A1_gf_TS_InitializeTechDataSingle(libEA0820A1_ge_StoryTech_StoryTechThorImmortalityProtocol, libEA0820A1_ge_StoryTechGroup_StoryTechGroupDominionThor, "Tech|Tech_Thor_2", libEA0820A1_ge_StoryTech_StoryTechNone);
}

void libEA0820A1_gf_TS_ResetTechData () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoB044C907_ae;
    const int autoB044C907_ai = 1;

    // Variable Initialization

    // Implementation
    autoB044C907_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (autoB044C907_ai >= 0 && lv_index <= autoB044C907_ae) || (autoB044C907_ai < 0 && lv_index >= autoB044C907_ae) ) ; lv_index += autoB044C907_ai ) {
        libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechAvailable;
    }
    libEA0820A1_gf_TS_UpdateTechStates();
}

void libEA0820A1_gf_TS_CreateTechCategoryUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto30229379_ae;
    const int auto30229379_ai = 1;

    // Variable Initialization

    // Implementation
    auto30229379_ae = libEA0820A1_gv_TSC_TECHCATEGORY_LAST;
    lv_index = libEA0820A1_gv_TSC_TECHCATEGORY_FIRST;
    for ( ; ( (auto30229379_ai >= 0 && lv_index <= auto30229379_ae) || (auto30229379_ai < 0 && lv_index >= auto30229379_ae) ) ; lv_index += auto30229379_ai ) {
        if ((libEA0820A1_gv_tS_TechCategoryID[lv_index] != libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone) && (libEA0820A1_gv_tS_TechCategory_UI[lv_index] == c_invalidPurchaseCategoryId)) {
            PurchaseCategoryCreate(PlayerGroupAll(), libEA0820A1_gv_tS_TechCategorySlot[lv_index]);
            libEA0820A1_gv_tS_TechCategory_UI[lv_index] = PurchaseCategoryLastCreated();
            PurchaseCategorySetNameText(PurchaseCategoryLastCreated(), libEA0820A1_gv_tS_TechCategoryName[lv_index]);
        }

    }
}

void libEA0820A1_gf_TS_CreateTechGroupUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoCA1C69A1_ae;
    const int autoCA1C69A1_ai = 1;

    // Variable Initialization

    // Implementation
    autoCA1C69A1_ae = libEA0820A1_gv_TSC_TECHGROUP_LAST;
    lv_index = libEA0820A1_gv_TSC_TECHGROUP_FIRST;
    for ( ; ( (autoCA1C69A1_ai >= 0 && lv_index <= autoCA1C69A1_ae) || (autoCA1C69A1_ai < 0 && lv_index >= autoCA1C69A1_ae) ) ; lv_index += autoCA1C69A1_ai ) {
        if ((libEA0820A1_gv_tS_TechGroupID[lv_index] != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroupCategoryID[lv_index] != libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone) && (libEA0820A1_gv_tS_TechGroup_UI[lv_index] == c_invalidPurchaseGroupId)) {
            PurchaseGroupCreate(PlayerGroupAll(), libEA0820A1_gv_tS_TechCategory_UI[(libEA0820A1_gv_tS_TechGroupCategoryID[lv_index])], 1);
            libEA0820A1_gv_tS_TechGroup_UI[lv_index] = PurchaseGroupLastCreated();
            PurchaseGroupSetNameText(PurchaseGroupLastCreated(), libEA0820A1_gv_tS_TechGroupName[lv_index]);
        }

    }
}

void libEA0820A1_gf_TS_CreateTechUI () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_requirements;

    // Automatic Variable Declarations
    int autoE3DF962F_i;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_requirements = StringToText("");

    // Implementation
    libEA0820A1_gf_TS_CreateTechCategoryUI();
    libEA0820A1_gf_TS_CreateTechGroupUI();
    autoE3DF962F_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoE3DF962F_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoE3DF962F_i];
        lv_techIndex = (lv_indexTech);
        if ((libEA0820A1_gv_tS_Tech_UI[lv_techIndex] == c_invalidPurchaseItemId)) {
            PurchaseItemCreate(PlayerGroupAll(), libEA0820A1_gv_tS_TechGroup_UI[(libEA0820A1_gv_tS_Tech_GroupID[lv_techIndex])], libEA0820A1_gf_StoryTechSlot(lv_indexTech));
            libEA0820A1_gv_tS_Tech_UI[lv_techIndex] = PurchaseItemLastCreated();
            PurchaseItemSetCost(PurchaseItemLastCreated(), libEA0820A1_gf_StoryTechCost(lv_indexTech));
            PurchaseItemSetIconFilePath(PurchaseItemLastCreated(), libEA0820A1_gf_StoryTechIcon(lv_indexTech));
            PurchaseItemSetMovieFilePath(PurchaseItemLastCreated(), libEA0820A1_gf_StoryTechMovie(lv_indexTech));
            PurchaseItemSetNameText(PurchaseItemLastCreated(), libEA0820A1_gf_StoryTechName(lv_indexTech));
        }

        autoE3DF962F_i = autoE3DF962F_i + 1;
    }
    libEA0820A1_gf_TS_UpdateTechUI();
    libEA0820A1_gf_TS_UpdateTechUINewGroups();
    libEA0820A1_gf_TS_UpdateTechVisuals();
}

void libEA0820A1_gf_TS_UpdateTechGroupUI () {
    // Variable Declarations
    int lv_indexCategory;
    int lv_indexGroup;
    int lv_categoryIndex;
    int lv_groupIndex;
    int lv_slot;
    text lv_debugtext;

    // Automatic Variable Declarations
    int autoDCB68CDC_i;
    int auto073F35A4_i;
    int autoB046C44D_i;

    // Variable Initialization
    lv_indexCategory = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    autoDCB68CDC_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (autoDCB68CDC_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[autoDCB68CDC_i];
        lv_categoryIndex = (lv_indexCategory);
        lv_slot = 0;
        libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] = 0;
        auto073F35A4_i = libCamp_gv_TSC_TECHGROUP_FIRST;
        while (auto073F35A4_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
            lv_indexGroup = libCamp_gv_tS_TechGroupID[auto073F35A4_i];
            lv_groupIndex = (lv_indexGroup);
            if ((lv_indexGroup != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex] != c_invalidPurchaseGroupId) && (libEA0820A1_gv_tS_TechGroupCategoryID[lv_groupIndex] == lv_indexCategory)) {
                if ((libEA0820A1_gf_TS_StoryTechGroupUIUnlocked(lv_indexGroup) == true)) {
                    lv_slot += 1;
                    PurchaseGroupSetSlot(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], lv_slot);
                    PurchaseGroupSetState(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], c_purchaseGroupStateNew);
                    libEA0820A1_gv_tSX_TechGroup_UI_New[lv_groupIndex] = true;
                    PurchaseGroupSetUnitLink(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], libEA0820A1_gv_tS_TechGroupUnitType[lv_groupIndex]);
                    libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] += 1;
                }

            }

            auto073F35A4_i = auto073F35A4_i + 1;
        }
        if ((lv_slot > 0)) {
            PurchaseCategorySetState(libEA0820A1_gv_tS_TechCategory_UI[(lv_indexCategory)], c_purchaseCategoryStateEnabled);
        }
        else {
            PurchaseCategorySetState(libEA0820A1_gv_tS_TechCategory_UI[(lv_indexCategory)], c_purchaseCategoryStateHidden);
        }
        autoDCB68CDC_i = autoDCB68CDC_i + 1;
    }
    autoB046C44D_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (autoB046C44D_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[autoB046C44D_i];
        lv_categoryIndex = (lv_indexCategory);
        if ((libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] == 0)) {
            libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] = -1;
        }

        autoB046C44D_i = autoB046C44D_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateTechUI () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_tooltip;
    text lv_specification;
    int lv_groupID;

    // Automatic Variable Declarations
    int auto9F9E5908_i;
    int auto60BE3392_val;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_tooltip = StringToText("");

    // Implementation
    libEA0820A1_gf_TS_UpdateTechStates();
    libEA0820A1_gf_TS_UpdateTechGroupUI();
    auto9F9E5908_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto9F9E5908_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto9F9E5908_i];
        lv_techIndex = (lv_indexTech);
        lv_tooltip = libEA0820A1_gf_StoryTechTooltip(lv_indexTech);
        if ((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechLocked)) {
            if ((libEA0820A1_gv_tS_Tech_Requires[lv_techIndex] != libEA0820A1_ge_StoryTech_StoryTechNone) && (libEA0820A1_gv_tSX_Tech_Status[(libEA0820A1_gv_tS_Tech_Requires[lv_techIndex])] != libEA0820A1_ge_StoryTechStates_TechPurchased)) {
                lv_tooltip = (lv_tooltip + StringExternal("Param/Value/lib_EA0820A1_8D3FB0C4") + libEA0820A1_gf_StoryTechName(libEA0820A1_gv_tS_Tech_Requires[lv_techIndex]) + StringExternal("Param/Value/lib_EA0820A1_C7959764") + StringExternal("Param/Value/lib_EA0820A1_A2210907"));
            }

        }

        PurchaseItemSetTooltipText(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], lv_tooltip);
        PurchaseItemSetDescriptionText(libEA0820A1_gv_tS_Tech_UI[(lv_indexTech)], (libEA0820A1_gf_StoryTechDescription(lv_indexTech)));
        auto60BE3392_val = libEA0820A1_gv_tSX_Tech_Status[lv_techIndex];
        if (auto60BE3392_val == libEA0820A1_ge_StoryTechStates_TechLocked) {
            PurchaseItemSetState(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateDisabled);
        }
        else if (auto60BE3392_val == libEA0820A1_ge_StoryTechStates_TechUnavailable) {
            PurchaseItemSetState(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateDisabled);
        }
        else if (auto60BE3392_val == libEA0820A1_ge_StoryTechStates_TechAvailable) {
            PurchaseItemSetState(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateEnabled);
        }
        else if (auto60BE3392_val == libEA0820A1_ge_StoryTechStates_TechNew) {
            PurchaseItemSetState(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStateEnabled);
        }
        else if (auto60BE3392_val == libEA0820A1_ge_StoryTechStates_TechPurchased) {
            PurchaseItemSetState(libEA0820A1_gv_tS_Tech_UI[lv_techIndex], c_purchaseItemStatePurchased);
        }
        else {
        }
        auto9F9E5908_i = auto9F9E5908_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateTechUINewGroups () {
    // Variable Declarations
    int lv_techIndex;
    int lv_indexTech;
    text lv_debugstring;
    int lv_categoryIndex;
    int lv_indexCategory;
    int lv_groupIndex;
    int lv_indexGroup;
    int lv_groupID;

    // Automatic Variable Declarations
    int auto9204D297_i;
    int auto96CF2413_i;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_indexCategory = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    auto9204D297_i = libCamp_gv_TSC_TECH_FIRST;
    while (auto9204D297_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[auto9204D297_i];
        lv_techIndex = (lv_indexTech);
        if (((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechAvailable) || (libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechPurchased))) {
            lv_groupID = (libEA0820A1_gv_tS_Tech_GroupID[lv_techIndex]);
            lv_categoryIndex = (libEA0820A1_gv_tS_TechCategoryID[(libEA0820A1_gv_tS_TechGroupCategoryID[lv_groupID])]);
            if ((libEA0820A1_gv_tSX_TechGroup_UI_New[lv_groupID] == true)) {
                libEA0820A1_gv_tSX_TechGroup_UI_New[lv_groupID] = false;
                PurchaseGroupSetState(libEA0820A1_gv_tS_TechGroup_UI[lv_groupID], c_purchaseGroupStateEnabled);
                libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] -= 1;
            }

        }

        auto9204D297_i = auto9204D297_i + 1;
    }
    auto96CF2413_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (auto96CF2413_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[auto96CF2413_i];
        lv_categoryIndex = (lv_indexCategory);
        if ((libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] > -1)) {
            if ((libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] > 0)) {
                PurchaseCategorySetState(libEA0820A1_gv_tS_TechCategory_UI[lv_categoryIndex], c_purchaseCategoryStateNew);
            }
            else {
                PurchaseCategorySetState(libEA0820A1_gv_tS_TechCategory_UI[lv_categoryIndex], c_purchaseCategoryStateEnabled);
            }
        }

        auto96CF2413_i = auto96CF2413_i + 1;
    }
}

void libEA0820A1_gf_TS_UpdateTechVisuals () {
    // Variable Declarations
    int[51] lv_purchasedCounts;
    int[51] lv_lowMoneyCounts;
    string[51] lv_purchasedCounts_Images;
    string[51] lv_lowMoneyCounts_Images;
    int lv_techIndex;
    int lv_indexTech;
    int lv_categoryIndex;
    int lv_indexCategory;
    int lv_groupIndex;
    int lv_indexGroup;
    int lv_groupID;
    text lv_debugstring;
    int lv_slot;

    // Automatic Variable Declarations
    int autoEE6F026F_i;
    int autoE168D2D7_i;
    int auto274BB681_i;

    // Variable Initialization
    lv_indexTech = libEA0820A1_ge_StoryTech_StoryTechNone;
    lv_indexCategory = libEA0820A1_ge_StoryTechCategory_StoryTechCategoryNone;
    lv_indexGroup = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;

    // Implementation
    autoEE6F026F_i = libCamp_gv_TSC_TECH_FIRST;
    while (autoEE6F026F_i <= libCamp_gv_TSC_TECH_LAST) {
        lv_indexTech = libCamp_gv_tS_TechID[autoEE6F026F_i];
        lv_techIndex = (lv_indexTech);
        if ((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechPurchased)) {
            lv_groupID = (libEA0820A1_gv_tS_Tech_GroupID[lv_techIndex]);
            lv_purchasedCounts[lv_groupID] += 1;
        }
        else {
            if (((libEA0820A1_gf_StoryCredits() < libEA0820A1_gf_StoryTechCost(lv_indexTech)) && ((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechNew) || (libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechAvailable)))) {
                lv_groupID = (libEA0820A1_gv_tS_Tech_GroupID[lv_techIndex]);
                lv_lowMoneyCounts[lv_groupID] += 1;
            }

        }
        autoEE6F026F_i = autoEE6F026F_i + 1;
    }
    autoE168D2D7_i = libCamp_gv_TSC_TECHCATEGORY_FIRST;
    while (autoE168D2D7_i <= libCamp_gv_TSC_TECHCATEGORY_LAST) {
        lv_indexCategory = libCamp_gv_tS_TechCategoryID[autoE168D2D7_i];
        lv_categoryIndex = (lv_indexCategory);
        lv_slot = 0;
        libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] = 0;
        auto274BB681_i = libCamp_gv_TSC_TECHGROUP_FIRST;
        while (auto274BB681_i <= libCamp_gv_TSC_TECHGROUP_LAST) {
            lv_indexGroup = libCamp_gv_tS_TechGroupID[auto274BB681_i];
            lv_groupIndex = (lv_indexGroup);
            if ((lv_indexGroup != libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone) && (libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex] != c_invalidPurchaseGroupId) && (libEA0820A1_gv_tS_TechGroupCategoryID[lv_groupIndex] == lv_indexCategory)) {
                if ((libEA0820A1_gf_TS_StoryTechGroupUIUnlocked(lv_indexGroup) == true)) {
                    lv_slot += 1;
                    libEA0820A1_gv_tSX_TechCategoryCount[lv_categoryIndex] += 1;
                    PurchaseGroupSetUnitLink(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], libEA0820A1_gv_tS_TechGroupUnitType[lv_groupIndex]);
                    if ((lv_purchasedCounts[lv_groupIndex] == 2)) {
                        PurchaseGroupSetUnitLink(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], "InvisiblePylon");
                        PurchaseGroupSetIconFilePath(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], lv_purchasedCounts_Images[lv_groupIndex]);
                    }

                    if (((lv_lowMoneyCounts[lv_groupIndex] == 2) || ((lv_lowMoneyCounts[lv_groupIndex] == 1) && (lv_purchasedCounts[lv_groupIndex] == 1)))) {
                        PurchaseGroupSetUnitLink(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], "InvisiblePylon");
                        PurchaseGroupSetIconFilePath(libEA0820A1_gv_tS_TechGroup_UI[lv_groupIndex], lv_lowMoneyCounts_Images[lv_groupIndex]);
                    }

                }

            }

            auto274BB681_i = auto274BB681_i + 1;
        }
        autoE168D2D7_i = autoE168D2D7_i + 1;
    }
}

void libEA0820A1_gf_TS_BuyAllTech () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoF652C06C_ae;
    const int autoF652C06C_ai = 1;

    // Variable Initialization

    // Implementation
    autoF652C06C_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (autoF652C06C_ai >= 0 && lv_index <= autoF652C06C_ae) || (autoF652C06C_ai < 0 && lv_index >= autoF652C06C_ae) ) ; lv_index += autoF652C06C_ai ) {
        libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechPurchased;
    }
    libEA0820A1_gf_TS_UpdateTechStates();
}

void libEA0820A1_gf_TS_StoryCheckTechReqSingle (int lp_tech, int lp_requiredTech) {
    // Variable Declarations
    int lv_techIndex;
    int lv_requiredTechIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_techIndex = (lp_tech);
    lv_requiredTechIndex = (lp_requiredTech);
    if ((libEA0820A1_gv_tSX_Tech_Status[lv_requiredTechIndex] != libEA0820A1_ge_StoryTechStates_TechPurchased)) {
        libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] = libEA0820A1_ge_StoryTechStates_TechLocked;
    }
    else {
        if ((libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] == libEA0820A1_ge_StoryTechStates_TechLocked)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_techIndex] = libEA0820A1_ge_StoryTechStates_TechAvailable;
        }

    }
}

void libEA0820A1_gf_TS_StoryCheckTechReqs () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoEBB42259_ae;
    const int autoEBB42259_ai = 1;

    // Variable Initialization

    // Implementation
    autoEBB42259_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (autoEBB42259_ai >= 0 && lv_index <= autoEBB42259_ae) || (autoEBB42259_ai < 0 && lv_index >= autoEBB42259_ae) ) ; lv_index += autoEBB42259_ai ) {
        if ((libEA0820A1_gv_tS_Tech_Requires[lv_index] != libEA0820A1_ge_StoryTech_StoryTechNone)) {
            libEA0820A1_gf_TS_StoryCheckTechReqSingle(libEA0820A1_gv_tS_TechID[lv_index], libEA0820A1_gv_tS_Tech_Requires[lv_index]);
        }
    }
}

void libEA0820A1_gf_TS_HelpUnitsPanel_AddEnabledUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount == libEA0820A1_gv_tSC_HelpUnitsPanel_EnabledUnitTypesCountMax) || (libEA0820A1_gf_TS_HelpUnitsPanel_EnabledUnitTypeAlreadyExisted(lp_unitType) == true))) {
        return ;
    }

    libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount += 1;
    libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount] = lp_unitType;
    DataTableSetString(true, libEA0820A1_gf_TS_HelpUnitsPanel_UnitTypeStringID(lp_unitType), IntToString(libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount));
}

void libEA0820A1_gf_TS_HelpUnitsPanel_ResetEnabledUnitTypes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount = 0;
}

void libEA0820A1_gf_TS_HelpUnitsPanel_UpdatePanel () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoEE83A19E_ae;
    const int autoEE83A19E_ai = 1;

    // Variable Initialization

    // Implementation
    autoEE83A19E_ae = libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (autoEE83A19E_ai >= 0 && lv_index <= autoEE83A19E_ae) || (autoEE83A19E_ai < 0 && lv_index >= autoEE83A19E_ae) ) ; lv_index += autoEE83A19E_ai ) {
        if ((libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index] == null)) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_26C5D3DF") + StringExternal("Param/Value/lib_EA0820A1_26A54520") + IntToText(lv_index)), false);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_EA0820A1_43D4F39B", "A", UnitTypeGetName(libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index]));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_EA0820A1_43D4F39B"), false);
            TechTreeUnitHelp(1, libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index], true);
        }
    }
}

void libEA0820A1_gf_TS_HelpTechTree_UpdatePanel () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == false)) {
        return ;
    }

    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTStory01)) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
    else if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul03) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTZeratul04))) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", true);
    }
    else if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == true)) {
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", true);
    }
}

string libEA0820A1_gf_TS_BankSectionName (string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_section);
}

string libEA0820A1_gf_TS_BackToStoryModeLoadingImage (string lp_imageToDo) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    string auto5B665B56_val;

    // Variable Initialization

    // Implementation
    auto5B665B56_val = lp_imageToDo;
    if (auto5B665B56_val == "MarSaraLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentMarSara += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentMarSara > libEA0820A1_gv_tS_LoadingImageCountMarSara)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentMarSara = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesMarSara[libEA0820A1_gv_tSX_LoadingImageCurrentMarSara];
    }
    else if (auto5B665B56_val == "HyperionLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentHyperion += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentHyperion > libEA0820A1_gv_tS_LoadingImageCountHyperion)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentHyperion = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesHyperion[libEA0820A1_gv_tSX_LoadingImageCurrentHyperion];
    }
    else if (auto5B665B56_val == "LabLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentLab += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentLab > libEA0820A1_gv_tS_LoadingImageCountLab)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentLab = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesLab[libEA0820A1_gv_tSX_LoadingImageCurrentLab];
    }
    else if (auto5B665B56_val == "CantinaLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentCantina += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentCantina > libEA0820A1_gv_tS_LoadingImageCountCantina)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentCantina = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesCantina[libEA0820A1_gv_tSX_LoadingImageCurrentCantina];
    }
    else if (auto5B665B56_val == "ArmoryLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentArmory += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentArmory > libEA0820A1_gv_tS_LoadingImageCountArmory)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentArmory = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesArmory[libEA0820A1_gv_tSX_LoadingImageCurrentArmory];
    }
    else if (auto5B665B56_val == "CharLoadingScreenImage") {
        libEA0820A1_gv_tSX_LoadingImageCurrentChar += 1;
        if ((libEA0820A1_gv_tSX_LoadingImageCurrentChar > libEA0820A1_gv_tS_LoadingImageCountChar)) {
            libEA0820A1_gv_tSX_LoadingImageCurrentChar = 1;
        }

        lv_image = libEA0820A1_gv_tS_LoadingImagesChar[libEA0820A1_gv_tSX_LoadingImageCurrentChar];
    }
    else {
        lv_image = lp_imageToDo;
    }
    return lv_image;
}

text libEA0820A1_gf_TS_FormatLoadingScreenText (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gf_MissionPlanetInfo(lp_mission);
}

string libEA0820A1_gf_TS_MissionBankName (int lp_mission) {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tS_MapFile[(lp_mission)];
}

string libEA0820A1_gf_StoryModeRoomStates () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_tSX_RoomStates;
}

void libEA0820A1_gf_LoadCampaignData (int lp_map) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_mission;
    string lv_bankName;

    // Automatic Variable Declarations
    int auto999D6C51_val;
    playergroup autoAD6A3B6C_g;
    playergroup auto43A22600_g;
    playergroup auto81C3314A_g;
    playergroup autoD38C83CC_g;
    playergroup auto9035E669_g;
    playergroup autoA1F02F73_g;

    // Variable Initialization
    lv_indexPlayer = 1;
    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_bankName = "TRaynor01";

    // Implementation
    CampaignMode(PlayerGroupAll(), true);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeTextTag);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugSetTypeFile(1, "StoryModeDebug.txt");
        libEA0820A1_gv_debug_MapIDForPerfTest = lp_map;
        TriggerExecute(libEA0820A1_gt_Debug_StartPerformanceLogging, true, false);
    }

    libEA0820A1_gf_CP_LoadVars();
    libEA0820A1_gf_TS_InitializeStateData();
    libEA0820A1_gf_TS_InitializeStoryModeLoadingImages();
    libEA0820A1_gf_TS_InitizlizeStoryConversations();
    libEA0820A1_gf_TS_InitializeMapData();
    libEA0820A1_gf_TS_InitializeSceneData();
    libEA0820A1_gf_TS_InitializeMissionObjectiveData();
    libEA0820A1_gf_TS_InitializePlanetData();
    libEA0820A1_gf_TS_InitializeTechData();
    libEA0820A1_gf_TS_InitializeResearchData();
    libEA0820A1_gf_TS_InitializeMercData();
    libCamp_gf_TS_DebugBuyTechInitPurchasableShortcut();
    libEA0820A1_gf_TS_InitializeStoryRooms();
    libEA0820A1_gf_TS_InitializeStoryActors();
    libEA0820A1_gf_TS_InitializeMapAchievementData();
    libEA0820A1_gf_TS_LoadAllTransitionData(lp_map);
    libEA0820A1_gf_TS_UpdateStoryStates();
    if ((libEA0820A1_gf_StoryState(libEA0820A1_ge_StoryStateID_StoryStateAchievementDisabled) > 0)) {
        AchievementsDisable(1);
    }

    if ((lp_map != libEA0820A1_ge_MapID_MapTStory01) && (lp_map != libEA0820A1_ge_MapID_MapTArcade)) {
        AIDisableAllScouting();
        auto999D6C51_val = PlayerDifficulty(1);
        if (auto999D6C51_val == 4) {
            GameSetSpeedValueMinimum(c_gameSpeedFaster);
        }
        else if (auto999D6C51_val == 3) {
            GameSetSpeedValueMinimum(c_gameSpeedFast);
        }
        else {
        }
    }

    if (((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor02) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor03)) && (GameIsTransitionMap() == false)) {
        libCamp_gf_TS_DebugBuyTechAverage();
    }

    libEA0820A1_gf_ApplyCampaignTech(1);
    autoAD6A3B6C_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAD6A3B6C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser) && (PlayerType(lv_indexPlayer) != c_playerTypeNeutral)) {
            TechTreeUpgradeAddLevel(lv_indexPlayer, "TechReactorAI", 1);
            TechTreeUpgradeAddLevel(lv_indexPlayer, "haltech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "MarauderLifeBoost", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "PsiStormTech", libNtve_gf_DifficultyValueInt(0, 0, 1, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "StabilizerMedPacks", libNtve_gf_DifficultyValueInt(0, 0, 0, 1));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "InterceptorLimit4", libNtve_gf_DifficultyValueInt(1, 1, 0, 0));
            TechTreeUpgradeAddLevel(lv_indexPlayer, "InterceptorLimit6", libNtve_gf_DifficultyValueInt(0, 0, 1, 0));
        }

    }
    libEA0820A1_gf_TS_Tutorial_RestoreHistoryToUI();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTStory01) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor02, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, true);
    }
    else {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
    }
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartDifficultyPulldown, true);
    if (((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == true) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTArcade))) {
        libEA0820A1_gf_TS_PrepareForMissionLoadingScreen(libEA0820A1_gv_tS_CurrentMap, true);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectivePanel");
    libEA0820A1_gv_zS_ObjectivePanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 30);
    auto43A22600_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto43A22600_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
        }

    }
    auto81C3314A_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto81C3314A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    GameCheatAllow(c_gameCheatNoVictory, false);
    GameCheatAllow(c_gameCheatNoDefeat, false);
    autoD38C83CC_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD38C83CC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
    }
    if ((libEA0820A1_gv_tS_InStoryMode == false)) {
        autoA1F02F73_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA1F02F73_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, true);
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, true);
        }
    }
    else {
        auto9035E669_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto9035E669_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
            UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_8935EB40"), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_0B6EB857") + libNtve_gf_ConvertBooleanToText(libCamp_gf_CampaignDebugModeIsOn("ProgressCheat"))), false);
    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTStory01) && (libCamp_gf_CampaignDebugModeIsOn("ProgressCheat") == true) && (libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed) == 0)) {
        while (!((libCamp_gv_tS_DebugProgressDialogOpened == false))) {
            Wait(0.5, c_timeReal);
        }
    }

}

void libEA0820A1_gf_PrepareForMission (int lp_nextMission, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, int lp_difficulty) {
    // Variable Declarations
    string lv_image;
    int lv_planet;
    text lv_title;
    text lv_subTitle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libEA0820A1_ge_PlanetID_PlanetNone;
    lv_title = StringToText("");
    lv_subTitle = StringToText("");

    // Implementation
    SetNextMissionDifficulty(PlayerGroupAll(), lp_difficulty);
    if ((lp_nextIsSimulation == false)) {
        libEA0820A1_gf_TS_SetCampaignDifficulty(lp_difficulty);
    }

    libEA0820A1_gf_TS_SaveAllTransitionData((lp_nextIsSimulation == true), lp_nextIsVictoryPlayAgain, false);
    GameSetNextMap(("Campaign/" + libEA0820A1_gv_tS_MapFile[(lp_nextMission)]));
    libEA0820A1_gf_TS_PrepareForMissionLoadingScreen(lp_nextMission, false);
}

void libEA0820A1_gf_TS_PrepareForMissionLoadingScreen (int lp_nextMission, bool lp_restart) {
    // Variable Declarations
    string lv_image;
    int lv_planet;
    text lv_title;
    text lv_subTitle;
    text lv_help;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_planet = libEA0820A1_ge_PlanetID_PlanetNone;
    lv_title = StringToText("");
    lv_subTitle = StringToText("");

    // Implementation
    lv_image = libEA0820A1_gf_MissionLoadingScreenImage(lp_nextMission);
    lv_title = (StringExternal("Param/Value/lib_EA0820A1_5CFA9955"));
    lv_subTitle = (StringExternal("Param/Value/lib_EA0820A1_EF1812C1") + libEA0820A1_gf_MissionNameInUpperCase(lp_nextMission) + StringExternal("Param/Value/lib_EA0820A1_374389D6"));
    lv_help = StringExternal("Param/Value/lib_EA0820A1_A62F0FF1");
    if ((libEA0820A1_gf_MapTypeCheck(lp_nextMission, libEA0820A1_ge_MapType_Mission) == true)) {
        if ((lp_nextMission == libEA0820A1_ge_MapID_MapTValerian03) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_ge_MissionStatus_Completed) == true)) {
            if ((lp_restart == false)) {
                lv_help = ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Help 2");
            }
            else {
                lv_help = ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Restart 2");
            }
        }
        else {
            if ((lp_restart == false)) {
                lv_help = ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Help");
            }
            else {
                lv_help = ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_nextMission), "Loading Screen Restart");
            }
        }
    }

    if ((lp_nextMission == libEA0820A1_ge_MapID_MapTArcade)) {
        if ((lp_restart == true)) {
            UISetRestartLoadingScreen(StringExternal("Param/Value/lib_EA0820A1_EF380455"));
        }

        UISetNextLoadingScreenImageScale(c_scaleAspect);
        UISetNextLoadingScreenTextPosition(c_anchorTop, 0, 250, 750, 400);
    }
    else {
        if ((lp_restart == true)) {
            UISetRestartLoadingScreen(lv_help);
        }
        else {
            UISetNextLoadingScreen(lv_image, lv_title, lv_subTitle, StringToText(""), lv_help, true);
            UISetNextLoadingScreenImageScale(c_scaleAspect);
            UISetNextLoadingScreenTextPosition(c_anchorTopLeft, 50, 250, 750, 400);
        }
    }
}

void libEA0820A1_gf_PrepareForStoryMode (int lp_resultFromVictory, int lp_difficulty) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    bool lv_isActuallyVictory;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_803D0869") + libNtve_gf_ConvertBooleanToText((lp_resultFromVictory == c_gameOverVictory)) + StringExternal("Param/Value/lib_EA0820A1_F716FCF8") + DifficultyNameCampaign(lp_difficulty)), false);
    lv_isActuallyVictory = ((lp_resultFromVictory == c_gameOverVictory) || libEA0820A1_gv_tSX_IsVictoryPlayAgain);
    if ((libEA0820A1_gv_tSX_IsSimulation == false) && (libEA0820A1_gf_MapTypeCheck(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tS_CurrentMap), libEA0820A1_ge_MapType_Mission) == true) && (lv_isActuallyVictory == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_6480131F")), false);
        if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian03)) {
            libEA0820A1_gf_CP_SetCampaignCompleted(true);
        }

        libEA0820A1_gf_TS_SetLastSuccessfulMission(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tS_CurrentMap));
        libEA0820A1_gf_TS_CompleteMission(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tS_CurrentMap));
        libEA0820A1_gf_TS_UpdateTransitionVars();
    }
    else {
        if ((libEA0820A1_gv_tS_Horner05sSimulationBeforeCompleted == true) && (lv_isActuallyVictory == true)) {
            libEA0820A1_gf_TS_CompleteMission(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tS_CurrentMap));
            libEA0820A1_gf_TS_UpdateTransitionVars();
        }

    }
    SetNextMissionDifficulty(PlayerGroupSingle(1), lp_difficulty);
    if (((libEA0820A1_gv_tSX_IsSimulation == true) || (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian03, libEA0820A1_ge_MissionStatus_Completed) == true))) {
        lv_image = "HyperionLoadingScreenImage";
    }
    else {
        if ((lv_isActuallyVictory == true)) {
            lv_image = libEA0820A1_gv_tS_MapBackLoadingImage[(libEA0820A1_gv_tS_CurrentMap)];
        }
        else {
            lv_image = libEA0820A1_gv_tS_MapBackDefeatLoadingImage[(libEA0820A1_gv_tS_CurrentMap)];
            if ((lv_image == null)) {
                lv_image = libEA0820A1_gv_tS_MapBackLoadingImage[(libEA0820A1_gv_tS_CurrentMap)];
            }

        }
    }
    lv_image = libEA0820A1_gf_TS_BackToStoryModeLoadingImage(lv_image);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_CBBA6684") + StringToText(lv_image)), false);
    UISetNextLoadingScreen(lv_image, StringToText(""), StringToText(""), StringToText(""), StringExternal("Param/Value/lib_EA0820A1_B9C1516D"), false);
    UISetNextLoadingScreenImageScale(c_scaleAspect);
    UISetNextLoadingScreenTextPosition(c_anchorTopLeft, 40, 60, 1100, 400);
    libEA0820A1_gf_TS_SaveAllTransitionData(false, false, (lp_resultFromVictory == c_gameOverDefeat));
    lv_mapID = libEA0820A1_ge_MapID_MapTStory01;
    GameSetNextMap(("Campaign/" + libEA0820A1_gv_tS_MapFile[lv_mapID]));
}

void libEA0820A1_gf_PrepareForStoryModeTransitionalSave () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_OpenCampaignBank();
    libEA0820A1_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libEA0820A1_ge_TS_BankSavingType_Normal);
    BankSave(BankLastCreated());
    libEA0820A1_gf_TS_SaveMissionBanks();
}

void libEA0820A1_gf_SetStoryModeRoomStates (string lp_roomStates) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_RoomStates = lp_roomStates;
}

void libEA0820A1_gf_RegisterStoryModeRoomStatesDefaultCallback (trigger lp_defaultCallback) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_RoomStatesDefaultCallback = lp_defaultCallback;
}

void libEA0820A1_gf_TS_LoadAllTransitionData (int lp_map) {
    // Variable Declarations
    string lv_section;
    int lv_indexObjective;
    string lv_bankName;
    int lv_campaignDifficulty;

    // Automatic Variable Declarations
    int auto81489F63_i;

    // Variable Initialization
    lv_section = "Terran";
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_bankName = "TRaynor01";
    lv_campaignDifficulty = 1;

    // Implementation
    if ((BankExists(libEA0820A1_gv_tS_BankName, 1) == true)) {
        libEA0820A1_gf_TS_OpenCampaignBank();
        libEA0820A1_gf_TS_LoadTransitionVars(BankLastCreated(), false);
        if ((libEA0820A1_gf_MapTypeCheck(lp_map, libEA0820A1_ge_MapType_Mission) == true)) {
            if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTHorner05S) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHorner05S, libEA0820A1_ge_MissionStatus_Completed) == false) && (libEA0820A1_gv_tSX_IsSimulation == true)) {
                libEA0820A1_gv_tS_Horner05sSimulationBeforeCompleted = true;
            }

            auto81489F63_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (auto81489F63_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto81489F63_i];
                if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_indexObjective, libEA0820A1_ge_MissionObjectiveState_ObjectiveAvailable) == true)) {
                    libEA0820A1_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libEA0820A1_ge_MissionObjectiveState_ObjectiveAvailable;
                }
                else if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_indexObjective, libEA0820A1_ge_MissionObjectiveState_ObjectiveCompleted) == true)) {
                    libEA0820A1_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libEA0820A1_ge_MissionObjectiveState_ObjectiveCompleted;
                }
                else if ((libEA0820A1_gf_MissionObjectiveStateCheck(lv_indexObjective, libEA0820A1_ge_MissionObjectiveState_ObjectiveUndiscovered) == true)) {
                    libEA0820A1_gv_tS_NonSnapShotObjectiveStates[(lv_indexObjective)] = libEA0820A1_ge_MissionObjectiveState_ObjectiveUndiscovered;
                }
                libEA0820A1_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)] = libEA0820A1_gf_MissionObjectiveProgress(lv_indexObjective);
                auto81489F63_i = auto81489F63_i + 1;
            }
            libEA0820A1_gv_tS_NonSnapShotMissionDifficultyCompleted = libEA0820A1_gf_MissionDifficultyCompleted(lp_map, PlayerDifficulty(1));
            libEA0820A1_gv_tS_NonSnapShotMissionBestTime = libEA0820A1_gf_MissionCompleteBestTime(lp_map, PlayerDifficulty(1));
            libEA0820A1_gv_tS_NonSnapShotMissionResearchProgress[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_StoryResearchMissionProgress(lp_map, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss);
            libEA0820A1_gv_tS_NonSnapShotMissionResearchProgress[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_StoryResearchMissionProgress(lp_map, libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg);
        }

        lv_campaignDifficulty = libEA0820A1_gf_TS_CampaignDifficulty();
        libEA0820A1_gf_TS_OpenMissionBanks();
        libEA0820A1_gf_TS_SetCampaignDifficulty(lv_campaignDifficulty);
    }
    else {
        libEA0820A1_gf_TS_DefaultTransitionVars(true, true, true, true);
        libEA0820A1_gf_TS_SetCampaignDifficulty(PlayerDifficulty(1));
    }
}

void libEA0820A1_gf_TS_SaveAllTransitionData (bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat) {
    // Variable Declarations
    string lv_section;
    int lv_saveAll;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section = "Terran";
    lv_saveAll = libEA0820A1_ge_TS_BankSavingType_Normal;

    // Implementation
    libEA0820A1_gf_TS_OpenCampaignBank();
    libEA0820A1_gv_tSX_LastMap = libEA0820A1_gv_tS_CurrentMap;
    if ((libEA0820A1_gv_tSX_IsVictoryPlayAgain == true)) {
        libEA0820A1_gv_tSX_LastMapSuccess = true;
    }
    else {
        libEA0820A1_gv_tSX_LastMapSuccess = (lp_resultFromDefeat == false);
    }
    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gv_tSX_LastMap), libEA0820A1_ge_MapType_Mission) == true)) {
        libEA0820A1_gv_tSX_LastMission = libEA0820A1_gv_tSX_LastMap;
        libEA0820A1_gv_tSX_LastMissionSuccess = libEA0820A1_gv_tSX_LastMapSuccess;
        libEA0820A1_gv_tSX_LastMissionSimulation = libEA0820A1_gv_tSX_IsSimulation;
    }

    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == true) && (((libEA0820A1_gv_tSX_IsSimulation == true) && (libEA0820A1_gv_tS_Horner05sSimulationBeforeCompleted == false)) || (libEA0820A1_gv_tSX_IsVictoryPlayAgain == true))) {
        lv_saveAll = libEA0820A1_ge_TS_BankSavingType_SaveSimulation;
    }
    else {
        lv_saveAll = libEA0820A1_ge_TS_BankSavingType_Normal;
    }
    libEA0820A1_gf_TS_SaveTransitionVars(BankLastCreated(), lp_nextIsSimulation, lp_nextIsVictoryPlayAgain, lp_resultFromDefeat, lv_saveAll);
    BankSave(BankLastCreated());
    libEA0820A1_gf_TS_SaveMissionBanks();
}

void libEA0820A1_gf_TS_DefaultTransitionVars (bool lp_includeTransitionDetails, bool lp_includeTech, bool lp_includeMissionFlow, bool lp_includeStates) {
    // Variable Declarations
    int lv_index;
    int lv_indexMission;
    int lv_convoIndex;
    int lv_indexObjective;
    int lv_indexStoryState;
    int lv_iindexScene;

    // Automatic Variable Declarations
    int auto981F8390_i;
    int auto3D81D718_i;
    int autoD4A36DDA_i;
    int auto9146D60A_ae;
    const int auto9146D60A_ai = 1;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_indexStoryState = libEA0820A1_ge_StoryStateID_StoryStateNone;
    lv_iindexScene = libEA0820A1_ge_SceneID_SceneNone;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_508B9488"), false);
    if ((lp_includeTransitionDetails == true)) {
        libEA0820A1_gv_tSX_IsSimulation = false;
        libEA0820A1_gv_tSX_IsVictoryPlayAgain = false;
        libEA0820A1_gv_tSX_LastMap = libEA0820A1_ge_MapID_MapNone;
        libEA0820A1_gv_tSX_LastMapSuccess = true;
        libEA0820A1_gv_tSX_LastMission = libEA0820A1_ge_MapID_MapNone;
        libEA0820A1_gv_tSX_LastMissionSuccess = true;
        libEA0820A1_gv_tSX_LastMissionSimulation = false;
        libEA0820A1_gf_TS_SetLastSuccessfulMission(libEA0820A1_ge_MapID_MapNone);
    }

    if ((lp_includeMissionFlow == true)) {
        auto981F8390_i = libCamp_gv_TSC_MISSION_FIRST;
        while (auto981F8390_i <= libCamp_gv_TSC_MISSION_LAST) {
            lv_indexMission = libCamp_gv_tS_MapID[auto981F8390_i];
            libEA0820A1_gf_TS_MarkMissionAsStatus(lv_indexMission, libEA0820A1_ge_MissionStatus_Locked);
            libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 1, false);
            libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 2, false);
            libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 3, false);
            libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 4, false);
            libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 1, 0);
            libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 2, 0);
            libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 3, 0);
            libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 4, 0);
            auto981F8390_i = auto981F8390_i + 1;
        }
        libEA0820A1_gf_TS_MarkMissionAsStatus(libEA0820A1_ge_MapID_MapTRaynor01, libEA0820A1_ge_MissionStatus_Available);
    }

    if ((lp_includeTech == true)) {
        libEA0820A1_gf_TS_ResetTechData();
    }

    if ((lp_includeStates == true)) {
        libEA0820A1_gf_SetStoryCredits(0);
        libEA0820A1_gf_TS_ResetResearchData();
        libEA0820A1_gf_TS_ResetMercData();
        auto3D81D718_i = libCamp_gv_TSC_STORYSTATE_FIRST;
        while (auto3D81D718_i <= libCamp_gv_TSC_STORYSTATE_LAST) {
            lv_indexStoryState = auto3D81D718_i;
            libEA0820A1_gf_SetStoryState(lv_indexStoryState, 0);
            auto3D81D718_i = auto3D81D718_i + 1;
        }
        libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
        ConversationDataResetStateValues("MissionObjective");
        autoD4A36DDA_i = libCamp_gv_TSC_SCENE_FIRST;
        while (autoD4A36DDA_i <= libCamp_gv_TSC_SCENE_LAST) {
            lv_iindexScene = libCamp_gv_tS_SceneIDs[autoD4A36DDA_i];
            libEA0820A1_gf_SetScenePlayed(lv_iindexScene, false);
            autoD4A36DDA_i = autoD4A36DDA_i + 1;
        }
        libCamp_gv_tSX_DebugTechCheatOption = libCamp_ge_TS_DebugTechCheatOption_Average;
        if ((libEA0820A1_gv_tS_RoomStatesDefaultCallback != null)) {
            TriggerExecute(libEA0820A1_gv_tS_RoomStatesDefaultCallback, true, false);
        }
        else {
            libEA0820A1_gv_tSX_RoomStates = "";
        }
        libEA0820A1_gv_tSX_LoadingImageCurrentMarSara = 0;
        libEA0820A1_gv_tSX_LoadingImageCurrentHyperion = 0;
        libEA0820A1_gv_tSX_LoadingImageCurrentLab = 0;
        libEA0820A1_gv_tSX_LoadingImageCurrentCantina = 0;
        libEA0820A1_gv_tSX_LoadingImageCurrentArmory = 0;
        libEA0820A1_gv_tSX_LoadingImageCurrentChar = 0;
        libEA0820A1_gf_TS_HelpUnitsPanel_ResetEnabledUnitTypes();
        libEA0820A1_gf_TS_Tutorial_ResetHistory();
        auto9146D60A_ae = libEA0820A1_gv_tS_ConvoCount;
        lv_index = 1;
        for ( ; ( (auto9146D60A_ai >= 0 && lv_index <= auto9146D60A_ae) || (auto9146D60A_ai < 0 && lv_index >= auto9146D60A_ae) ) ; lv_index += auto9146D60A_ai ) {
            ConversationDataResetNodeState(libEA0820A1_gv_tS_Convos[lv_index]);
        }
        ConversationDataResetStateValues("ABChoice");
        ConversationDataResetStateValues("ABChoiceRewards");
        ConversationDataResetStateValues("ArcadeGameVariables");
        ConversationDataResetStateValues("CharacterLocationStatus");
        ConversationDataResetStateValues("Characters");
        ConversationDataResetStateValues("Credits");
        ConversationDataResetStateValues("DebriefRoomChange");
        ConversationDataResetStateValues("Hotspots");
        ConversationDataResetStateValues("LabResearch");
        ConversationDataResetStateValues("LabResearchCompleted");
        ConversationDataResetStateValues("LabResearchObject");
        ConversationDataResetStateValues("LabResearchUnlocked");
        ConversationDataResetStateValues("MissionCompletedCount");
        ConversationDataResetStateValues("MissionObjective");
        ConversationDataResetStateValues("NewMissionOpened");
        ConversationDataResetStateValues("StoryNews");
        ConversationDataResetStateValues("StoryState");
        ConversationDataResetStateValues("StoryTips");
        ConversationDataResetStateValues("Tech");
        ConversationDataResetStateValues("TechState");
        ConversationDataResetStateValues("Timestamps");
        ConversationDataResetStateValues("WritingCustomStates");
        ConversationDataResetStateValues("ArcadeGameVariables");
    }

}

int libEA0820A1_gf_TS_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libEA0820A1_gf_TS_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libEA0820A1_gf_TS_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == false)) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libEA0820A1_gf_TS_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libEA0820A1_gf_TS_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libEA0820A1_gf_TS_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
        return ;
    }

    BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
}

string libEA0820A1_gf_TS_CampaignDifficultyBankKey (int lp_mission, int lp_difficulty) {
    // Variable Declarations
    string lv_key;

    // Automatic Variable Declarations
    int auto8F597A20_val;

    // Variable Initialization
    lv_key = "";

    // Implementation
    auto8F597A20_val = lp_difficulty;
    if (auto8F597A20_val == 1) {
        lv_key = "Casual";
    }
    else if (auto8F597A20_val == 2) {
        lv_key = "Normal";
    }
    else if (auto8F597A20_val == 3) {
        lv_key = "Hard";
    }
    else if (auto8F597A20_val == 4) {
        lv_key = "Brutal";
    }
    else {
    }
    return (IntToString((lp_mission)) + "-" + lv_key);
}

void libEA0820A1_gf_TS_LoadTransitionVars (bank lp_sourceBank, bool lp_simulation) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;
    int lv_indexMission;
    int lv_indexObjective;
    int lv_indexResearch;
    int lv_indexMerc;
    int lv_tempTechStatus;
    int lv_indexStoryState;
    int lv_indexScene;
    int lv_normalDifficulty;
    int lv_count;
    text lv_title;
    text lv_description;
    string lv_icon;
    string lv_movie;

    // Automatic Variable Declarations
    int auto275A60FC_i;
    int auto2E91DBF1_i;
    int auto494651F6_i;
    int autoB9CB97B4_i;
    int auto3934718A_i;
    int auto1D3C057F_i;
    int auto755D5FE4_i;
    int auto2F596E87_i;
    int auto107F95ED_ae;
    const int auto107F95ED_ai = 1;
    int auto0489FFF1_val;
    int auto7B7CC96A_ae;
    const int auto7B7CC96A_ai = 1;
    int auto9712000B_ae;
    const int auto9712000B_ai = 1;
    int auto33B5C809_i;
    int autoF8A9FA0E_ae;
    const int autoF8A9FA0E_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_indexMerc = libEA0820A1_ge_MapID_MapNone;
    lv_indexStoryState = libEA0820A1_ge_StoryStateID_StoryStateNone;
    lv_indexScene = libEA0820A1_ge_SceneID_SceneNone;
    lv_normalDifficulty = 2;
    lv_title = StringToText("");
    lv_description = StringToText("");

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_EC4BAC26"), false);
    if ((lp_simulation == false)) {
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryStage");
        libEA0820A1_gv_tSX_IsSimulation = libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsSimulation)), false);
        libEA0820A1_gv_tSX_IsVictoryPlayAgain = libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsVictoryPlayAgain)), false);
        libEA0820A1_gv_tSX_LastMap = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMap)), 0);
        libEA0820A1_gv_tSX_LastMapSuccess = libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMapSuccess)), false);
        libEA0820A1_gv_tSX_LastMission = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMission)), 0);
        libEA0820A1_gv_tSX_LastMissionSuccess = libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSuccess)), false);
        libEA0820A1_gv_tSX_LastMissionSimulation = libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSimulation)), false);
        libEA0820A1_gf_TS_SetLastSuccessfulMission(libEA0820A1_gf_TS_MapIDFromIndex(libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastSuccessfulMission)), 0)));
        libEA0820A1_gf_SetStoryCredits(libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyCredits)), 0));
    }

    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionAvailableAge");
    auto275A60FC_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto275A60FC_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto275A60FC_i];
        libEA0820A1_gf_TS_SetMissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Available, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0));
        auto275A60FC_i = auto275A60FC_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletedAge");
    auto2E91DBF1_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto2E91DBF1_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto2E91DBF1_i];
        libEA0820A1_gf_TS_SetMissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0));
        auto2E91DBF1_i = auto2E91DBF1_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletion");
    auto494651F6_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto494651F6_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto494651F6_i];
        libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 1, libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), false));
        libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 2, libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), false));
        libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 3, libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), false));
        libEA0820A1_gf_TS_SetMissionDifficultyCompleted(lv_indexMission, 4, libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), false));
        auto494651F6_i = auto494651F6_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionBestTime");
    autoB9CB97B4_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoB9CB97B4_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoB9CB97B4_i];
        libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 1, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), 0));
        libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 2, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), 0));
        libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 3, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), 0));
        libEA0820A1_gf_TS_SetMissionCompleteBestTime(lv_indexMission, 4, libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), 0));
        autoB9CB97B4_i = autoB9CB97B4_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveProgress");
    ConversationDataLoadStateValues("MissionObjective", lp_sourceBank, lv__SectionName);
    if ((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_StoryMode) == true)) {
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
        libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    }
    else {
        libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent = 0;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressProtoss");
    libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto3934718A_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto3934718A_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto3934718A_i];
        libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0);
        auto3934718A_i = auto3934718A_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressZerg");
    libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto1D3C057F_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto1D3C057F_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto1D3C057F_i];
        libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMission)), 0);
        auto1D3C057F_i = auto1D3C057F_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchOldLevel");
    libEA0820A1_gv_tSX_ResearchPointsOld[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libEA0820A1_gv_tSX_ResearchPointsOld[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchOldLevelUI");
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchState");
    auto755D5FE4_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto755D5FE4_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto755D5FE4_i];
        libEA0820A1_gv_tSX_ResearchState[(lv_indexResearch)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexResearch)), (libEA0820A1_ge_StoryResearchState_ResearchStateAvailable));
        auto755D5FE4_i = auto755D5FE4_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchPointsConverted");
    libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), 0);
    libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MercStatus");
    auto2F596E87_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto2F596E87_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto2F596E87_i];
        libEA0820A1_gv_tSX_MercStatus[(lv_indexMerc)] = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((lv_indexMerc)), 0);
        auto2F596E87_i = auto2F596E87_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("TechStatus");
    auto107F95ED_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (auto107F95ED_ai >= 0 && lv_index <= auto107F95ED_ae) || (auto107F95ED_ai < 0 && lv_index >= auto107F95ED_ae) ) ; lv_index += auto107F95ED_ai ) {
        lv_tempTechStatus = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(lv_index), (libEA0820A1_ge_StoryTechStates_TechUnavailable));
        auto0489FFF1_val = lv_tempTechStatus;
        if (auto0489FFF1_val == (libEA0820A1_ge_StoryTechStates_TechLocked)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechLocked;
        }
        else if (auto0489FFF1_val == (libEA0820A1_ge_StoryTechStates_TechNew)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechNew;
        }
        else if (auto0489FFF1_val == (libEA0820A1_ge_StoryTechStates_TechAvailable)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechAvailable;
        }
        else if (auto0489FFF1_val == (libEA0820A1_ge_StoryTechStates_TechPurchased)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechPurchased;
        }
        else if (auto0489FFF1_val == (libEA0820A1_ge_StoryTechStates_TechUnavailable)) {
            libEA0820A1_gv_tSX_Tech_Status[lv_index] = libEA0820A1_ge_StoryTechStates_TechUnavailable;
        }
        else {
        }
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("HelpUnitsPanel");
    lv_count = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString(0), 0);
    auto7B7CC96A_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto7B7CC96A_ai >= 0 && lv_index <= auto7B7CC96A_ae) || (auto7B7CC96A_ai < 0 && lv_index >= auto7B7CC96A_ae) ) ; lv_index += auto7B7CC96A_ai ) {
        if ((BankKeyExists(lp_sourceBank, lv__SectionName, IntToString(lv_index)) == true)) {
            libEA0820A1_gf_TS_HelpUnitsPanel_AddEnabledUnitType(UnitTypeFromString(libEA0820A1_gf_TS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString(lv_index), "")));
        }

    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("TutorialHistory");
    lv_count = BankValueGetAsInt(lp_sourceBank, lv__SectionName, IntToString(0));
    auto9712000B_ae = lv_count;
    lv_index = 1;
    for ( ; ( (auto9712000B_ai >= 0 && lv_index <= auto9712000B_ae) || (auto9712000B_ai < 0 && lv_index >= auto9712000B_ae) ) ; lv_index += auto9712000B_ai ) {
        lv_title = BankValueGetAsText(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_1"));
        lv_description = BankValueGetAsText(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_2"));
        lv_icon = libEA0820A1_gf_TS_Tutorial_ConvertStringToImage(BankValueGetAsString(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_3")));
        lv_movie = libEA0820A1_gf_TS_Tutorial_ConvertStringToMovie(BankValueGetAsString(lp_sourceBank, lv__SectionName, (IntToString(lv_index) + "_4")));
        libEA0820A1_gf_TS_Tutorial_AddToHistory(lv_title, lv_description, lv_icon, lv_movie);
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryState");
    ConversationDataLoadStateValues("StoryState", lp_sourceBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ScenePlayed");
    auto33B5C809_i = libCamp_gv_TSC_SCENE_FIRST;
    while (auto33B5C809_i <= libCamp_gv_TSC_SCENE_LAST) {
        lv_indexScene = libCamp_gv_tS_SceneIDs[auto33B5C809_i];
        libEA0820A1_gf_SetScenePlayed(lv_indexScene, libEA0820A1_gf_TS_LoadTransitionVarBoolean(lp_sourceBank, lv__SectionName, IntToString((lv_indexScene)), false));
        auto33B5C809_i = auto33B5C809_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("SceneExtraObjects");
    ConversationDataLoadStateValues("SceneExtraObjects", lp_sourceBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("NewsPlayed");
    ConversationDataLoadStateValues("StoryNews", lp_sourceBank, lv__SectionName);
    libEA0820A1_gf_TS_UpdateNewMissionOpened();
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Tips");
    ConversationDataLoadStateValues("StoryTips", lp_sourceBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryMisc");
    libEA0820A1_gv_tSX_CampaignDifficulty = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyCampaignDifficulty)), 0);
    libEA0820A1_gv_tSX_RoomStates = libEA0820A1_gf_TS_LoadTransitionVarString(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyRoomStates)), "");
    libEA0820A1_gv_tSX_LoadingImageCurrentMarSara = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageMarSara)), 0);
    libEA0820A1_gv_tSX_LoadingImageCurrentHyperion = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageHyperion)), 0);
    libEA0820A1_gv_tSX_LoadingImageCurrentLab = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageLab)), 0);
    libEA0820A1_gv_tSX_LoadingImageCurrentCantina = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageCantina)), 0);
    libEA0820A1_gv_tSX_LoadingImageCurrentArmory = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageArmory)), 0);
    libEA0820A1_gv_tSX_LoadingImageCurrentChar = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageChar)), 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Conversation");
    autoF8A9FA0E_ae = libEA0820A1_gv_tS_ConvoCount;
    lv_index = 1;
    for ( ; ( (autoF8A9FA0E_ai >= 0 && lv_index <= autoF8A9FA0E_ae) || (autoF8A9FA0E_ai < 0 && lv_index >= autoF8A9FA0E_ae) ) ; lv_index += autoF8A9FA0E_ai ) {
        ConversationDataLoadNodeState(libEA0820A1_gv_tS_Convos[lv_index], lp_sourceBank, lv__SectionName);
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Hotspots");
    ConversationDataLoadStateValues("Hotspots", lp_sourceBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ArcadeGame");
    ConversationDataLoadStateValues("ArcadeGameVariables", lp_sourceBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("DebugTechCheatOption");
    libCamp_gv_tSX_DebugTechCheatOption = libCamp_gf_TS_DebugConvertIntegerToTechCheatOption(libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_sourceBank, lv__SectionName, "0", 0));
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_36BCCAAD"), false);
}

void libEA0820A1_gf_TS_SaveTransitionVars (bank lp_targetBank, bool lp_nextIsSimulation, bool lp_nextIsVictoryPlayAgain, bool lp_resultFromDefeat, int lp_saveType) {
    // Variable Declarations
    string lv__SectionName;
    int lv_index;
    int lv_indexMission;
    int lv_indexObjective;
    int lv_indexResearch;
    int lv_indexMerc;
    int lv_indexStoryState;
    int lv_indexScene;
    int lv_difficulty;
    int lv_availableAge;
    int lv_completedAge;
    int[101] lv_tempObjectiveProgress;

    // Automatic Variable Declarations
    int auto1112F6E4_i;
    int auto4856289C_i;
    int autoEBA7FCD2_i;
    int auto8CF006B6_i;
    int auto65D616EC_i;
    int auto25461537_i;
    int auto1270899F_i;
    int auto9311879D_ae;
    const int auto9311879D_ai = 1;
    int autoD12CC5B1_i;
    int auto8EDB83A2_i;
    int autoEFFFF211_i;
    int autoE9902B96_i;
    int auto71B9626E_i;
    int autoA5EEA13E_i;
    int auto2A43DB91_i;
    int autoCA9ECC47_i;
    int autoF728B136_ae;
    const int autoF728B136_ai = 1;
    int auto92C90F69_ae;
    const int auto92C90F69_ai = 1;
    int auto9055044C_ae;
    const int auto9055044C_ai = 1;
    int auto7B0BB6C6_i;
    int autoA93790CC_ae;
    const int autoA93790CC_ai = 1;

    // Variable Initialization
    lv__SectionName = "";
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_indexStoryState = libEA0820A1_ge_StoryStateID_StoryStateNone;
    lv_indexScene = libEA0820A1_ge_SceneID_SceneNone;
    lv_difficulty = 2;

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_266FCB80"), false);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryStage");
    libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsSimulation)), lp_nextIsSimulation, false);
    libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyIsVictoryPlayAgain)), lp_nextIsVictoryPlayAgain, false);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMap)), libEA0820A1_gv_tSX_LastMap, 0);
    libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMapSuccess)), libEA0820A1_gv_tSX_LastMapSuccess, false);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMission)), libEA0820A1_gv_tSX_LastMission, 0);
    libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSuccess)), libEA0820A1_gv_tSX_LastMissionSuccess, false);
    libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastMissionSimulation)), libEA0820A1_gv_tSX_LastMissionSimulation, false);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyLastSuccessfulMission)), (libEA0820A1_gf_LastSuccessfulMission()), 0);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryStageKey_TStoryBankStoryStageKeyCredits)), libEA0820A1_gf_StoryCredits(), 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryMisc");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyCampaignDifficulty)), libEA0820A1_gv_tSX_CampaignDifficulty, 0);
    if ((libEA0820A1_gf_StoryState(libEA0820A1_ge_StoryStateID_StoryStateAchievementDisabled) > 0)) {
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryState");
        ConversationDataSaveStateValue("StoryState|AchievementDisabled", lp_targetBank, lv__SectionName);
    }

    if ((lp_resultFromDefeat == true)) {
        return ;
    }

    if ((libCamp_gv_tS_DebugProgressCheating == false) && (libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == true) && (lp_saveType == libEA0820A1_ge_TS_BankSavingType_SaveSimulation)) {
        if ((libEA0820A1_gf_StoryState(libEA0820A1_ge_StoryStateID_StoryStateHorner05sUnlocked) > 0)) {
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryState");
            ConversationDataSaveStateValue("StoryState|HornerSecretMissionOn", lp_targetBank, lv__SectionName);
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionAvailableAge");
            lv_availableAge = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_MapID_MapTHorner05S)), 0);
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletedAge");
            lv_completedAge = libEA0820A1_gf_TS_LoadTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_MapID_MapTHorner05S)), 0);
            if ((lv_completedAge == 0) && (lv_availableAge == 0)) {
                lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionAvailableAge");
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_MapID_MapTHorner05S)), 1, 0);
            }

        }

        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent, 0);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveProgress");
        if ((libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent > 0)) {
            auto1112F6E4_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (auto1112F6E4_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto1112F6E4_i];
                lv_tempObjectiveProgress[(lv_indexObjective)] = libEA0820A1_gf_MissionObjectiveProgress(lv_indexObjective);
                if ((libEA0820A1_gf_MissionObjectiveMap(lv_indexObjective) != libEA0820A1_gv_tS_CurrentMap)) {
                    libEA0820A1_gf_SetMissionObjectiveProgress(lv_indexObjective, libEA0820A1_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)]);
                }

                if ((lv_indexObjective == libEA0820A1_ge_MissionObjective_TTosh03BObjective4)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_82D49728") + IntToText(libEA0820A1_gv_tS_NonSnapShotObjectiveProgress[(lv_indexObjective)])), false);
                    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_FC762723") + IntToText(libEA0820A1_gf_MissionObjectiveProgress(lv_indexObjective))), false);
                }

                auto1112F6E4_i = auto1112F6E4_i + 1;
            }
            ConversationDataSaveStateValues("MissionObjective", lp_targetBank, lv__SectionName);
            auto4856289C_i = libCamp_gv_TSC_OBJECTIVE_FIRST;
            while (auto4856289C_i <= libCamp_gv_TSC_OBJECTIVE_LAST) {
                lv_indexObjective = libCamp_gv_tS_MissionObjIDs[auto4856289C_i];
                libEA0820A1_gf_SetMissionObjectiveProgress(lv_indexObjective, lv_tempObjectiveProgress[(lv_indexObjective)]);
                auto4856289C_i = auto4856289C_i + 1;
            }
        }

        lv_difficulty = PlayerDifficulty(1);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletion");
        if ((libEA0820A1_gv_tS_NonSnapShotMissionDifficultyCompleted == false)) {
            libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(libEA0820A1_gv_tS_CurrentMap, lv_difficulty), libEA0820A1_gf_MissionDifficultyCompleted(libEA0820A1_gv_tS_CurrentMap, lv_difficulty), false);
        }

        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionBestTime");
        if (((libEA0820A1_gv_tS_NonSnapShotMissionBestTime <= 0) || (libEA0820A1_gf_MissionCompleteBestTime(libEA0820A1_gv_tS_CurrentMap, lv_difficulty) < libEA0820A1_gv_tS_NonSnapShotMissionBestTime))) {
            libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(libEA0820A1_gv_tS_CurrentMap, lv_difficulty), libEA0820A1_gf_MissionCompleteBestTime(libEA0820A1_gv_tS_CurrentMap, lv_difficulty), 0);
        }

        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressProtoss");
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        if ((libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)] > libEA0820A1_gv_tS_NonSnapShotMissionResearchProgress[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)])) {
            libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_gv_tS_CurrentMap)), libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        }

        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressZerg");
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        if ((libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)] > libEA0820A1_gv_tS_NonSnapShotMissionResearchProgress[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)])) {
            libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_gv_tS_CurrentMap)), libEA0820A1_gv_tSX_ResearchMissionProgress[(libEA0820A1_gv_tS_CurrentMap)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        }

        if ((GameIsTransitionMap() == false)) {
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionAvailableAge");
            autoEBA7FCD2_i = libCamp_gv_TSC_MISSION_FIRST;
            while (autoEBA7FCD2_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[autoEBA7FCD2_i];
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gf_MissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Available), 0);
                autoEBA7FCD2_i = autoEBA7FCD2_i + 1;
            }
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletedAge");
            auto8CF006B6_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto8CF006B6_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto8CF006B6_i];
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gf_MissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed), 0);
                auto8CF006B6_i = auto8CF006B6_i + 1;
            }
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletion");
            auto65D616EC_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto65D616EC_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto65D616EC_i];
                libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 1), false);
                libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 2), false);
                libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 3), false);
                libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 4), false);
                auto65D616EC_i = auto65D616EC_i + 1;
            }
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionBestTime");
            auto25461537_i = libCamp_gv_TSC_MISSION_FIRST;
            while (auto25461537_i <= libCamp_gv_TSC_MISSION_LAST) {
                lv_indexMission = libCamp_gv_tS_MapID[auto25461537_i];
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 1), 0);
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 2), 0);
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 3), 0);
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 4), 0);
                auto25461537_i = auto25461537_i + 1;
            }
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MercStatus");
            auto1270899F_i = libCamp_gv_TSC_MERC_FIRST;
            while (auto1270899F_i <= libCamp_gv_TSC_MERC_LAST) {
                lv_indexMerc = libCamp_gv_tS_MercID[auto1270899F_i];
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMerc)), libEA0820A1_gv_tSX_MercStatus[(lv_indexMerc)], 0);
                auto1270899F_i = auto1270899F_i + 1;
            }
            lv__SectionName = libEA0820A1_gf_TS_BankSectionName("TechStatus");
            auto9311879D_ae = libEA0820A1_gv_TSC_TECH_LAST;
            lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
            for ( ; ( (auto9311879D_ai >= 0 && lv_index <= auto9311879D_ae) || (auto9311879D_ai < 0 && lv_index >= auto9311879D_ae) ) ; lv_index += auto9311879D_ai ) {
                libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(lv_index), (libEA0820A1_gv_tSX_Tech_Status[lv_index]), (libEA0820A1_ge_StoryTechStates_TechUnavailable));
            }
        }

        return ;
    }

    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionAvailableAge");
    autoD12CC5B1_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoD12CC5B1_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoD12CC5B1_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gf_MissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Available), 0);
        autoD12CC5B1_i = autoD12CC5B1_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletedAge");
    auto8EDB83A2_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto8EDB83A2_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto8EDB83A2_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gf_MissionStatusAge(lv_indexMission, libEA0820A1_ge_MissionStatus_Completed), 0);
        auto8EDB83A2_i = auto8EDB83A2_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionCompletion");
    autoEFFFF211_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoEFFFF211_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoEFFFF211_i];
        libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 1), false);
        libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 2), false);
        libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 3), false);
        libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libEA0820A1_gf_MissionDifficultyCompleted(lv_indexMission, 4), false);
        autoEFFFF211_i = autoEFFFF211_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MissionBestTime");
    autoE9902B96_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoE9902B96_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoE9902B96_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 1), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 1), 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 2), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 2), 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 3), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 3), 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, libEA0820A1_gf_TS_CampaignDifficultyBankKey(lv_indexMission, 4), libEA0820A1_gf_MissionCompleteBestTime(lv_indexMission, 4), 0);
        autoE9902B96_i = autoE9902B96_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveProgress");
    ConversationDataSaveStateValues("MissionObjective", lp_targetBank, lv__SectionName);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ObjectiveCreditsEarnedLastMission");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libEA0820A1_gv_tSX_MissionObjRewardsEarnedCurrent, 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressProtoss");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    auto71B9626E_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto71B9626E_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto71B9626E_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
        auto71B9626E_i = auto71B9626E_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchProgressZerg");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libCamp_gv_tSX_DebugResearchLevel[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    autoA5EEA13E_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoA5EEA13E_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoA5EEA13E_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMission)), libEA0820A1_gv_tSX_ResearchMissionProgress[(lv_indexMission)][(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
        autoA5EEA13E_i = autoA5EEA13E_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchOldLevel");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), libEA0820A1_gv_tSX_ResearchPointsOld[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), libEA0820A1_gv_tSX_ResearchPointsOld[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchOldLevelUI");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), libEA0820A1_gv_tSX_ResearchUIOldPoints[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchState");
    auto2A43DB91_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (auto2A43DB91_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[auto2A43DB91_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexResearch)), libEA0820A1_gv_tSX_ResearchState[(lv_indexResearch)], (libEA0820A1_ge_StoryResearchState_ResearchStateAvailable));
        auto2A43DB91_i = auto2A43DB91_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("LabResearchPointsConverted");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)), libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss)], 0);
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)), libEA0820A1_gv_tSX_ResearchPointsConverted[(libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg)], 0);
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("MercStatus");
    autoCA9ECC47_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoCA9ECC47_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoCA9ECC47_i];
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((lv_indexMerc)), libEA0820A1_gv_tSX_MercStatus[(lv_indexMerc)], 0);
        autoCA9ECC47_i = autoCA9ECC47_i + 1;
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("TechStatus");
    autoF728B136_ae = libEA0820A1_gv_TSC_TECH_LAST;
    lv_index = libEA0820A1_gv_TSC_TECH_FIRST;
    for ( ; ( (autoF728B136_ai >= 0 && lv_index <= autoF728B136_ae) || (autoF728B136_ai < 0 && lv_index >= autoF728B136_ae) ) ; lv_index += autoF728B136_ai ) {
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(lv_index), (libEA0820A1_gv_tSX_Tech_Status[lv_index]), (libEA0820A1_ge_StoryTechStates_TechUnavailable));
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("HelpUnitsPanel");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString(0), libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount, 0);
    auto92C90F69_ae = libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypesCount;
    lv_index = 1;
    for ( ; ( (auto92C90F69_ai >= 0 && lv_index <= auto92C90F69_ae) || (auto92C90F69_ai < 0 && lv_index >= auto92C90F69_ae) ) ; lv_index += auto92C90F69_ai ) {
        libEA0820A1_gf_TS_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString(lv_index), libEA0820A1_gf_TS_HelpUnitsPanel_UnitTypeStringID(libEA0820A1_gv_tSX_HelpUnitsPanel_EnabledUnitTypes[lv_index]), "");
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("TutorialHistory");
    BankValueSetFromInt(lp_targetBank, lv__SectionName, IntToString(0), libEA0820A1_gv_tSX_Tutorial_HistoryCount);
    auto9055044C_ae = libEA0820A1_gv_tSX_Tutorial_HistoryCount;
    lv_index = 1;
    for ( ; ( (auto9055044C_ai >= 0 && lv_index <= auto9055044C_ae) || (auto9055044C_ai < 0 && lv_index >= auto9055044C_ae) ) ; lv_index += auto9055044C_ai ) {
        BankValueSetFromText(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_1"), libEA0820A1_gv_tSX_Tutorial_HistoryTitle[lv_index]);
        BankValueSetFromText(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_2"), libEA0820A1_gv_tSX_Tutorial_HistoryDescription[lv_index]);
        BankValueSetFromString(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_3"), libEA0820A1_gf_TS_Tutorial_ConvertImageToString(libEA0820A1_gv_tSX_Tutorial_HistoryIcon[lv_index]));
        BankValueSetFromString(lp_targetBank, lv__SectionName, (IntToString(lv_index) + "_4"), libEA0820A1_gf_TS_Tutorial_ConvertMovieToString(libEA0820A1_gv_tSX_Tutorial_HistoryMovie[lv_index]));
    }
    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryState");
    ConversationDataSaveStateValues("StoryState", lp_targetBank, lv__SectionName);
    if ((lp_saveType == libEA0820A1_ge_TS_BankSavingType_Normal)) {
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ScenePlayed");
        auto7B0BB6C6_i = libCamp_gv_TSC_SCENE_FIRST;
        while (auto7B0BB6C6_i <= libCamp_gv_TSC_SCENE_LAST) {
            lv_indexScene = libCamp_gv_tS_SceneIDs[auto7B0BB6C6_i];
            libEA0820A1_gf_TS_SaveTransitionVarBoolean(lp_targetBank, lv__SectionName, IntToString((lv_indexScene)), libEA0820A1_gf_ScenePlayed(lv_indexScene), false);
            auto7B0BB6C6_i = auto7B0BB6C6_i + 1;
        }
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("SceneExtraObjects");
        ConversationDataSaveStateValues("SceneExtraObjects", lp_targetBank, lv__SectionName);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("NewsPlayed");
        ConversationDataSaveStateValues("StoryNews", lp_targetBank, lv__SectionName);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("StoryMisc");
        libEA0820A1_gf_TS_SaveTransitionVarString(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyRoomStates)), libEA0820A1_gv_tSX_RoomStates, "");
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageMarSara)), libEA0820A1_gv_tSX_LoadingImageCurrentMarSara, 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageHyperion)), libEA0820A1_gv_tSX_LoadingImageCurrentHyperion, 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageLab)), libEA0820A1_gv_tSX_LoadingImageCurrentLab, 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageCantina)), libEA0820A1_gv_tSX_LoadingImageCurrentCantina, 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageArmory)), libEA0820A1_gv_tSX_LoadingImageCurrentArmory, 0);
        libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, IntToString((libEA0820A1_ge_TS_BankStoryMiscKey_TStoryBankMiscKeyLoadingImageChar)), libEA0820A1_gv_tSX_LoadingImageCurrentChar, 0);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Tips");
        ConversationDataSaveStateValues("StoryTips", lp_targetBank, lv__SectionName);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Conversation");
        autoA93790CC_ae = libEA0820A1_gv_tS_ConvoCount;
        lv_index = 1;
        for ( ; ( (autoA93790CC_ai >= 0 && lv_index <= autoA93790CC_ae) || (autoA93790CC_ai < 0 && lv_index >= autoA93790CC_ae) ) ; lv_index += autoA93790CC_ai ) {
            ConversationDataSaveNodeState(libEA0820A1_gv_tS_Convos[lv_index], lp_targetBank, lv__SectionName);
        }
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("Hotspots");
        ConversationDataSaveStateValues("Hotspots", lp_targetBank, lv__SectionName);
        lv__SectionName = libEA0820A1_gf_TS_BankSectionName("ArcadeGame");
        ConversationDataSaveStateValues("ArcadeGameVariables", lp_targetBank, lv__SectionName);
    }

    lv__SectionName = libEA0820A1_gf_TS_BankSectionName("DebugTechCheatOption");
    libEA0820A1_gf_TS_SaveTransitionVarInteger(lp_targetBank, lv__SectionName, "0", (libCamp_gv_tSX_DebugTechCheatOption), 0);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_A8608B4B"), false);
}

void libEA0820A1_gf_TS_UpdateTransitionVars () {
    // Automatic Variable Declarations
}

void libEA0820A1_gf_TS_OpenCampaignBank () {
    // Automatic Variable Declarations
    // Implementation
    BankLoad(libEA0820A1_gv_tS_BankName, 1);
}

void libEA0820A1_gf_TS_OpenMissionBanks () {
    // Variable Declarations
    string lv_bankName;
    int lv_indexMission;
    bool lv_bankExist;
    bool lv_saveMissionBank;
    int lv_branchAltMission;

    // Automatic Variable Declarations
    int auto415D0B9D_i;

    // Variable Initialization
    lv_bankName = "";
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_branchAltMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto415D0B9D_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto415D0B9D_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto415D0B9D_i];
        if ((libEA0820A1_gv_tS_MissionBanks[(lv_indexMission)] == null)) {
            lv_bankName = libEA0820A1_gf_TS_MissionBankName(lv_indexMission);
            lv_bankExist = BankExists(lv_bankName, 1);
            if ((lv_indexMission == libEA0820A1_gv_tS_CurrentMap)) {
                BankLoad(lv_bankName, 1);
                libEA0820A1_gv_tS_MissionBanks[(lv_indexMission)] = BankLastCreated();
                if (((GameIsTransitionMap() == false) || (libEA0820A1_gv_tSX_IsSimulation == true) || (libEA0820A1_gv_tSX_IsVictoryPlayAgain == true)) && (lv_bankExist == true)) {
                    libEA0820A1_gf_TS_LoadTransitionVars(BankLastCreated(), true);
                }
                else {
                    libEA0820A1_gf_TS_SaveTransitionVars(BankLastCreated(), false, false, false, libEA0820A1_ge_TS_BankSavingType_CreateMissionBank);
                    lv_saveMissionBank = true;
                }
            }
            else {
                if ((lv_bankExist == true)) {
                    BankLoad(lv_bankName, 1);
                    libEA0820A1_gv_tS_MissionBanks[(lv_indexMission)] = BankLastCreated();
                }

            }
        }

        auto415D0B9D_i = auto415D0B9D_i + 1;
    }
    if ((lv_saveMissionBank == true)) {
        lv_branchAltMission = libEA0820A1_ge_MapID_MapNone;
        if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTHanson03A)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTHanson03B;
        }
        else if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTHanson03B)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTHanson03A;
        }
        else if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03A)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTTosh03B;
        }
        else if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTosh03B)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTTosh03A;
        }
        else if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian02A)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTValerian02B;
        }
        else if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian02B)) {
            lv_branchAltMission = libEA0820A1_ge_MapID_MapTValerian02A;
        }
        if ((lv_branchAltMission != libEA0820A1_ge_MapID_MapNone)) {
            if ((libEA0820A1_gv_tS_MissionBanks[(lv_branchAltMission)] == null)) {
                lv_bankName = libEA0820A1_gf_TS_MissionBankName(lv_branchAltMission);
                BankLoad(lv_bankName, 1);
                libEA0820A1_gv_tS_MissionBanks[(lv_branchAltMission)] = BankLastCreated();
            }

            libEA0820A1_gf_TS_SaveTransitionVars(libEA0820A1_gv_tS_MissionBanks[(lv_branchAltMission)], false, false, false, libEA0820A1_ge_TS_BankSavingType_CreateMissionBank);
        }

    }

}

void libEA0820A1_gf_TS_SaveMissionBanks () {
    // Variable Declarations
    int lv_indexMission;

    // Automatic Variable Declarations
    int auto2F673ABF_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;

    // Implementation
    auto2F673ABF_i = libCamp_gv_TSC_MISSION_FIRST;
    while (auto2F673ABF_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[auto2F673ABF_i];
        if ((libEA0820A1_gv_tS_MissionBanks[(lv_indexMission)] != null)) {
            BankSave(libEA0820A1_gv_tS_MissionBanks[(lv_indexMission)]);
        }

        auto2F673ABF_i = auto2F673ABF_i + 1;
    }
}

void libEA0820A1_gf_CreateStoryModeTransitionSave (text lp_name, text lp_transition) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapNone)) {
        return ;
    }

    GameSetTransitionMap(("Campaign/" + libEA0820A1_gv_tS_MapFile[(libEA0820A1_ge_MapID_MapTStory01)]));
    GameSaveCreate(lp_name, lp_transition, "", true);
}

void libEA0820A1_gf_SaveArcadeGameData () {
    // Variable Declarations
    string lv_sectionName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sectionName = "";

    // Implementation
    libEA0820A1_gf_TS_OpenCampaignBank();
    lv_sectionName = libEA0820A1_gf_TS_BankSectionName("ArcadeGame");
    ConversationDataSaveStateValues("ArcadeGameVariables", BankLastCreated(), lv_sectionName);
    BankSave(BankLastCreated());
}

void libEA0820A1_gf_TS_PrepareNextMissionPreloading (int lp_victoryStatus) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_5B62299D") + libEA0820A1_gf_MissionName(libEA0820A1_gv_tS_CurrentMap)), false);
    libEA0820A1_gf_TS_PrepareNextMissionRooms(lp_victoryStatus);
    libEA0820A1_gf_TS_PrepareNextMissionActors(lp_victoryStatus);
}

void libEA0820A1_gf_TS_PrepareNextMissionRooms (int lp_victoryStatus) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    text lv_epilogue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomMarSaraBar)) {
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomMarSaraBar);
        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomBridge)) {
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomBridge);
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomArmory);
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomCantina);
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomLab);
        if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTychus02) && (lp_victoryStatus == c_gameOverVictory)) {
            libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomCorridor);
        }

        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomObservatory)) {
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomBridge);
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomFlagship);
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomObservatory);
        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomChar)) {
        libEA0820A1_gf_TS_PrepareRoomPreloading(libEA0820A1_ge_TS_StoryRoom_RoomChar);
        return ;
    }

}

void libEA0820A1_gf_TS_PrepareNextMissionActors (int lp_victoryStatus) {
    // Variable Declarations
    int lv_mapID;
    string lv_image;
    text lv_epilogue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomMarSaraBar)) {
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorRaynor);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorAdjutant);
        if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor01, libEA0820A1_ge_MissionStatus_Completed) == true)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorTychus);
        }

        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomBridge)) {
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorAnnabelle);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorBralik);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorCade);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorCooperBarTender);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorEarl);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorHall);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorHillMercContact);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorKachinsky);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorStetmann);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorSwann);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorYbarraMiscMerc);
        if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTychus02) && (lp_victoryStatus == c_gameOverVictory)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorZeratul);
        }

        if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHorner02, libEA0820A1_ge_MissionStatus_Completed) == true)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorAdjutantConfederate);
        }

        if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson01, libEA0820A1_ge_MissionStatus_Completed) == true) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03A, libEA0820A1_ge_MissionStatus_Completed) == false) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTHanson03B, libEA0820A1_ge_MissionStatus_Completed) == false)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorHanson);
        }

        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorHorner);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorRaynor);
        if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh01, libEA0820A1_ge_MissionStatus_Completed) == true) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTTosh03B, libEA0820A1_ge_MissionStatus_Completed) == false)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorTosh);
        }

        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorTychus);
        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomObservatory)) {
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorRaynorMarine);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorValerian);
        return ;
    }

    if ((libEA0820A1_gf_TS_NextMissionLocation(lp_victoryStatus) == libEA0820A1_ge_TS_StoryRoom_RoomChar)) {
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorRaynorMarine);
        libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorTychus);
        if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02A, libEA0820A1_ge_MissionStatus_Completed) == false) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian02B, libEA0820A1_ge_MissionStatus_Completed) == false)) {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorWarfield);
        }
        else {
            libEA0820A1_gf_TS_PrepareActorPreloading(libEA0820A1_ge_TS_StoryActor_ActorWarfieldAOD);
        }
        return ;
    }

}

void libEA0820A1_gf_TS_PrepareRoomPreloading (int lp_room) {
    // Variable Declarations
    int lv_roomIndex;
    string lv_resourceString;
    string lv_item;
    int lv_index;
    int lv_unitType;

    // Automatic Variable Declarations
    int auto96C3B546_ae;
    const int auto96C3B546_ai = 1;

    // Variable Initialization
    lv_resourceString = "";
    lv_item = "";

    // Implementation
    lv_roomIndex = (lp_room);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_FA84B4A1") + IntToText((lp_room))), false);
    auto96C3B546_ae = libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex];
    lv_index = 1;
    for ( ; ( (auto96C3B546_ai >= 0 && lv_index <= auto96C3B546_ae) || (auto96C3B546_ai < 0 && lv_index >= auto96C3B546_ae) ) ; lv_index += auto96C3B546_ai ) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_016DE942") + StringToText((libEA0820A1_gv_tS_StoryRoomUnitTypes[lv_roomIndex][lv_index]))), false);
        libNtve_gf_PreloadUnit(libEA0820A1_gv_tS_StoryRoomUnitTypes[lv_roomIndex][lv_index], true);
    }
}

void libEA0820A1_gf_TS_PrepareActorPreloading (int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_CE9EE1FA") + StringToText((libEA0820A1_gv_tS_StoryActorUnitTypes[(lp_actor)]))), false);
    libNtve_gf_PreloadUnit(libEA0820A1_gv_tS_StoryActorUnitTypes[(lp_actor)], true);
}

int libEA0820A1_gf_TS_NextMissionLocation (int lp_victoryStatus) {
    // Automatic Variable Declarations
    // Implementation
    if ((libEA0820A1_gv_tSX_IsSimulation == true)) {
        return libEA0820A1_ge_TS_StoryRoom_RoomBridge;
    }

    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor03, libEA0820A1_ge_MissionStatus_Completed) == false)) {
        return libEA0820A1_ge_TS_StoryRoom_RoomMarSaraBar;
    }

    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTRaynor03, libEA0820A1_ge_MissionStatus_Completed) == true) && (libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed) == false) && (!(((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTychus04) && (lp_victoryStatus == c_gameOverVictory))))) {
        return libEA0820A1_ge_TS_StoryRoom_RoomBridge;
    }

    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTTychus04) && (lp_victoryStatus == c_gameOverVictory)) {
        return libEA0820A1_ge_TS_StoryRoom_RoomObservatory;
    }

    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian01, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        return libEA0820A1_ge_TS_StoryRoom_RoomChar;
    }

    return libEA0820A1_ge_TS_StoryRoom_RoomNone;
}

void libEA0820A1_gf_TS_InitializeStoryRoomSingle (int lp_room, string lp_roomUnitString) {
    // Variable Declarations
    int lv_roomIndex;
    string lv_item;
    int lv_index;
    int lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = "";

    // Implementation
    lv_roomIndex = (lp_room);
    libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] = 0;
    while (true) {
        libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] += 1;
        lv_item = StringWord(lp_roomUnitString, libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex]);
        if ((lv_item == null)) {
            libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex] -= 1;
            break;
        }

        libEA0820A1_gv_tS_StoryRoomUnitTypes[lv_roomIndex][libEA0820A1_gv_tS_StoryRoomUnitTypeCount[lv_roomIndex]] = UnitTypeFromString(lv_item);
    }
}

void libEA0820A1_gf_TS_InitializeStoryRooms () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomArmory, "SMHyperionArmoryStage1SwannCameras SMHyperionArmoryStage1Set SMHyperionArmoryStage1TechnologyConsoleHS SMHyperionArmoryStage1ExitHS SMHyperionArmoryStage1SimulatorHS SMHyperionArmoryViking");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomBridge, "SMHyperionBridgeStage1WindowHS SMHyperionBridgeStage1HansonCameras SMHyperionBridgeStage1CantinaHS SMHyperionBridgeStage1CenterConsoleHS SMHyperionBridgeHolomap SMHyperionBridgeStage1HornerCameras SMHyperionBridgeStage1BattleReportsHS SMHyperionBridgeStage1TychusCameras SMHyperionBridgeStage1BattleCommandHS SMHyperionBridgeStage1Set2 SMHyperionBridgeStage1ToshCameras SMHyperionBridgeStage1Set SMBridgePlanetSpace");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomCantina, "SMHyperionCantinaStage1Progress3HS SMHyperionCantinaStage1ExitHS SMHyperionCantinaPoster2HS SMHyperionCantinaMercComputerHS SMHyperionCantinaBadgeHS SMHyperionCantinaStage1Progress4HS SMHyperionCantinaStage1JukeboxHS SMHyperionCantinaPoster3HS SMHyperionCantinaHydraClawsHS SMHyperionCantinaStage1Progress2HS SMHyperionCantinaPoster4HS SMHyperionCantinaStage1Progress6HS SMHyperionCantinaPoster1HS SMHyperionCantinaStage1ArcadeGameHS SMHyperionCantinaStage1Progress5HS SMHyperionCantinaStage1Progress1HS SMHyperionCantinaProgressFrame SMHyperionCantinaProps SMHyperionCantinaPoster5HS SMHyperionCantinaStage1TVHS SMHyperionCantinaTychusCameras SMHyperionCantinaYbarraCameras SMHyperionCantinaToshCameras SMHyperionCantinaStage1Set2 SMHyperionCantinaStage1StaircaseHS SMHyperionCantinaStage1Set");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomChar, "SMCharBattlezoneSet3 SMCharBattlezoneSet SMCharBattlezoneArtifactHS SMCharBattlezoneSet2 SMCharBattlezoneBriefcaseHS SMCharBattlezoneRadioHS SMCharBattlezoneDropshipHS");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomCorridor, "SMHyperionCorridorSet");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomFlagship, "SMMarine03 SMMarine03 SMMarine03 SMTerran06bProps SMMarine03 SMValerianFlagshipCorridorsSet4 SMValerianFlagshipCorridorsSet2 SMValerianFlagshipCorridorsSet3 SMValerianFlagshipCorridorsSet");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomLab, "SMHyperionMedLabStage1Set2 SMHyperionMedLabStage1DoorHS SMHyperionLabAdjutantCameras SMHyperionMedLabStage1Set SMHyperionMedLabStage1SetLights SMHyperionLabArtifactBaseHS SMHyperionLabArtifactPart1HS SMHyperionMedLabStage1CrystalHS SMHyperionLabCowinCameras SMHyperionMedLabStage1ConsoleHS SMHyperionLabHansonCameras SMHyperionLabArtifactPart3HS SMHyperionLabArtifactPart4HS SMHyperionLabArtifactPart2HS");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomMarSaraBar, "SMMarSaraBarCorkboardItem6HS SMMarSaraBarCorkboardItem2HS SMMarSaraBarCorkboardItem7HS SMMarSaraBarCorkboardItem3HS SMMarSaraBarBadgeHS SMMarSaraBarCorkboardItem5HS SMMarSaraBarHydraliskSkullHS SMMarSaraBarCorkboardItem1HS SMMarSaraBarCorkboardItem8HS SMMarSaraBarCorkboardItem4HS SMMarSaraBarCorkboardBackground SMMarSaraBarSet2 SMMarSaraBarTVHS SMMarSaraBarTychusCameras SMMarSaraBarStarmapHS SMMarSaraBarProps SMMarSaraBarSet SMMarSaraBarJukeboxHS");
    libEA0820A1_gf_TS_InitializeStoryRoomSingle(libEA0820A1_ge_TS_StoryRoom_RoomObservatory, "SMValerianObservatorySet2 SMValerianObservatoryPaintingHS SMValerianObservatorySet3 SMValerianObservatoryProps SMValerianObservatorySet SMValerianObservatoryStarmap");
}

void libEA0820A1_gf_TS_InitializeStoryActorSingle (int lp_actor, string lp_unitType) {
    // Variable Declarations
    int lv_actorIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_actorIndex = (lp_actor);
    libEA0820A1_gv_tS_StoryActorUnitTypes[lv_actorIndex] = lp_unitType;
}

void libEA0820A1_gf_TS_InitializeStoryActors () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorAdjutant, "SMAdjutantHologram");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorAdjutantConfederate, "SMAdjutant");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorAnnabelle, "SMAnnabelle");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorBralik, "SMBralik");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorCade, "SMCade");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorCooperBarTender, "SMCooper");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorEarl, "SMEarl");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorHall, "SMHall");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorHanson, "SMCivilian");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorHillMercContact, "SMHill");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorHorner, "SMFirstOfficer");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorKachinsky, "SMKachinsky");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorRaynor, "SMRaynorCommander");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorRaynorMarine, "SMRaynorMarine");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorStetmann, "SMStetmann");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorSwann, "SMHyperionArmorer");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorTosh, "SMBountyHunter");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorTychus, "SMMarine01");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorValerian, "SMValerianMengsk");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorWarfield, "SMMarine02");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorWarfieldAOD, "SMMarine02AOD");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorYbarraMiscMerc, "SMYbarra");
    libEA0820A1_gf_TS_InitializeStoryActorSingle(libEA0820A1_ge_TS_StoryActor_ActorZeratul, "SMZeratul");
}

void libEA0820A1_gf_TS_InitializeStoryModeLoadingImages () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tS_LoadingImageCountMarSara = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentMarSara = 0;
    libEA0820A1_gv_tS_LoadingImageCountMarSara += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentHyperion = 0;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountHyperion += 1;
    libEA0820A1_gv_tS_LoadingImageCountLab = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentLab = 0;
    libEA0820A1_gv_tS_LoadingImageCountLab += 1;
    libEA0820A1_gv_tS_LoadingImageCountCantina = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentCantina = 0;
    libEA0820A1_gv_tS_LoadingImageCountCantina += 1;
    libEA0820A1_gv_tS_LoadingImageCountArmory = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentArmory = 0;
    libEA0820A1_gv_tS_LoadingImageCountArmory += 1;
    libEA0820A1_gv_tS_LoadingImageCountChar = 0;
    libEA0820A1_gv_tSX_LoadingImageCurrentChar = 0;
    libEA0820A1_gv_tS_LoadingImageCountChar += 1;
}

void libEA0820A1_gf_CP_SetCampaignCompleted (bool lp_completed) {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_cPX_CampaignCompleted = true;
    libEA0820A1_gf_CP_SaveVars();
}

void libEA0820A1_gf_CP_LoadVars () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libEA0820A1_gv_cPX_CampaignCompleted = false;
    BankLoad(libEA0820A1_gv_cPC_BANKNAME, 1);
    if ((BankLastCreated() == null)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_6039F887") + StringToText(libEA0820A1_gv_cPC_BANKNAME)), false);
        return ;
    }

    libEA0820A1_gv_cP_Bank = BankLastCreated();
    if ((BankSectionExists(BankLastCreated(), ("CampaignCompleted")) == true)) {
        libEA0820A1_gv_cPX_CampaignCompleted = BankValueGetAsFlag(BankLastCreated(), ("CampaignCompleted"), "1");
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_6A34D05B") + libNtve_gf_ConvertBooleanToText(libEA0820A1_gv_cPX_CampaignCompleted)), false);
}

void libEA0820A1_gf_CP_SaveVars () {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromFlag(libEA0820A1_gv_cP_Bank, ("CampaignCompleted"), "1", libEA0820A1_gv_cPX_CampaignCompleted);
    BankValueSetFromFlag(libEA0820A1_gv_cP_Bank, ("CampaignCompleted"), "2", libEA0820A1_gv_cPX_CampaignCompleted);
    BankSave(libEA0820A1_gv_cP_Bank);
}

bool libEA0820A1_gf_CampaignCompleted () {
    // Automatic Variable Declarations
    // Implementation
    return libEA0820A1_gv_cPX_CampaignCompleted;
}

void libEA0820A1_gf_CreateCampaignTutorial (text lp_title, text lp_description, string lp_icon, string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTutorial(PlayerGroupAll(), lp_title, lp_description, lp_icon, lp_movie, true);
    if ((libEA0820A1_gf_TS_Tutorial_AlreadyExisted(lp_movie) == true)) {
        return ;
    }

    libEA0820A1_gf_TS_Tutorial_AddToHistory(lp_title, lp_description, lp_icon, lp_movie);
}

string libEA0820A1_gf_TS_Tutorial_ConvertMovieToString (string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    return lp_movie;
}

string libEA0820A1_gf_TS_Tutorial_ConvertImageToString (string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    return lp_image;
}

string libEA0820A1_gf_TS_Tutorial_ConvertStringToMovie (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return lp_string;
}

string libEA0820A1_gf_TS_Tutorial_ConvertStringToImage (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    return lp_string;
}

bool libEA0820A1_gf_TS_Tutorial_AlreadyExisted (string lp_movie) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto6E523126_ae = libEA0820A1_gv_tSC_Tutorial_HistoryMaxCount;
    const int auto6E523126_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto6E523126_ai >= 0 && lv_index <= auto6E523126_ae) || (auto6E523126_ai < 0 && lv_index >= auto6E523126_ae) ) ; lv_index += auto6E523126_ai ) {
        if ((libEA0820A1_gv_tSX_Tutorial_HistoryMovie[lv_index] == lp_movie)) {
            return true;
        }

    }
    return false;
}

void libEA0820A1_gf_TS_Tutorial_AddToHistory (text lp_title, text lp_description, string lp_icon, string lp_movie) {
    // Automatic Variable Declarations
    // Implementation
    if (((libEA0820A1_gv_tSX_Tutorial_HistoryCount == libEA0820A1_gv_tSC_Tutorial_HistoryMaxCount) || (libEA0820A1_gf_TS_Tutorial_AlreadyExisted(lp_movie) == true))) {
        return ;
    }

    libEA0820A1_gv_tSX_Tutorial_HistoryCount += 1;
    libEA0820A1_gv_tSX_Tutorial_HistoryTitle[libEA0820A1_gv_tSX_Tutorial_HistoryCount] = lp_title;
    libEA0820A1_gv_tSX_Tutorial_HistoryDescription[libEA0820A1_gv_tSX_Tutorial_HistoryCount] = lp_description;
    libEA0820A1_gv_tSX_Tutorial_HistoryIcon[libEA0820A1_gv_tSX_Tutorial_HistoryCount] = lp_icon;
    libEA0820A1_gv_tSX_Tutorial_HistoryMovie[libEA0820A1_gv_tSX_Tutorial_HistoryCount] = lp_movie;
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_99A377A4") + libEA0820A1_gv_tSX_Tutorial_HistoryTitle[libEA0820A1_gv_tSX_Tutorial_HistoryCount]), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_E6B9D58F") + StringToText(libEA0820A1_gf_TS_Tutorial_ConvertImageToString(libEA0820A1_gv_tSX_Tutorial_HistoryIcon[libEA0820A1_gv_tSX_Tutorial_HistoryCount]))), false);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_E2775F27") + StringToText(libEA0820A1_gf_TS_Tutorial_ConvertMovieToString(libEA0820A1_gv_tSX_Tutorial_HistoryMovie[libEA0820A1_gv_tSX_Tutorial_HistoryCount]))), false);
}

void libEA0820A1_gf_TS_Tutorial_ResetHistory () {
    // Automatic Variable Declarations
    // Implementation
    libEA0820A1_gv_tSX_Tutorial_HistoryCount = 0;
}

void libEA0820A1_gf_TS_Tutorial_RestoreHistoryToUI () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoB007A66D_ae;
    const int autoB007A66D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((libEA0820A1_gf_MapTypeCheck(libEA0820A1_gv_tS_CurrentMap, libEA0820A1_ge_MapType_Mission) == false) && (libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTStory01)) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor01) || (libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTRaynor02))) {
        return ;
    }

    autoB007A66D_ae = libEA0820A1_gv_tSX_Tutorial_HistoryCount;
    lv_index = 1;
    for ( ; ( (autoB007A66D_ai >= 0 && lv_index <= autoB007A66D_ae) || (autoB007A66D_ai < 0 && lv_index >= autoB007A66D_ae) ) ; lv_index += autoB007A66D_ai ) {
        HelpPanelAddTutorial(PlayerGroupAll(), libEA0820A1_gv_tSX_Tutorial_HistoryTitle[lv_index], libEA0820A1_gv_tSX_Tutorial_HistoryDescription[lv_index], libEA0820A1_gv_tSX_Tutorial_HistoryIcon[lv_index], libEA0820A1_gv_tSX_Tutorial_HistoryMovie[lv_index], false);
    }
}

void libEA0820A1_gf_HideStoryUI (bool lp_showHide, bool lp_includeTip) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == false)) {
        if ((libEA0820A1_gv_tS_StoryUIVisibilityCounter >= 20)) {
            return ;
        }

        libEA0820A1_gv_tS_StoryUIVisibilityCounter += 1;
        if ((UIFrameVisible(1, c_syncFrameTypeMenuBar) == true)) {
            libEA0820A1_gv_tS_StoryUIVisibility_Menu[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libEA0820A1_gv_tS_StoryUIVisibility_Menu[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeCashPanel) == true)) {
            libEA0820A1_gv_tS_StoryUIVisibility_Cash[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libEA0820A1_gv_tS_StoryUIVisibility_Cash[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((libEA0820A1_gf_RoomChangePanelIsVisible() == true)) {
            libEA0820A1_gv_tS_StoryUIVisibility_RoomChange[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libEA0820A1_gv_tS_StoryUIVisibility_RoomChange[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = false;
        }
        if ((UIFrameVisible(1, c_syncFrameTypeTipAlertPanel) == true)) {
            libEA0820A1_gv_tS_StoryUIVisibility_Tip[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = true;
        }
        else {
            libEA0820A1_gv_tS_StoryUIVisibility_Tip[libEA0820A1_gv_tS_StoryUIVisibilityCounter] = false;
        }
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCharacterSheetButton, false);
        libEA0820A1_gf_HideRoomChangePanel(false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    }
    else {
        if ((libEA0820A1_gv_tS_StoryUIVisibilityCounter == 0)) {
            return ;
        }

        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, libEA0820A1_gv_tS_StoryUIVisibility_Menu[libEA0820A1_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCashPanel, libEA0820A1_gv_tS_StoryUIVisibility_Cash[libEA0820A1_gv_tS_StoryUIVisibilityCounter]);
        libEA0820A1_gf_HideRoomChangePanel(libEA0820A1_gv_tS_StoryUIVisibility_RoomChange[libEA0820A1_gv_tS_StoryUIVisibilityCounter]);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, libEA0820A1_gv_tS_StoryUIVisibility_Tip[libEA0820A1_gv_tS_StoryUIVisibilityCounter]);
        libEA0820A1_gv_tS_StoryUIVisibilityCounter -= 1;
    }
}

void libEA0820A1_gf_DisplayCampaignVictoryScoreScreen (int lp_mission) {
    // Variable Declarations
    text lv_upgradeAvailable;
    int lv_indexAchievement;
    int lv_unlockedTech;
    int lv_subGroupEnabledIndex;
    int lv_indexObjective;
    int lv_rewardsEarned;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unlockedTech = libEA0820A1_ge_StoryTechGroup_StoryTechGroupNone;
    lv_indexObjective = libEA0820A1_ge_MissionObjective_MissionObjectiveNone;

    // Implementation
    GameCheatAllow(c_gameCheatProgress, false);
    UISetWorldVisible(PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TransmissionClearAll();
    ConversationDataStop();
    SoundStopAllTriggerSounds(false);
    libEA0820A1_gf_SetAllSoundChannelVolumesCampaign(libNtve_ge_VolumeChannelMode_Victory);
    libEA0820A1_gf_PrepareForStoryMode(c_gameOverVictory, libEA0820A1_gf_TS_CampaignDifficulty());
    if (((libEA0820A1_gv_tSX_IsSimulation == false) || (libEA0820A1_gv_tS_Horner05sSimulationBeforeCompleted == true))) {
        libEA0820A1_gf_TS_UpdateCampaignScreen(lp_mission);
    }

    libEA0820A1_gf_CreateStoryModeTransitionSave((libEA0820A1_gf_MissionName(lp_mission) + StringExternal("Param/Value/lib_EA0820A1_07FCE2AE")), StringToText(""));
    VictoryPanelSetMissionTimeTitle(StringExternal("Param/Value/lib_EA0820A1_544786DE"));
    VictoryPanelSetBackgroundFilePath(libEA0820A1_gf_TS_SetVictoryScreenBackground(lp_mission));
    VictoryPanelSetSummaryBackgroundFilePath(libEA0820A1_gf_MissionLoadingScreenImage(lp_mission));
    if ((lp_mission == libEA0820A1_ge_MapID_MapTZeratul04)) {
        VictoryPanelSetVictoryText(StringExternal("Param/Value/lib_EA0820A1_E12A146E"));
    }
    else {
        VictoryPanelSetVictoryText(StringExternal("Param/Value/lib_EA0820A1_5AABB0D0"));
    }
    VictoryPanelSetMissionTimeText(libEA0820A1_gf_FormatTimeCampaign(libEA0820A1_gv_tS_MissionCompleteTime));
    if ((libEA0820A1_gf_MissionReward(lp_mission) > 0)) {
        VictoryPanelSetRewardTitle(StringExternal("Param/Value/lib_EA0820A1_E04F506C"));
        VictoryPanelSetRewardCredits(libEA0820A1_gf_MissionReward(lp_mission));
    }
    else {
        VictoryPanelSetRewardTitle(StringToText(""));
    }
    VictoryPanelSetAchievementsTitle(StringExternal("Param/Value/lib_EA0820A1_D5423D4A"));
    VictoryPanelSetMissionTitle(StringExternal("Param/Value/lib_EA0820A1_38D2D2FF"));
    VictoryPanelSetMissionText(libEA0820A1_gf_MissionNameInUpperCase(lp_mission));
    VictoryPanelSetStatisticsTitle(StringExternal("Param/Value/lib_EA0820A1_BDB9DB49"));
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, true);
    if ((libEA0820A1_gv_tSX_IsSimulation == true)) {
        libEA0820A1_gf_TS_OpenCampaignBank();
        libEA0820A1_gf_TS_LoadTransitionVars(BankLastCreated(), true);
    }

    libEA0820A1_gf_TS_CheckAchievementUnlocking();
}

string libEA0820A1_gf_TS_SetVictoryScreenBackground (int lp_map) {
    // Automatic Variable Declarations
    int auto3F893484_val;

    // Implementation
    auto3F893484_val = lp_map;
    if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHanson01) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHanson02) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHanson03A) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson03a.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHanson03B) {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson03b.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHorner01) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHorner02) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHorner03) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner03.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHorner04) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner04.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTHorner05S) {
        return "Assets\\Textures\\ui_scorescreen_splash_thorner05s.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTRaynor01) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTRaynor02) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTRaynor03) {
        return "Assets\\Textures\\ui_scorescreen_splash_traynor03.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTosh01) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTosh02) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTosh03A) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh03a.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTosh03B) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttosh03b.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTychus01) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTychus02) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTychus03) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus03.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTychus04) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus04.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTTychus05) {
        return "Assets\\Textures\\ui_scorescreen_splash_ttychus05.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTValerian01) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTValerian02A) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian02a.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTValerian02B) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian02b.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTValerian03) {
        return "Assets\\Textures\\ui_scorescreen_splash_tvalerian03.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTZeratul01) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul01.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTZeratul02) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul02.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTZeratul03) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul03.dds";
    }
    else if (auto3F893484_val == libEA0820A1_ge_MapID_MapTZeratul04) {
        return "Assets\\Textures\\ui_scorescreen_splash_tzeratul04.dds";
    }
    else {
        return "Assets\\Textures\\ui_scorescreen_splash_thanson01.dds";
    }
}

void libEA0820A1_gf_TS_UpdateCampaignScreen (int lp_mission) {
    // Variable Declarations
    const string lv_campaignID = "WingsOfLiberty";
    text lv_body;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_mission == libEA0820A1_ge_MapID_MapNone)) {
        return ;
    }

    if ((libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian03, libEA0820A1_ge_MissionStatus_Completed) == true)) {
        lv_body = (StringExternal("Param/Value/lib_EA0820A1_B9756211") + StringExternal("Param/Value/lib_EA0820A1_D293B736") + StringExternal("Param/Value/lib_EA0820A1_1CE3B20C") + ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Loading Screen Text") + StringExternal("Param/Value/lib_EA0820A1_EBF0C35B") + StringExternal("Param/Value/lib_EA0820A1_2E42A2F3") + IntToText(libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed)) + StringExternal("Param/Value/lib_EA0820A1_F244370C") + StringExternal("Param/Value/lib_EA0820A1_26B16ACC") + DifficultyNameCampaign(libEA0820A1_gf_TS_CampaignDifficulty()));
    }
    else {
        lv_body = (StringExternal("Param/Value/lib_EA0820A1_11823E57") + libEA0820A1_gf_MissionNameInUpperCase(lp_mission) + StringExternal("Param/Value/lib_EA0820A1_C3FE3248") + ConversationDataStateText(libEA0820A1_gf_TS_MapConvoID(lp_mission), "Loading Screen Text") + StringExternal("Param/Value/lib_EA0820A1_6247FE6B") + StringExternal("Param/Value/lib_EA0820A1_0526A33A") + IntToText(libEA0820A1_gf_NumberOfMissions(libEA0820A1_ge_MissionCountOptions_Completed)) + StringExternal("Param/Value/lib_EA0820A1_2C12193F") + StringExternal("Param/Value/lib_EA0820A1_0F454460") + DifficultyNameCampaign(libEA0820A1_gf_TS_CampaignDifficulty()));
        CampaignProgressSetImageFilePath(PlayerGroupAll(), lv_campaignID, libEA0820A1_gf_MissionLoadingScreenImage(lp_mission));
    }
    CampaignProgressSetText(PlayerGroupAll(), lv_campaignID, lv_body);
    CampaignProgressSetCampaignFinished(PlayerGroupAll(), lv_campaignID, libEA0820A1_gf_MissionStatusCheck(libEA0820A1_ge_MapID_MapTValerian03, libEA0820A1_ge_MissionStatus_Completed));
}

void libEA0820A1_gf_TS_CampaignVictory () {
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    UISetCursorVisible(PlayerGroupAll(), false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, null, c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundStopAllTriggerSounds(true);
    TransmissionClearAll();
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll(), 0.0);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFlames, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySPieces, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySEmitters, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryReady, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovement, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryGather, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDialogue, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDeath, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, true);
    UISetCursorVisible(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, false);
    libEA0820A1_gv_tS_EndCinematicFinished = false;
    TriggerExecute(libEA0820A1_gt_TS_EndCinematic, true, true);
    if ((libEA0820A1_gv_tS_EndCinematicFinished == false)) {
        TransmissionClearAll();
    }

    UISetCursorVisible(PlayerGroupAll(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    TriggerExecute(libEA0820A1_gt_TS_EndCredits, true, true);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_EA0820A1_C1B46F1B"), false);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((libEA0820A1_gv_tSX_IsSimulation == false)) {
        GameSetNextMap("");
    }

    GameOver(1, c_gameOverVictory, false, false);
}

void libEA0820A1_gf_GameStart (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "GameStarted");
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: _Zerg Drop Pod
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__ZergDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf__ZergDropPod(libEA0820A1_gv__TP_DropPod_Location, libEA0820A1_gv__TP_DropPod_Units);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__ZergDropPod_Init () {
    libEA0820A1_gt__ZergDropPod = TriggerCreate("libEA0820A1_gt__ZergDropPod_Func");
    TriggerEnable(libEA0820A1_gt__ZergDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Terran Drop Pod
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__TerranDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf__TerranDropPod(libEA0820A1_gv__TP_DropPod_Location, libEA0820A1_gv__TP_DropPod_Units);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__TerranDropPod_Init () {
    libEA0820A1_gt__TerranDropPod = TriggerCreate("libEA0820A1_gt__TerranDropPod_Func");
    TriggerEnable(libEA0820A1_gt__TerranDropPod, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libEA0820A1_gv_tS_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libEA0820A1_gv_tS_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue_Init () {
    libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_AbortMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gameOverType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gameOverType = c_gameOverVictory;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libEA0820A1_gv_tS_CurrentMap == libEA0820A1_ge_MapID_MapTValerian03) && (libEA0820A1_gv_tSX_IsVictoryPlayAgain == true) && (libEA0820A1_gv_tSX_IsSimulation == false)) {
        UISetWorldVisible(PlayerGroupAll(), false);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleUI, true);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TransmissionClearAll();
        ConversationDataStop();
        SoundStopAllTriggerSounds(false);
        libEA0820A1_gf_TS_CampaignVictory();
    }
    else {
        libEA0820A1_gf_PrepareForStoryMode(c_gameOverDefeat, libEA0820A1_gf_TS_CampaignDifficulty());
        GameOver(EventPlayer(), c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_AbortMission_Init () {
    libEA0820A1_gt_TS_AbortMission = TriggerCreate("libEA0820A1_gt_TS_AbortMission_Func");
    TriggerAddEventAbortMission(libEA0820A1_gt_TS_AbortMission, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Chat Bubble Activated
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__CB_ChatBubbleActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gv__CB_TP_UNIT = EventUnit();
    libEA0820A1_gv__CB_TP_PLAYER = EventPlayer();
    libEA0820A1_gv__CB_TP_FORCED = false;
    TriggerExecute(libEA0820A1_gt__CB_ActivateChatBubble, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__CB_ChatBubbleActivated_Init () {
    libEA0820A1_gt__CB_ChatBubbleActivated = TriggerCreate("libEA0820A1_gt__CB_ChatBubbleActivated_Func");
    TriggerEnable(libEA0820A1_gt__CB_ChatBubbleActivated, false);
    TriggerAddEventUnitSelected(libEA0820A1_gt__CB_ChatBubbleActivated, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Activate Chat Bubble
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__CB_ActivateChatBubble_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;
    bool lv_forced;
    unitgroup lv_tempUnitGroup;
    unit lv_chatBubbleTarget;
    int lv_chatBubbleBackup;
    int lv_lineIndex;
    int lv_waitSoundID;
    fixed lv_waitDuration;

    // Automatic Variable Declarations
    int auto967C5EC1_val;

    // Variable Initialization
    lv_tempUnitGroup = UnitGroupEmpty();
    lv_chatBubbleBackup = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(libEA0820A1_gv__CB_TP_UNIT);
    lv_playerIndex = libEA0820A1_gv__CB_TP_PLAYER;
    lv_forced = libEA0820A1_gv__CB_TP_FORCED;
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    if ((lv_playerIndex <= 0)) {
        return true;
    }

    if (((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][lv_playerIndex] <= 0) || (libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][lv_playerIndex] <= 0))) {
        return true;
    }

    if ((lv_forced == false)) {
        if ((libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex] == null)) {
            return true;
        }

        if ((PlayerGroupHasPlayer(libEA0820A1_gv__CB_Unit_ActivationPlayerGroup[lv_unitIndex], lv_playerIndex) == false)) {
            return true;
        }

    }

    if ((libEA0820A1_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex] <= 0)) {
        lv_chatBubbleTarget = null;
    }
    else {
        lv_tempUnitGroup = UnitGroup(null, lv_playerIndex, RegionCircle(UnitGetPosition(libEA0820A1_gv__CB_Unit[lv_unitIndex]), libEA0820A1_gv__CB_Unit_ActivationDistance[lv_unitIndex][lv_playerIndex]), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_chatBubbleTarget = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(libEA0820A1_gv__CB_Unit[lv_unitIndex]), lv_tempUnitGroup);
        if (((lv_forced == false) && (lv_chatBubbleTarget == null))) {
            return true;
        }

    }
    libEA0820A1_gf__CB_Current_Remove(lv_playerIndex);
    libEA0820A1_gf__CB_Current_Create(lv_unitIndex, lv_playerIndex, lv_chatBubbleTarget);
    lv_chatBubbleBackup = libEA0820A1_gv__CB_Current_ChatBubble[lv_playerIndex];
    lv_lineIndex = libEA0820A1_gv__CB_UnitLine[libEA0820A1_gf__CB_Unit_GetLineCurrentIndex(lv_unitIndex, lv_playerIndex)];
    if ((libEA0820A1_gv__CB_Current_Sound[lv_playerIndex] == null)) {
        lv_waitDuration = 0.0;
        auto967C5EC1_val = libEA0820A1_gv__CB_Line_DurationType[lv_lineIndex];
        if (auto967C5EC1_val == c_transmissionDurationAdd) {
            lv_waitDuration += libEA0820A1_gv__CB_Line_Duration[lv_lineIndex];
        }
        else if (auto967C5EC1_val == c_transmissionDurationSet) {
            lv_waitDuration = libEA0820A1_gv__CB_Line_Duration[lv_lineIndex];
        }
        else if (auto967C5EC1_val == c_transmissionDurationSub) {
            lv_waitDuration -= libEA0820A1_gv__CB_Line_Duration[lv_lineIndex];
        }
        else {
        }
        lv_waitDuration = MaxF(lv_waitDuration, 0.0);
        Wait(lv_waitDuration, c_timeReal);
    }
    else {
        libEA0820A1_gf__CB_StarWaitingSound(libEA0820A1_gv__CB_Current_Sound[lv_playerIndex], libEA0820A1_gv__CB_Line_Duration[lv_lineIndex], libEA0820A1_gv__CB_Line_DurationType[lv_lineIndex]);
        lv_waitSoundID = libEA0820A1_gf__CB_LastWaitSound();
        while (!((libEA0820A1_gv__CB_WaitSoundDone[libEA0820A1_gv__CB_WaitSoundID] == true))) {
            Wait(0.25, c_timeReal);
        }
    }
    if (((lv_unitIndex == libEA0820A1_gv__CB_Current_UnitIndex[lv_playerIndex]) && (lv_chatBubbleBackup == libEA0820A1_gv__CB_Current_ChatBubble[lv_playerIndex]))) {
        libEA0820A1_gf__CB_Current_Remove(lv_playerIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__CB_ActivateChatBubble_Init () {
    libEA0820A1_gt__CB_ActivateChatBubble = TriggerCreate("libEA0820A1_gt__CB_ActivateChatBubble_Func");
    TriggerEnable(libEA0820A1_gt__CB_ActivateChatBubble, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_Chat Bubble Unit Died
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__CB_ChatBubbleUnitDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitIndex;
    int lv_playerIndex;

    // Automatic Variable Declarations
    const int autoBB68770C_ae = libEA0820A1_gv__CBC_PLAYERMAX;
    const int autoBB68770C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(EventUnit());
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    lv_playerIndex = 1;
    for ( ; ( (autoBB68770C_ai >= 0 && lv_playerIndex <= autoBB68770C_ae) || (autoBB68770C_ai < 0 && lv_playerIndex >= autoBB68770C_ae) ) ; lv_playerIndex += autoBB68770C_ai ) {
        if ((libEA0820A1_gv__CB_Current_UnitIndex[lv_playerIndex] == lv_unitIndex)) {
            libEA0820A1_gf__CB_Current_Remove(lv_playerIndex);
        }

        libEA0820A1_gf_ClearAllChatBubbleLinesFromUnit(libEA0820A1_gv__CB_Unit[lv_unitIndex], lv_playerIndex);
    }
    libEA0820A1_gf__CB_Unit_RemoveByIndex(lv_unitIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__CB_ChatBubbleUnitDied_Init () {
    libEA0820A1_gt__CB_ChatBubbleUnitDied = TriggerCreate("libEA0820A1_gt__CB_ChatBubbleUnitDied_Func");
    TriggerEnable(libEA0820A1_gt__CB_ChatBubbleUnitDied, false);
    TriggerAddEventUnitDied(libEA0820A1_gt__CB_ChatBubbleUnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_ShowChatBubbleOnUnit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__CB_ShowChatBubbleOnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_p_Unit;
    int lv_p_Player;
    text lv_p_Text;
    soundlink lv_p_SoundLink;
    fixed lv_p_Duration;
    int lv_p_DurationType;
    int lv_p_TextTag;
    sound lv_sound;
    fixed lv_waitDuration;
    int lv_waitSoundID;

    // Automatic Variable Declarations
    int auto260CC7C9_val;

    // Variable Initialization
    lv_p_Text = StringToText("");
    lv_p_SoundLink = SoundLink("EditorDefaultSound", -1);
    lv_p_DurationType = c_timerWindowNone;
    lv_p_TextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p_Unit = libEA0820A1_gv__CB_TP_UNIT;
    lv_p_Player = libEA0820A1_gv__CB_TP_PLAYER;
    lv_p_Text = libEA0820A1_gv__CB_TP_TEXT;
    lv_p_SoundLink = libEA0820A1_gv__CB_TP_SOUNDLINK;
    lv_p_Duration = libEA0820A1_gv__CB_TP_DURATION;
    lv_p_DurationType = libEA0820A1_gv__CB_TP_DURATIONTYPE;
    lv_p_TextTag = libEA0820A1_gv__CB_TP_TEXTTAG;
    TextTagAttachToUnit(lv_p_TextTag, lv_p_Unit, 2.5);
    TextTagSetAlignment(lv_p_TextTag, c_alignCenter, c_alignBottom);
    TextTagSetMaxSize(lv_p_TextTag, 25.0, 40.0);
    TextTagSetColor(lv_p_TextTag, c_textTagColorText, Color(0,0,0));
    TextTagSetTextShadow(lv_p_TextTag, false);
    TextTagSetTime(lv_p_TextTag, c_textTagTimeDuration, 360000.0);
    TextTagShowBackground(lv_p_TextTag, true);
    TextTagSetBackgroundBorderSize(lv_p_TextTag, 1.0, 1.0);
    TextTagSetColor(lv_p_TextTag, c_textTagColorBackground, Color(100,100,100));
    TextTagShow(lv_p_TextTag, PlayerGroupSingle(lv_p_Player), true);
    if ((lv_p_SoundLink != null)) {
        SoundPlayOnUnit(lv_p_SoundLink, PlayerGroupSingle(lv_p_Player), lv_p_Unit, 0.0, 100.0, 0.0);
        lv_sound = SoundLastPlayed();
    }
    else {
        lv_waitDuration = 0.0;
        auto260CC7C9_val = lv_p_DurationType;
        if (auto260CC7C9_val == c_transmissionDurationAdd) {
            lv_waitDuration += lv_p_Duration;
        }
        else if (auto260CC7C9_val == c_transmissionDurationSet) {
            lv_waitDuration = lv_p_Duration;
        }
        else if (auto260CC7C9_val == c_transmissionDurationSub) {
            lv_waitDuration -= lv_p_Duration;
        }
        else {
        }
        lv_p_Duration = MaxF(lv_waitDuration, 0.0);
        lv_p_DurationType = c_transmissionDurationSet;
        lv_sound = null;
    }
    libEA0820A1_gf__CB_StarWaitingSound(lv_sound, lv_p_Duration, lv_p_DurationType);
    lv_waitSoundID = libEA0820A1_gf__CB_LastWaitSound();
    while (true) {
        if (((UnitIsAlive(lv_p_Unit) == false) || (libEA0820A1_gv__CB_WaitSoundDone[lv_waitSoundID] == true))) {
            TextTagDestroy(lv_p_TextTag);
            SoundStop(lv_sound, false);
            break;
        }

        Wait(0.25, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__CB_ShowChatBubbleOnUnit_Init () {
    libEA0820A1_gt__CB_ShowChatBubbleOnUnit = TriggerCreate("libEA0820A1_gt__CB_ShowChatBubbleOnUnit_Func");
    TriggerEnable(libEA0820A1_gt__CB_ShowChatBubbleOnUnit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: chat bubble debug
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_chatbubbledebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_selectedUnit;
    int lv_unitIndex;
    int lv_index;

    // Automatic Variable Declarations
    int autoA5FB4D2B_ae;
    const int autoA5FB4D2B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_selectedUnit = UnitGroupUnit(UnitGroupSelected(1), 1);
    if ((lv_selectedUnit == null)) {
        return true;
    }

    lv_unitIndex = libEA0820A1_gf__CB_Unit_GetIndex(lv_selectedUnit);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_3BE12BEA") + IntToText(lv_unitIndex)), true);
    if ((lv_unitIndex <= 0)) {
        return true;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_09837CED") + IntToText(libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][1])), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_A86996E6") + IntToText(libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][1])), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_FB248999") + IntToText(libEA0820A1_gv__CB_Unit_LineCurrent[lv_unitIndex][1])), true);
    if ((libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][1] > 0)) {
        autoA5FB4D2B_ae = libEA0820A1_gv__CB_Unit_LineCount[lv_unitIndex][1];
        lv_index = 1;
        for ( ; ( (autoA5FB4D2B_ai >= 0 && lv_index <= autoA5FB4D2B_ae) || (autoA5FB4D2B_ai < 0 && lv_index >= autoA5FB4D2B_ae) ) ; lv_index += autoA5FB4D2B_ai ) {
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_9AE68022") + IntToText(lv_index) + StringExternal("Param/Value/lib_EA0820A1_D322251B") + libEA0820A1_gv__CB_Line[libEA0820A1_gv__CB_UnitLine[((libEA0820A1_gv__CB_Unit_UnitLine_StartIndex[lv_unitIndex][1] + lv_index) - 1)]]), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_chatbubbledebug_Init () {
    libEA0820A1_gt_chatbubbledebug = TriggerCreate("libEA0820A1_gt_chatbubbledebug_Func");
    TriggerAddEventChatMessage(libEA0820A1_gt_chatbubbledebug, 1, "-cb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CB_WaitForSound
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__CB_WaitForSound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    sound lv_p_Sound;
    fixed lv_p_Duration;
    int lv_p_DurationType;
    int lv_p_WaitSoundID;

    // Automatic Variable Declarations
    int auto7E439275_val;

    // Variable Initialization
    lv_p_DurationType = c_timerWindowNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p_Sound = libEA0820A1_gv__CB_TP_WAITSOUND;
    lv_p_Duration = libEA0820A1_gv__CB_TP_WAITSOUND_DURATION;
    lv_p_DurationType = libEA0820A1_gv__CB_TP_WAITSOUND_DURATIONTYPE;
    lv_p_WaitSoundID = libEA0820A1_gv__CB_TP_WAITSOUND_ID;
    auto7E439275_val = lv_p_DurationType;
    if (auto7E439275_val == c_transmissionDurationAdd) {
        SoundWait(lv_p_Sound, 0.0, c_soundOffsetEnd);
        Wait(lv_p_Duration, c_timeReal);
    }
    else if (auto7E439275_val == c_transmissionDurationSet) {
        Wait(lv_p_Duration, c_timeReal);
    }
    else if (auto7E439275_val == c_transmissionDurationSub) {
        SoundWait(lv_p_Sound, lv_p_Duration, c_soundOffsetEnd);
    }
    else {
    }
    libEA0820A1_gv__CB_WaitSoundDone[lv_p_WaitSoundID] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__CB_WaitForSound_Init () {
    libEA0820A1_gt__CB_WaitForSound = TriggerCreate("libEA0820A1_gt__CB_WaitForSound_Func");
    TriggerEnable(libEA0820A1_gt__CB_WaitForSound, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _MsgDlgButtonClicked
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt__MsgDlgButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libEA0820A1_gv__MsgDlgButton))) {
            return false;
        }

        if (!((libEA0820A1_gv__MsgDlgOpened == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogSetVisible(libEA0820A1_gv__MsgDlg, PlayerGroupAll(), false);
    libEA0820A1_gv__MsgDlgOpened = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt__MsgDlgButtonClicked_Init () {
    libEA0820A1_gt__MsgDlgButtonClicked = TriggerCreate("libEA0820A1_gt__MsgDlgButtonClicked_Func");
    TriggerEnable(libEA0820A1_gt__MsgDlgButtonClicked, false);
    TriggerAddEventDialogControl(libEA0820A1_gt__MsgDlgButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignTrialDialogQuitClicked
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libEA0820A1_gv_zS_CampaignTrialEndQuitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf_ZS_CloseCampaignTrialDialog();
    GameSetNextMap("");
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked_Init () {
    libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked = TriggerCreate("libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked_Func");
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked, false);
    TriggerAddEventDialogControl(libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_CampaignTrialDialogUpgradeClicked
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libEA0820A1_gv_zS_CampaignTrialEndUpgradeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UILaunchNydusLink(PlayerGroupSingle(EventPlayer()), c_nydusLinkAccountTrialUpgrade);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked_Init () {
    libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked = TriggerCreate("libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked_Func");
    TriggerEnable(libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked, false);
    TriggerAddEventDialogControl(libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercNewToAvailable
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_MercNewToAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libEA0820A1_gf_MercStatusCheck(libEA0820A1_gv_tS_MercID[(MercenaryGetSelected(1))], libEA0820A1_ge_StoryMercStatus_New) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf_SetMercStatus(libEA0820A1_gv_tS_MercID[(MercenaryGetSelected(1))], libEA0820A1_ge_StoryMercStatus_Available);
    MercenarySetState(MercenaryGetSelected(1), c_mercenaryStateEnabled);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_MercNewToAvailable_Init () {
    libEA0820A1_gt_TS_MercNewToAvailable = TriggerCreate("libEA0820A1_gt_TS_MercNewToAvailable_Func");
    TriggerAddEventMercenaryPanelSelectionChanged(libEA0820A1_gt_TS_MercNewToAvailable, c_playerAny, c_invalidMercenaryId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercUI - Purchase
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_MercUIPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMerc;
    int lv_mercBought;

    // Automatic Variable Declarations
    int autoEBA1D71C_i;
    int auto398D01DE_i;

    // Variable Initialization
    lv_indexMerc = libEA0820A1_ge_StoryMercID_MercNone;
    lv_mercBought = libEA0820A1_ge_StoryMercID_MercNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mercBought = libEA0820A1_ge_StoryMercID_MercNone;
    autoEBA1D71C_i = libCamp_gv_TSC_MERC_FIRST;
    while (autoEBA1D71C_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[autoEBA1D71C_i];
        if ((MercenaryGetSelected(1) == libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)])) {
            lv_mercBought = lv_indexMerc;
            break;
        }

        autoEBA1D71C_i = autoEBA1D71C_i + 1;
    }
    if (((lv_mercBought == libEA0820A1_ge_StoryMercID_MercNone) || (libEA0820A1_gf_MercCost(lv_mercBought) > libEA0820A1_gf_StoryCredits()) || ((libEA0820A1_gf_MercStatusCheck(lv_mercBought, libEA0820A1_ge_StoryMercStatus_Available) == false) && (libEA0820A1_gf_MercStatusCheck(lv_mercBought, libEA0820A1_ge_StoryMercStatus_New) == false)))) {
        return true;
    }

    libEA0820A1_gf_SetMercStatus(lv_mercBought, libEA0820A1_ge_StoryMercStatus_Purchased);
    libEA0820A1_gf_SetStoryCredits((libEA0820A1_gf_StoryCredits() - libEA0820A1_gf_MercCost(lv_mercBought)));
    libEA0820A1_gf_TS_AddRecentMerc(lv_mercBought);
    MercenaryPurchase(libEA0820A1_gv_tS_MercUIMercenaries[(lv_mercBought)]);
    MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_mercBought)], libEA0820A1_gv_tS_MercHiredImage[(lv_mercBought)]);
    MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_mercBought)], "Invisible");
    auto398D01DE_i = libCamp_gv_TSC_MERC_FIRST;
    while (auto398D01DE_i <= libCamp_gv_TSC_MERC_LAST) {
        lv_indexMerc = libCamp_gv_tS_MercID[auto398D01DE_i];
        if ((libEA0820A1_gf_MercCost(lv_indexMerc) > libEA0820A1_gf_StoryCredits()) && ((libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_Available) == true) || (libEA0820A1_gf_MercStatusCheck(lv_indexMerc, libEA0820A1_ge_StoryMercStatus_New) == true))) {
            MercenarySetImageFilePath(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], libEA0820A1_gv_tS_MercNoCreditImage[(lv_indexMerc)]);
            MercenarySetModelLink(libEA0820A1_gv_tS_MercUIMercenaries[(lv_indexMerc)], "Invisible");
        }

        auto398D01DE_i = auto398D01DE_i + 1;
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercDevilDogs, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DevilDogs", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DevilDogs", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercHammerSecurities, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_HammerSecurities", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_HammerSecurities", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercSpartanCompany, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_SpartanCompany", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_SpartanCompany", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercSiegeBreakers, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_SiegeBreakers", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_SiegeBreakers", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercHelsAngels, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_HelsAngels", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_HelsAngels", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercDuskWing, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DuskWings", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DuskWings", 0);
    }
    if ((libEA0820A1_gf_MercStatusCheck(libEA0820A1_ge_StoryMercID_MercDukesRevenge, libEA0820A1_ge_StoryMercStatus_Purchased) == true)) {
        AchievementTermQuantitySet(1, "TStory01_6_DukesRevenge", 1);
    }
    else {
        AchievementTermQuantitySet(1, "TStory01_6_DukesRevenge", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_MercUIPurchase_Init () {
    libEA0820A1_gt_TS_MercUIPurchase = TriggerCreate("libEA0820A1_gt_TS_MercUIPurchase_Func");
    TriggerAddEventMercenaryPanelPurchase(libEA0820A1_gt_TS_MercUIPurchase, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_MercUI - Exit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_MercUIExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    if ((libEA0820A1_gv_tS_MercUIExitCallback != null)) {
        TriggerExecute(libEA0820A1_gv_tS_MercUIExitCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_MercUIExit_Init () {
    libEA0820A1_gt_TS_MercUIExit = TriggerCreate("libEA0820A1_gt_TS_MercUIExit_Func");
    TriggerAddEventMercenaryPanelExit(libEA0820A1_gt_TS_MercUIExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportMissionReplay
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_BattleReportMissionReplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexMission;
    int lv_mission;
    int lv_selectedReport;

    // Automatic Variable Declarations
    int autoE5866381_i;

    // Variable Initialization
    lv_indexMission = libEA0820A1_ge_MapID_MapNone;
    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_selectedReport = c_invalidBattleReportId;

    // Conditions
    if (testConds) {
        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mission = libEA0820A1_ge_MapID_MapNone;
    lv_selectedReport = BattleReportPanelGetSelectedBattleReport(1);
    autoE5866381_i = libCamp_gv_TSC_MISSION_FIRST;
    while (autoE5866381_i <= libCamp_gv_TSC_MISSION_LAST) {
        lv_indexMission = libCamp_gv_tS_MapID[autoE5866381_i];
        if ((libEA0820A1_gv_tS_BattleReportMissions[(lv_indexMission)] == lv_selectedReport)) {
            lv_mission = lv_indexMission;
            break;
        }

        autoE5866381_i = autoE5866381_i + 1;
    }
    if ((lv_mission == libEA0820A1_ge_MapID_MapNone)) {
        return true;
    }

    libEA0820A1_gf_TS_BattleReportHide();
    libEA0820A1_gf_LaunchMission(lv_mission, true, EventBattleReportPanelDifficultySelected());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_BattleReportMissionReplay_Init () {
    libEA0820A1_gt_TS_BattleReportMissionReplay = TriggerCreate("libEA0820A1_gt_TS_BattleReportMissionReplay_Func");
    TriggerAddEventBattleReportPanelPlayMission(libEA0820A1_gt_TS_BattleReportMissionReplay, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportSceneReplay
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_BattleReportSceneReplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexScene;
    int lv_scene;
    int lv_selectedReport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexScene = libEA0820A1_ge_SceneID_SceneNone;
    lv_scene = libEA0820A1_ge_SceneID_SceneNone;
    lv_selectedReport = c_invalidBattleReportId;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scene = libEA0820A1_ge_SceneID_SceneNone;
    lv_selectedReport = BattleReportPanelGetSelectedBattleReport(1);
    if ((lv_scene == libEA0820A1_ge_SceneID_SceneNone)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libEA0820A1_gf_TS_BattleReportHide();
    if ((libEA0820A1_gf_TS_GameFullyDownloaded() == false) && (lv_scene != libEA0820A1_ge_SceneID_ScenePreRenderedTheDream) && (lv_scene != libEA0820A1_ge_SceneID_ScenePreRenderedOldRivals) && (lv_scene != libEA0820A1_ge_SceneID_ScenePreRenderedEnd) && (lv_scene != libEA0820A1_ge_SceneID_ScenePreRenderedBetterMarine)) {
        UIShowCustomDialog(PlayerGroupAll(), libNtve_ge_CustomDialogType_c_customDialogTypeMessage, StringExternal("Param/Value/lib_EA0820A1_BDF0AF51"), StringExternal("Param/Value/lib_EA0820A1_C2B050EF"), true);
    }
    else {
        TriggerExecute(libEA0820A1_gv_tS_SceneCallback[(lv_scene)], true, true);
        TriggerExecute(libEA0820A1_gv_tS_BattleReportSceneFinishCallback, true, true);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeBattleReportPanel, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_BattleReportSceneReplay_Init () {
    libEA0820A1_gt_TS_BattleReportSceneReplay = TriggerCreate("libEA0820A1_gt_TS_BattleReportSceneReplay_Func");
    TriggerAddEventBattleReportPanelPlayScene(libEA0820A1_gt_TS_BattleReportSceneReplay, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_BattleReportPanelLeave
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_BattleReportPanelLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UIFrameVisible(1, c_syncFrameTypeBattleReportPanel) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf_TS_BattleReportHide();
    if ((libEA0820A1_gv_tS_BattleReportPanelLeaveCallback != null)) {
        TriggerExecute(libEA0820A1_gv_tS_BattleReportPanelLeaveCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_BattleReportPanelLeave_Init () {
    libEA0820A1_gt_TS_BattleReportPanelLeave = TriggerCreate("libEA0820A1_gt_TS_BattleReportPanelLeave_Func");
    TriggerAddEventBattleReportPanelExit(libEA0820A1_gt_TS_BattleReportPanelLeave, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_ResearchUI - Purchase
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_ResearchUIPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_researchID;
    int lv_purchasedCountZerg;
    int lv_purchasedCountProt;
    int lv_indexResearch;

    // Automatic Variable Declarations
    int autoF971F62C_i;
    int auto66EAF048_val;

    // Variable Initialization
    lv_researchID = libEA0820A1_ge_StoryResearchID_ResearchNone;
    lv_indexResearch = libEA0820A1_ge_StoryResearchID_ResearchNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_researchID = libEA0820A1_gf_TS_ResearchUIResearchID(ResearchItemGetSelected(1));
    if ((lv_researchID == libEA0820A1_ge_StoryResearchID_ResearchNone)) {
        return true;
    }

    ResearchItemPurchase(ResearchItemGetSelected(1));
    libEA0820A1_gf_SetStoryResearchPurchased(lv_researchID);
    libEA0820A1_gf_TS_ResearchUIUpdate();
    libEA0820A1_gf_TS_AddRecentResearch(lv_researchID);
    lv_purchasedCountZerg = 0;
    lv_purchasedCountProt = 0;
    autoF971F62C_i = libCamp_gv_TSC_RESEARCH_FIRST;
    while (autoF971F62C_i <= libCamp_gv_TSC_RESEARCH_LAST) {
        lv_indexResearch = libCamp_gv_tS_ResearchID[autoF971F62C_i];
        if ((libEA0820A1_gf_StoryResearchStateCheck(lv_indexResearch, libEA0820A1_ge_StoryResearchState_ResearchStatePurchased) == true)) {
            auto66EAF048_val = libEA0820A1_gf_StoryResearchCategory(lv_indexResearch);
            if (auto66EAF048_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryZerg) {
                lv_purchasedCountZerg += 1;
                libEA0820A1_gf_TS_ResearchUIClearZergConfirmationText();
            }
            else if (auto66EAF048_val == libEA0820A1_ge_StoryResearchCategory_ResearchCategoryProtoss) {
                lv_purchasedCountProt += 1;
                libEA0820A1_gf_TS_ResearchUIClearProtossConfirmationText();
            }
            else {
            }
        }

        autoF971F62C_i = autoF971F62C_i + 1;
    }
    AchievementTermQuantitySet(1, "TStory01_8", lv_purchasedCountProt);
    AchievementTermQuantitySet(1, "TStory01_7", lv_purchasedCountZerg);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_ResearchUIPurchase_Init () {
    libEA0820A1_gt_TS_ResearchUIPurchase = TriggerCreate("libEA0820A1_gt_TS_ResearchUIPurchase_Func");
    TriggerAddEventResearchPanelPurchase(libEA0820A1_gt_TS_ResearchUIPurchase, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_ResearchUI - Exit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_ResearchUIExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libEA0820A1_gv_tS_ResearchUIExitEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    if ((libEA0820A1_gv_tS_ResearchUIExitCallback != null)) {
        TriggerExecute(libEA0820A1_gv_tS_ResearchUIExitCallback, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_ResearchUIExit_Init () {
    libEA0820A1_gt_TS_ResearchUIExit = TriggerCreate("libEA0820A1_gt_TS_ResearchUIExit_Func");
    TriggerAddEventResearchPanelExit(libEA0820A1_gt_TS_ResearchUIExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_RoomChange Button Response
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_RoomChangeButtonResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto5D13A0AB_ae;
    const int auto5D13A0AB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5D13A0AB_ae = libEA0820A1_gv_tS_RoomChangeButtonCount;
    lv_index = 1;
    for ( ; ( (auto5D13A0AB_ai >= 0 && lv_index <= auto5D13A0AB_ae) || (auto5D13A0AB_ai < 0 && lv_index >= auto5D13A0AB_ae) ) ; lv_index += auto5D13A0AB_ai ) {
        if ((libEA0820A1_gv_tS_RoomChangeButtons[lv_index] == EventDialogControl()) && (libEA0820A1_gv_tS_RoomChangeButtonCallbackClick[lv_index] != null)) {
            libEA0820A1_gv_tS_RoomChangeButtonCurrent = lv_index;
            TriggerExecute(libEA0820A1_gv_tS_RoomChangeButtonCallbackClick[lv_index], true, false);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_RoomChangeButtonResponse_Init () {
    libEA0820A1_gt_TS_RoomChangeButtonResponse = TriggerCreate("libEA0820A1_gt_TS_RoomChangeButtonResponse_Func");
    TriggerAddEventDialogControl(libEA0820A1_gt_TS_RoomChangeButtonResponse, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Console Exit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TSTechConsoleExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf_HideStoryUI(true, false);
    libEA0820A1_gf_ApplyCampaignTech(1);
    TriggerExecute(libEA0820A1_gv_tS_TechExitCallback, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TSTechConsoleExit_Init () {
    libEA0820A1_gt_TSTechConsoleExit = TriggerCreate("libEA0820A1_gt_TSTechConsoleExit_Func");
    TriggerAddEventPurchaseExit(libEA0820A1_gt_TSTechConsoleExit, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Item Selected
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TSTechItemSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;
    int lv_groupID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = libEA0820A1_ge_StoryTech_StoryTechMarineStimpacks;
    lv_groupID = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libEA0820A1_gf_TechPurchasableTechID(PurchaseGetSelectedPurchaseItem(1)) != libEA0820A1_ge_StoryTech_StoryTechNone)) {
        lv_tech = libEA0820A1_gf_TechPurchasableTechID(PurchaseGetSelectedPurchaseItem(1));
        lv_groupID = (libEA0820A1_gv_tS_Tech_GroupID[(lv_tech)]);
        PurchaseGroupSetState(libEA0820A1_gv_tS_TechGroup_UI[lv_groupID], c_purchaseGroupStateEnabled);
        if ((libEA0820A1_gv_tSX_Tech_Status[(lv_tech)] == libEA0820A1_ge_StoryTechStates_TechNew)) {
            libEA0820A1_gv_tSX_Tech_Status[(lv_tech)] = libEA0820A1_ge_StoryTechStates_TechAvailable;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TSTechItemSelected_Init () {
    libEA0820A1_gt_TSTechItemSelected = TriggerCreate("libEA0820A1_gt_TSTechItemSelected_Func");
    TriggerAddEventSelectedPurchaseItemChanged(libEA0820A1_gt_TSTechItemSelected, 1, c_invalidPurchaseItemId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Category Selected
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TSTechCategorySelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = c_invalidPurchaseCategoryId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tech = PurchaseGetSelectedPurchaseCategory(1);
    PurchaseCategorySetState(PurchaseGetSelectedPurchaseCategory(1), c_purchaseCategoryStateEnabled);
    PurchaseCategorySetNameText(libEA0820A1_gv_tS_TechCategory_UI[(lv_tech)], (libEA0820A1_gv_tS_TechCategoryName[(lv_tech)] + StringToText("")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TSTechCategorySelected_Init () {
    libEA0820A1_gt_TSTechCategorySelected = TriggerCreate("libEA0820A1_gt_TSTechCategorySelected_Func");
    TriggerAddEventSelectedPurchaseCategoryChanged(libEA0820A1_gt_TSTechCategorySelected, c_playerAny, c_invalidPurchaseCategoryId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS Tech Console Purchase
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TSTechConsolePurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tech;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tech = libEA0820A1_ge_StoryTech_StoryTechNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tech = libEA0820A1_gf_TechPurchasableTechID(EventPurchaseMade());
    if ((lv_tech != libEA0820A1_ge_StoryTech_StoryTechNone) && (libEA0820A1_gf_StoryCredits() >= libEA0820A1_gf_StoryTechCost(lv_tech)) && ((libEA0820A1_gv_tSX_Tech_Status[(lv_tech)] == libEA0820A1_ge_StoryTechStates_TechAvailable) || (libEA0820A1_gv_tSX_Tech_Status[(lv_tech)] == libEA0820A1_ge_StoryTechStates_TechNew))) {
        libEA0820A1_gv_tSX_Tech_Status[(lv_tech)] = libEA0820A1_ge_StoryTechStates_TechPurchased;
        libEA0820A1_gf_SetStoryCredits((libEA0820A1_gf_StoryCredits() - libEA0820A1_gf_StoryTechCost(lv_tech)));
        libEA0820A1_gf_TS_AddRecentTech(lv_tech);
        PurchaseItemPurchase(libEA0820A1_gv_tS_Tech_UI[(lv_tech)]);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_E8DE584A") + IntToText(libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryInfantry))), false);
        AchievementTermQuantitySet(1, "TStory01_1", libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryInfantry));
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_F621480B") + IntToText(libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryVehicles))), false);
        AchievementTermQuantitySet(1, "TStory01_2", libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryVehicles));
        AchievementTermQuantitySet(1, "TStory01_3", libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryStarships));
        AchievementTermQuantitySet(1, "TStory01_4", libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryBase));
        AchievementTermQuantitySet(1, "TStory01_5", libEA0820A1_gf_TS_StoryTechPurchasedCountInCategory(libEA0820A1_ge_StoryTechCategory_StoryTechCategoryDominion));
    }

    libEA0820A1_gf_TS_UpdateTechVisuals();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TSTechConsolePurchase_Init () {
    libEA0820A1_gt_TSTechConsolePurchase = TriggerCreate("libEA0820A1_gt_TSTechConsolePurchase_Func");
    TriggerAddEventPurchaseMade(libEA0820A1_gt_TSTechConsolePurchase, c_playerAny, c_invalidPurchaseItemId);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_Tech_CalldownSupplyDepot
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_Tech_CalldownSupplyDepot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateSelectable, true);
    UnitSetState(EventUnit(), c_unitStateTargetable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_Tech_CalldownSupplyDepot_Init () {
    libEA0820A1_gt_TS_Tech_CalldownSupplyDepot = TriggerCreate("libEA0820A1_gt_TS_Tech_CalldownSupplyDepot_Func");
    TriggerAddEventUnitAbility(libEA0820A1_gt_TS_Tech_CalldownSupplyDepot, null, AbilityCommand("DropToSupplyDepot", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_StartPerformanceLogging
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_Debug_StartPerformanceLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    PerfTestStart((StringExternal("Param/Value/lib_EA0820A1_5ED3A86E") + libEA0820A1_gf_MissionNameInUpperCase(libEA0820A1_gv_debug_MapIDForPerfTest)));
    TriggerExecute(libCamp_gt_DebugPerfTestGetFps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_Debug_StartPerformanceLogging_Init () {
    libEA0820A1_gt_Debug_StartPerformanceLogging = TriggerCreate("libEA0820A1_gt_Debug_StartPerformanceLogging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug_Preloading
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_Debug_Preloading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gf_TS_PrepareNextMissionPreloading(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_Debug_Preloading_Init () {
    libEA0820A1_gt_Debug_Preloading = TriggerCreate("libEA0820A1_gt_Debug_Preloading_Func");
    TriggerAddEventChatMessage(libEA0820A1_gt_Debug_Preloading, 1, "-preload", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loading Done
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_LoadingDone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankReload(libEA0820A1_gv_cP_Bank);
    BankWait(libEA0820A1_gv_cP_Bank);
    if ((BankSectionExists(libEA0820A1_gv_cP_Bank, ("CampaignCompleted")) == true)) {
        libEA0820A1_gv_cPX_CampaignCompleted = BankValueGetAsFlag(libEA0820A1_gv_cP_Bank, ("CampaignCompleted"), "1");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_LoadingDone_Init () {
    libEA0820A1_gt_LoadingDone = TriggerCreate("libEA0820A1_gt_LoadingDone_Func");
    TriggerAddEventLoadGameDone(libEA0820A1_gt_LoadingDone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_VSScreenContinue
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_VSScreenContinue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libEA0820A1_gv_tS_CurrentMap != libEA0820A1_ge_MapID_MapTValerian03)) {
        GameOver(1, c_gameOverVictory, false, false);
        return true;
    }

    libEA0820A1_gf_TS_CampaignVictory();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_VSScreenContinue_Init () {
    libEA0820A1_gt_TS_VSScreenContinue = TriggerCreate("libEA0820A1_gt_TS_VSScreenContinue_Func");
    TriggerAddEventVictoryPanelExit(libEA0820A1_gt_TS_VSScreenContinue, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_VSScreenPlayAgain
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_VSScreenPlayAgain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_simulation;

    // Automatic Variable Declarations
    int auto13940068_val;

    // Variable Initialization
    lv_simulation = true;

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    if ((libEA0820A1_gv_tSX_IsSimulation == true)) {
        lv_simulation = true;
    }
    else {
        lv_simulation = false;
    }
    auto13940068_val = EventVictoryPanelDifficultySelected();
    if (auto13940068_val == 4) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_D59B0F23") + StringExternal("Param/Value/lib_EA0820A1_A3C4C958")), false);
    }
    else if (auto13940068_val == 3) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_F7310E55") + StringExternal("Param/Value/lib_EA0820A1_DD95530A")), false);
    }
    else if (auto13940068_val == 2) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_7D7FCB4B") + StringExternal("Param/Value/lib_EA0820A1_2B8A4C4B")), false);
    }
    else if (auto13940068_val == 1) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_79F5D3EF") + StringExternal("Param/Value/lib_EA0820A1_E827242C")), false);
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_EA0820A1_68CF35C6") + StringExternal("Param/Value/lib_EA0820A1_C024B008")), false);
    }
    libEA0820A1_gf_PrepareForMission(libEA0820A1_gv_tS_CurrentMap, lv_simulation, true, EventVictoryPanelDifficultySelected());
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_VSScreenPlayAgain_Init () {
    libEA0820A1_gt_TS_VSScreenPlayAgain = TriggerCreate("libEA0820A1_gt_TS_VSScreenPlayAgain_Func");
    TriggerAddEventVictoryPanelPlayMissionAgain(libEA0820A1_gt_TS_VSScreenPlayAgain, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCinematic
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_EndCinematic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    transmissionsource lv_movieSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_movieSource = TransmissionSource();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    TransmissionSourceSetPauseAllowed(lv_movieSource, true);
    TransmissionSourceSetStreamingAllowed(lv_movieSource, true);
    TransmissionSend(PlayerGroupAll(), lv_movieSource, libNtve_gf_FullscreenPortrait(), "", null, null, null, 0.0, c_transmissionDurationAdd, false);
    TransmissionWait(TransmissionLastSent(), 2.5);
    libEA0820A1_gv_tS_EndCinematicFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_EndCinematic_Init () {
    libEA0820A1_gt_TS_EndCinematic = TriggerCreate("libEA0820A1_gt_TS_EndCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCredits
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_EndCredits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    libEA0820A1_gv_tS_EndCreditFinished = false;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsA2", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, true);
    TriggerEnable(libEA0820A1_gt_TS_EndCreditsEnds, true);
    while (!((libEA0820A1_gv_tS_EndCreditFinished == true))) {
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_EndCredits_Init () {
    libEA0820A1_gt_TS_EndCredits = TriggerCreate("libEA0820A1_gt_TS_EndCredits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TS_EndCreditsEnds
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_TS_EndCreditsEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gv_tS_EndCreditFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_TS_EndCreditsEnds_Init () {
    libEA0820A1_gt_TS_EndCreditsEnds = TriggerCreate("libEA0820A1_gt_TS_EndCreditsEnds_Func");
    TriggerEnable(libEA0820A1_gt_TS_EndCreditsEnds, false);
    TriggerAddEventGameCreditsFinished(libEA0820A1_gt_TS_EndCreditsEnds, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CurrentMap() != libCamp_ge_MapID_MapTStory01))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libEA0820A1_gt_Init00ReplaceUnit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_Initialization_Init () {
    libEA0820A1_gt_Initialization = TriggerCreate("libEA0820A1_gt_Initialization_Func");
    TriggerAddEventMapInit(libEA0820A1_gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 00 ReplaceUnit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_Init00ReplaceUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originUnitType;

    // Automatic Variable Declarations
    unitgroup auto9BA93C67_g;
    int auto9BA93C67_u;
    string auto0E6DA1A2_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((!((libCamp_gf_CurrentMap() == libCamp_ge_MapID_MapTStory01))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libEA0820A1_gv_unitGroupForReplaced = UnitGroup(null, libEA0820A1_gv_pLAYER_01_USER, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9BA93C67_g = libEA0820A1_gv_unitGroupForReplaced;
    auto9BA93C67_u = UnitGroupCount(auto9BA93C67_g, c_unitCountAll);
    for (;; auto9BA93C67_u -= 1) {
        libEA0820A1_gv_unitForReplaced = UnitGroupUnitFromEnd(auto9BA93C67_g, auto9BA93C67_u);
        if (libEA0820A1_gv_unitForReplaced == null) { break; }
        lv_originUnitType = UnitGetType(libEA0820A1_gv_unitForReplaced);
        auto0E6DA1A2_val = lv_originUnitType;
        if (auto0E6DA1A2_val == "Marine") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadMarine", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "CommandCenter") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadCommandCenter", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SupplyDepot") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSupplyDepot", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SupplyDepotLowered") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSupplyDepotLowered", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Barracks") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadBarracks", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "EngineeringBay") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadEngineeringBay", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Factory") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadFactory", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Starport") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadStarport", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Armory") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadArmory", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "MissileTurret") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadMissileTurret", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Bunker") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadBunker", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SensorTower") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSensorTower", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Refinery") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadRefinery", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "TechLab") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadTechlab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "BarracksTechLab") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadTechlab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "FactoryTechLab") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadTechlab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "StarportTechLab") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadTechlab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Reactor") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "BarracksReactor") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "FactoryReactor") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "StarportTechReactor") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "FusionCore") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadFusionCore", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "GhostAcademy") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadGhostAcademy", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SCV") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSCV", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Medic") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadMedic", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Firebat") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadFirebat", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Marauder") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadMarauder", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Reaper") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadReaper", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Ghost") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadGhost", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Spectre") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSpectre", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Banshee") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadBanshee", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Wraith") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadWraith", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "VikingFighter") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadVikingA", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "VikingAssault") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadVikingG", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Battlecruiser") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadBattlecruiser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Medivac") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadMedivac", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "ScienceVessel") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadScienceVessel", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Raven") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadRaven", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Hellion") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadHellion", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Diamondback") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadDiamondback", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Goliath") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadGoliath", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "Vulture") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadVulture", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "ThorAP") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadThorAP", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SiegeTank") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSiegeTank", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else if (auto0E6DA1A2_val == "SiegeTankSieged") {
            libNtve_gf_ReplaceUnit(libEA0820A1_gv_unitForReplaced, "SquadSiegeTankSieged", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_Init00ReplaceUnit_Init () {
    libEA0820A1_gt_Init00ReplaceUnit = TriggerCreate("libEA0820A1_gt_Init00ReplaceUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnPlayer1GetUnit
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_gt_OnPlayer1GetUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libEA0820A1_gt_Init00ReplaceUnit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libEA0820A1_gt_OnPlayer1GetUnit_Init () {
    libEA0820A1_gt_OnPlayer1GetUnit = TriggerCreate("libEA0820A1_gt_OnPlayer1GetUnit_Func");
    TriggerAddEventUnitChangeOwner(libEA0820A1_gt_OnPlayer1GetUnit, null);
}

void libEA0820A1_InitTriggers () {
    libEA0820A1_gt__ZergDropPod_Init();
    libEA0820A1_gt__TerranDropPod_Init();
    libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libEA0820A1_gt_TS_MissionVictoryCallbackBlockActionQueue_Init();
    libEA0820A1_gt_TS_AbortMission_Init();
    libEA0820A1_gt__CB_ChatBubbleActivated_Init();
    libEA0820A1_gt__CB_ActivateChatBubble_Init();
    libEA0820A1_gt__CB_ChatBubbleUnitDied_Init();
    libEA0820A1_gt__CB_ShowChatBubbleOnUnit_Init();
    libEA0820A1_gt_chatbubbledebug_Init();
    libEA0820A1_gt__CB_WaitForSound_Init();
    libEA0820A1_gt__MsgDlgButtonClicked_Init();
    libEA0820A1_gt_ZS_CampaignTrialDialogQuitClicked_Init();
    libEA0820A1_gt_ZS_CampaignTrialDialogUpgradeClicked_Init();
    libEA0820A1_gt_TS_MercNewToAvailable_Init();
    libEA0820A1_gt_TS_MercUIPurchase_Init();
    libEA0820A1_gt_TS_MercUIExit_Init();
    libEA0820A1_gt_TS_BattleReportMissionReplay_Init();
    libEA0820A1_gt_TS_BattleReportSceneReplay_Init();
    libEA0820A1_gt_TS_BattleReportPanelLeave_Init();
    libEA0820A1_gt_TS_ResearchUIPurchase_Init();
    libEA0820A1_gt_TS_ResearchUIExit_Init();
    libEA0820A1_gt_TS_RoomChangeButtonResponse_Init();
    libEA0820A1_gt_TSTechConsoleExit_Init();
    libEA0820A1_gt_TSTechItemSelected_Init();
    libEA0820A1_gt_TSTechCategorySelected_Init();
    libEA0820A1_gt_TSTechConsolePurchase_Init();
    libEA0820A1_gt_TS_Tech_CalldownSupplyDepot_Init();
    libEA0820A1_gt_Debug_StartPerformanceLogging_Init();
    libEA0820A1_gt_Debug_Preloading_Init();
    libEA0820A1_gt_LoadingDone_Init();
    libEA0820A1_gt_TS_VSScreenContinue_Init();
    libEA0820A1_gt_TS_VSScreenPlayAgain_Init();
    libEA0820A1_gt_TS_EndCinematic_Init();
    libEA0820A1_gt_TS_EndCredits_Init();
    libEA0820A1_gt_TS_EndCreditsEnds_Init();
    libEA0820A1_gt_Initialization_Init();
    libEA0820A1_gt_Init00ReplaceUnit_Init();
    libEA0820A1_gt_OnPlayer1GetUnit_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libEA0820A1_InitLib_completed = false;

void libEA0820A1_InitLib () {
    if (libEA0820A1_InitLib_completed) {
        return;
    }

    libEA0820A1_InitLib_completed = true;

    libEA0820A1_InitLibraries();
    libEA0820A1_InitVariables();
    libEA0820A1_InitTriggers();
}

